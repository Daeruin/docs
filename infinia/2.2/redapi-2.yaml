#
# @file
# @copyright
#                               --- WARNING ---
#
#     This work contains trade secrets of DataDirect Networks, Inc.  Any
#     unauthorized use or disclosure of the work, or any part thereof, is
#     strictly prohibited. Any use of this work without an express license
#     or permission is in violation of applicable laws.
#
# @copyright DataDirect Networks, Inc. CONFIDENTIAL AND PROPRIETARY
# @copyright DataDirect Networks Copyright, Inc. (c) 2021-2025. All rights reserved.
#
# @section DESCRIPTION
#
#   Name:       redapi.yaml
#   Project:    RED
#

# see https://swagger.io/docs/specification/components/
# todo: create schema for models

openapi: 3.0.0
info:
  title: RED RESTful API service
  contact: {}
  version: "1.0"
  description: >-
    A starting example showing how RED REST API can be specified and constructed
    using Swagger tools.
tags:
  - name: REDAPI
    description: "general REDAPI management APIs"
  - name: REDAUTH
    description: "REDAPI authentication management APIs"
  - name: LICENSE
    description: "REDAPI license management APIs"
  - name: CLUSTERS
    description: "REDAPI cluster management APIs"
  - name: STATS
    description: "REDAPI stats management APIs"
  - name: TESTS
    description: "REDAPI tests management APIs"
  - name: CONFIGS
    description: "REDAPI configuration management APIs"
  - name: EVENTS
    description: "REDAPI event management APIs"
  - name: REALM
    description: "REDAPI realm management APIs"
  - name: DMGR
    description: "REDAPI deployment manager management APIs"
  - name: SERVICES
    description: "REDAPI services management APIs"
  - name: REDHMI
    description: "REDAPI HMI management APIs"
  - name: METRIC
    description: "REDAPI metric management APIs"
  - name: SUPPORT
    description: "REDAPI support session APIs"
  - name: TARGET
    description: "REDAPI target APIs"
  - name: NAMESERVER
    description: "REDAPI nameserver management APIs"
  - name: HEALTH
    description: "REDAPI health management APIs"
  - name: TASKMGR
    description: "REDAPI task management APIs"
  - name: REDTS
    description: "REDAPI time series management APIs"
  - name: TRACE
    description: "REDAPI trace management APIs"
  - name: SERVICE
    description: "REDAPI service management APIs"
  - name: S3
    description: "REDAPI s3 management APIs"
paths:
  /info:
    get:
      tags:
        - REDAPI
      description: Get description of supported API
      operationId: controllers.settings.info
      parameters:
        - $ref: "#/components/parameters/detailed"
      responses:
        "200":
          description: Get API information
      security:
        - jwt: []

  /version:
    get:
      tags:
        - REDAPI
      description: Provide description of supported API
      operationId: controllers.version.all
      parameters:
        - in: query
          name: libs
          schema:
            type: string
          description: >-
            Trigger to include libraries information in the resposne. By default
            libraries are ignoring. Value is a trigger, so any key, or no key is
            allowed.
      responses:
        "200":
          description: Get API information
      security:
        - jwt: []

  /metric:
    get:
      tags:
        - REDAPI
      description: Get metric of API
      operationId: controllers.metric.getAll
      responses:
        "200":
          description: Get API information
      security:
        - jwt: []

  /accessible:
    get:
      tags:
        - REDAPI
      description: Get list of URI/methods accessible for logged in user
      operationId: controllers.user.accessible
      parameters:
        - $ref: "#/components/parameters/level"
      responses:
        "200":
          description: Get uri/methods list
      security:
        - jwt: []

  /inventory:
    get:
      tags:
        - REDAPI
      description: Get description of supported API
      operationId: controllers.inventory.get
      responses:
        "200":
          description: Get inventory data
      security:
        - jwt: []
    put:
      tags:
        - REDAPI
      description: Run RED-discover to update inventory
      operationId: inventory_update
      responses:
        "200":
          description: Successful update of inventory data
      security:
        - jwt: []
    delete:
      tags:
        - REDAPI
      description: Delete current inventory from RED registry
      operationId: inventory_delete
      responses:
        "200":
          description: Successful delete of inventory data
      security:
        - jwt: []
  /inventory/nodes/{node}:
    delete:
      tags:
        - REDAPI
      description: Delete current inventory node from RED registry
      operationId: controllers.inventory.delete_node
      parameters:
        - name: node
          in: path
          required: true
          description: The identifier for node can be a UUID or hostname
          schema:
            type: string
            pattern: ^.*
        - name: type-identity
          in: query
          required: true
          description: The type identifier can be an ENUM value, UUID, or hostname.
          schema:
            type: string
            pattern: ^.*
      responses:
        "200":
          description: Deleted inventory node successfully
      security:
        - jwt: []
  /inventory/devices:
    delete:
      tags:
        - REDAPI
      description: Delete device from RED registry
      operationId: controllers.inventory.delete_device
      parameters:
        - name: device
          in: query
          required: true
          description: the udid for device
          schema:
            type: string
            pattern: ^.*
      responses:
        "200":
          description: Successful deleted inventory device
      security:
        - jwt: []

  /alert/ack:
    put:
      tags:
        - REDAPI
      description: Ack Alert
      operationId: controllers.health.AckAlert
      responses:
        "200":
          description: Ack alert returned successfully
      security:
        - jwt: []

  /alert/pause:
    put:
      tags:
        - REDAPI
      description: Pause Alert
      operationId: controllers.health.PauseAlert
      responses:
        "200":
          description: Pause alert returned successfully
      security:
        - jwt: []

  /alert/close:
    put:
      tags:
        - REDAPI
      description: Close Alert
      operationId: controllers.health.CloseAlert
      responses:
        "200":
          description: Close alert returned successfully
      security:
        - jwt: []

  /alert/get:
    get:
      tags:
        - REDAPI
      description: show alert
      operationId: controllers.health.GetAlert
      parameters:
        - $ref: "#/components/parameters/alertid"
      responses:
        "200":
          description: alert returned successfully
      security:
        - jwt: []

  /alert/list:
    get:
      tags:
        - HEALTH
      description: Get all events
      operationId: controllers.health.GetAllAlert
      parameters:
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/severity"
        - $ref: "#/components/parameters/source"
        - $ref: "#/components/parameters/regex"
        - $ref: "#/components/parameters/type"
        - $ref: "#/components/parameters/cluster"
        - $ref: "#/components/parameters/instance"
        - $ref: "#/components/parameters/latest"
        - $ref: "#/components/parameters/oldest"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/hostname"
        - $ref: "#/components/parameters/alert"
      responses:
        "200":
          description: Get all events
      security:
        - jwt: []

  /health/infra/status:
    get:
      tags:
        - REDAPI
      description: Get health infra status
      operationId: controllers.health.HealthInfraStatus
      responses:
        "200":
          description: Get health infra status
      security:
        - jwt: []

  /health/infra/ping:
    post:
      tags:
        - REDAPI
      summary: Health Infra Ping Test
      description: Generates a test critical event and returns the event info.
      operationId: controllers.health.HealthInfraPing
      responses:
        "200":
          description: Create test critical event
      security:
        - jwt: []

  /health/integration/smtp:
    post:
      tags:
        - HEALTH
      summary: Create SMTP integration
      operationId: controllers.health.CreateSmtpIntegration
      parameters:
        - name: id
          in: query
          schema:
            type: string
          description: Integration ID
        - name: host
          in: query
          schema:
            type: string
          description: SMTP server hostname
        - name: port
          in: query
          schema:
            type: integer
            default: 587
          description: SMTP server port
        - name: username
          in: query
          schema:
            type: string
          description: SMTP username
        - name: password
          in: query
          schema:
            type: string
          description: SMTP password
        - name: from
          in: query
          schema:
            type: string
          description: From email address
        - name: to
          in: query
          schema:
            type: string
          description: Recipient email address
        - name: tlsmode
          in: query
          schema:
            type: string
          description: TLS mode for SMTP connection
        - name: tlsskipverify
          in: query
          schema:
            type: boolean
            default: false
          description: Skip TLS certificate verification (not recommended for production)
        - name: disabled
          in: query
          schema:
            type: boolean
            default: false
          description: Create in disabled state
      responses:
        "200":
          description: SMTP integration created successfully
      security:
        - jwt: []
    get:
      tags:
        - REDAPI
      summary: show smtp type integration
      operationId: controllers.health.GetSMTPIntegrationByID
      parameters:
        - $ref: "#/components/parameters/integrationid"
      responses:
        "200":
          description: smtp integration details returned successfully
      security:
        - jwt: []

  /health/integration/smtp/update:
    put:
      tags:
        - REDAPI
      summary: Update SMTP integration
      operationId: controllers.health.UpdateSmtpIntegration
      parameters:
        - name: id
          in: query
          schema:
            type: string
          description: Integration ID
        - name: host
          in: query
          schema:
            type: string
          description: SMTP server hostname
        - name: port
          in: query
          schema:
            type: integer
          description: SMTP server port
        - name: username
          in: query
          schema:
            type: string
          description: SMTP username
        - name: password
          in: query
          schema:
            type: string
          description: SMTP password
        - name: from
          in: query
          schema:
            type: string
          description: From email address
        - name: to
          in: query
          schema:
            type: string
          description: Recipient email address
        - name: tlsmode
          in: query
          schema:
            type: string
          description: TLS mode for SMTP connection
        - name: tlsskipverify
          in: query
          schema:
            type: string
          description: Skip TLS certificate verification (not recommended for production)
      responses:
        "200":
          description: SMTP integration updated successfully
      security:
        - jwt: []

  /health/integration/smtp/remove:
    delete:
      tags:
        - REDAPI
      summary: Remove SMTP integration
      operationId: controllers.health.RemoveSmtpIntegration
      parameters:
        - name: id
          in: query
          schema:
            type: string
          description: Integration ID
      responses:
        "200":
          description: SMTP integration removed successfully
      security:
        - jwt: []

  /health/integration/smtp/enable:
    put:
      tags:
        - REDAPI
      summary: Enable SMTP integration
      operationId: controllers.health.EnableSmtpIntegration
      parameters:
        - name: id
          in: query
          schema:
            type: string
          description: Integration ID
      responses:
        "200":
          description: SMTP integration enabled successfully
      security:
        - jwt: []

  /health/integration/smtp/disable:
    put:
      tags:
        - REDAPI
      summary: Disable SMTP integration
      operationId: controllers.health.DisableSmtpIntegration
      parameters:
        - name: id
          in: query
          schema:
            type: string
          description: Integration ID
      responses:
        "200":
          description: SMTP integration disabled successfully
      security:
        - jwt: []

  /health/integration/pagerduty:
    post:
      tags:
        - HEALTH
      summary: Create PagerDuty integration
      operationId: controllers.health.CreatePagerDutyIntegration
      parameters:
        - name: id
          in: query
          schema:
            type: string
          description: Integration ID
        - name: integration-key
          in: query
          schema:
            type: string
          description: PagerDuty integration key
        - name: disabled
          in: query
          schema:
            type: boolean
            default: false
          description: Create in disabled state
      responses:
        "200":
          description: PagerDuty integration created successfully
      security:
        - jwt: []
    get:
      tags:
        - REDAPI
      summary: show pagerduty type integration
      operationId: controllers.health.GetPagerDutyIntegrationByID
      parameters:
        - $ref: "#/components/parameters/integrationid"
      responses:
        "200":
          description: PagerDuty integration details returned successfully
      security:
        - jwt: []

  /health/integration/pagerduty/update:
    put:
      tags:
        - REDAPI
      summary: Update PagerDuty integration
      operationId: controllers.health.UpdatePagerDutyIntegration
      parameters:
        - name: id
          in: query
          schema:
            type: string
          description: Integration ID
        - name: integration-key
          in: query
          schema:
            type: string
          description: PagerDuty integration key
      responses:
        "200":
          description: PagerDuty integration updated successfully
      security:
        - jwt: []

  /health/integration/pagerduty/remove:
    delete:
      tags:
        - REDAPI
      summary: Remove PagerDuty integration
      operationId: controllers.health.RemovePagerDutyIntegration
      parameters:
        - name: id
          in: query
          schema:
            type: string
          description: Integration ID
      responses:
        "200":
          description: PagerDuty integration removed successfully
      security:
        - jwt: []

  /health/integration/pagerduty/enable:
    put:
      tags:
        - REDAPI
      summary: Enable PagerDuty integration
      operationId: controllers.health.EnablePagerDutyIntegration
      parameters:
        - name: id
          in: query
          schema:
            type: string
          description: Integration ID
      responses:
        "200":
          description: PagerDuty integration enabled successfully
      security:
        - jwt: []

  /health/integration/pagerduty/disable:
    put:
      tags:
        - REDAPI
      summary: Disable PagerDuty integration
      operationId: controllers.health.DisablePagerDutyIntegration
      parameters:
        - name: id
          in: query
          schema:
            type: string
          description: Integration ID
      responses:
        "200":
          description: PagerDuty integration disabled successfully
      security:
        - jwt: []

  /health/integration/webhook:
    post:
      tags:
        - HEALTH
      summary: Create Webhook integration
      operationId: controllers.health.CreateWebhookIntegration
      parameters:
        - name: id
          in: query
          schema:
            type: string
          description: Integration ID
        - name: url
          in: query
          schema:
            type: string
          description: Webhook URL endpoint
        - name: disabled
          in: query
          schema:
            type: boolean
            default: false
          description: Create in disabled state
      responses:
        "200":
          description: Webhook integration created successfully
      security:
        - jwt: []
    get:
      tags:
        - REDAPI
      summary: show webhook type integration
      operationId: controllers.health.GetWebhookIntegrationByID
      parameters:
        - $ref: "#/components/parameters/integrationid"
      responses:
        "200":
          description: webhook integration details
      security:
        - jwt: []

  /health/integration/webhook/update:
    put:
      tags:
        - REDAPI
      summary: Update Webhook integration
      operationId: controllers.health.UpdateWebhookIntegration
      parameters:
        - name: id
          in: query
          schema:
            type: string
          description: Integration ID
        - name: url
          in: query
          schema:
            type: string
          description: Webhook URL endpoint
      responses:
        "200":
          description: Webhook integration updated successfully
      security:
        - jwt: []

  /health/integration/webhook/remove:
    delete:
      tags:
        - REDAPI
      summary: Remove Webhook integration
      operationId: controllers.health.RemoveWebhookIntegration
      parameters:
        - name: id
          in: query
          schema:
            type: string
          description: Integration ID
      responses:
        "200":
          description: Webhook integration removed successfully
      security:
        - jwt: []

  /health/integration/webhook/enable:
    put:
      tags:
        - REDAPI
      summary: Enable Webhook integration
      operationId: controllers.health.EnableWebhookIntegration
      parameters:
        - name: id
          in: query
          schema:
            type: string
          description: Integration ID
      responses:
        "200":
          description: Webhook integration enabled successfully
      security:
        - jwt: []

  /health/integration/webhook/disable:
    put:
      tags:
        - REDAPI
      summary: Disable Webhook integration
      operationId: controllers.health.DisableWebhookIntegration
      parameters:
        - name: id
          in: query
          schema:
            type: string
          description: Integration ID
      responses:
        "200":
          description: Webhook integration disabled successfully
      security:
        - jwt: []

  /health/integration/slack:
    post:
      tags:
        - HEALTH
      summary: Create Slack integration
      operationId: controllers.health.CreateSlackIntegration
      parameters:
        - name: id
          in: query
          schema:
            type: string
          description: Integration ID
        - name: webhook-url
          in: query
          schema:
            type: string
          description: Slack Webhook URL
        - name: disabled
          in: query
          schema:
            type: boolean
            default: false
          description: Create in disabled state
      responses:
        "200":
          description: Slack integration created successfully
      security:
        - jwt: []
    get:
      tags:
        - REDAPI
      summary: show slack type integration
      operationId: controllers.health.GetSlackIntegrationByID
      parameters:
        - $ref: "#/components/parameters/integrationid"
      responses:
        "200":
          description: slack integration details returned successfully
      security:
        - jwt: []

  /health/integration/slack/update:
    put:
      tags:
        - REDAPI
      summary: Update Slack integration
      operationId: controllers.health.UpdateSlackIntegration
      parameters:
        - name: id
          in: query
          schema:
            type: string
          description: Integration ID
        - name: webhook-url
          in: query
          schema:
            type: string
          description: Slack Webhook URL
      responses:
        "200":
          description: Slack integration updated successfully
      security:
        - jwt: []

  /health/integration/slack/remove:
    delete:
      tags:
        - REDAPI
      summary: Remove Slack integration
      operationId: controllers.health.RemoveSlackIntegration
      parameters:
        - name: id
          in: query
          schema:
            type: string
          description: Integration ID
      responses:
        "200":
          description: Slack integration removed successfully
      security:
        - jwt: []

  /health/integration/slack/enable:
    put:
      tags:
        - REDAPI
      summary: Enable Slack integration
      operationId: controllers.health.EnableSlackIntegration
      parameters:
        - name: id
          in: query
          schema:
            type: string
          description: Integration ID
      responses:
        "200":
          description: Slack integration enabled successfully
      security:
        - jwt: []

  /health/integration/slack/disable:
    put:
      tags:
        - REDAPI
      summary: Disable Slack integration
      operationId: controllers.health.DisableSlackIntegration
      parameters:
        - name: id
          in: query
          schema:
            type: string
          description: Integration ID
      responses:
        "200":
          description: Slack integration disabled successfully
      security:
        - jwt: []

  /health/integration/list:
    get:
      tags:
        - REDAPI
      summary: List all integrations
      operationId: controllers.health.ListIntegrations
      responses:
        "200":
          description: List of integrations retrieved successfully
      security:
        - jwt: []

  /health/notification/configure:
    post:
      tags:
        - HEALTH
      summary: Configure notification severity
      operationId: controllers.health.NotificationConfigure
      parameters:
        - name: severity
          in: query
          schema:
            type: string
          description: Severity level(s) to configure (comma-separated for multiple)
      responses:
        "200":
          description: Notification configuration created successfully
      security:
        - jwt: []

  /health/notification/configure/remove:
    delete:
      tags:
        - REDAPI
      summary: Remove notification configuration
      operationId: controllers.health.RemoveNotificationConfig
      parameters:
        - name: severity
          in: query
          schema:
            type: string
          description: Severity level to remove
      responses:
        "200":
          description: Notification configuration removed successfully
      security:
        - jwt: []

  /health/notification/configure/show:
    get:
      tags:
        - REDAPI
      summary: List all notification configurations
      operationId: controllers.health.ListNotificationConfigs
      responses:
        "200":
          description: List of notification configurations retrieved successfully
      security:
        - jwt: []

  /actionchannel/add:
    post:
      tags:
        - REDAPI
      description: Add a new action channel
      operationId: controllers.health.AddActionChannel
      responses:
        "200":
          description: Action channel added successfully
      security:
        - jwt: []

  /actionchannel/update:
    put:
      tags:
        - REDAPI
      description: Update action channel
      operationId: controllers.health.UpdateActionChannel
      responses:
        "200":
          description: Action channel updated successfully
      security:
        - jwt: []

  /actionchannel/get:
    get:
      tags:
        - REDAPI
      description: show action channels
      operationId: controllers.health.GetActionChannel
      parameters:
        - $ref: "#/components/parameters/actionchannel_id"
      responses:
        "200":
          description: alert returned successfully
      security:
        - jwt: []

  /actionchannel/list:
    get:
      tags:
        - REDAPI
      description: Get all action channels
      operationId: controllers.health.GetAllActionChannel
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/filter"
      responses:
        "200":
          description: All action channels returned successfully
      security:
        - jwt: []

  /actionchannel/delete:
    delete:
      tags:
        - REDAPI
      description: Delete action channel
      operationId: controllers.health.DeleteActionChannel
      responses:
        "200":
          description: Action channel deleted successfully
      security:
        - jwt: []

  /alertconfig/add:
    post:
      tags:
        - REDAPI
      description: Add a new alert configuration
      operationId: controllers.health.AddAlertConfig
      responses:
        "200":
          description: Alert configuration added successfully
      security:
        - jwt: []

  /alertconfig/update:
    put:
      tags:
        - REDAPI
      description: Update alert configuration
      operationId: controllers.health.UpdateAlertConfig
      responses:
        "200":
          description: Alert configuration updated successfully
      security:
        - jwt: []

  /alertconfig/get:
    get:
      tags:
        - REDAPI
      description: show alert config
      operationId: controllers.health.GetAlertConfig
      parameters:
        - $ref: "#/components/parameters/alertconfig_id"
      responses:
        "200":
          description: alert returned successfully
      security:
        - jwt: []

  /alertconfig/list:
    get:
      tags:
        - REDAPI
      description: Get all alert configurations
      operationId: controllers.health.GetAllAlertConfig
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/filter"
      responses:
        "200":
          description: All alert configurations returned successfully
      security:
        - jwt: []

  /alertconfig/delete:
    delete:
      tags:
        - REDAPI
      description: Delete alert configuration
      operationId: controllers.health.DeleteAlertConfig
      responses:
        "200":
          description: Alert configuration deleted successfully
      security:
        - jwt: []

  /Notification/list:
    get:
      tags:
        - REDAPI
      description: Get all Notification
      operationId: controllers.health.GetAllNotification
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/filter"
      responses:
        "200":
          description: get All Notification returned successfully
      security:
        - jwt: []

  /forward/targets:
    get:
      tags:
        - TARGET
      description: Get list of forward targets
      operationId: controllers.forwarding_target.List
      parameters:
        - $ref: "#/components/parameters/targettype"
      responses:
        "200":
          description: Get all targets of specific types
      security:
        - jwt: []

  /forward:
    get:
      tags:
        - REDAPI
      description: Get RED forwarding targets
      operationId: controllers.forwarding_target.Get
      parameters:
        - $ref: "#/components/parameters/targetname"
        - $ref: "#/components/parameters/targettype"
      responses:
        "200":
          description: RED forwarding config returned successfully
      security:
        - jwt: []
    post:
      tags:
        - REDAPI
      description: Add new forwarding target
      operationId: controllers.forwarding_target.Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/forwarding_config"
            example:
              target: "influxdb"
              args: '{"token": "deadbeef", "org": "ddn" , "bucket": "red", "url": "http://localhost:8086", "interval": 1}'
        required: true
      responses:
        "201":
          description: Forwarding target added successfully
      security:
        - jwt: []
    put:
      tags:
        - REDAPI
      description: Update forwarding target
      operationId: controllers.forwarding_target.Put
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/forwarding_config"
            example:
              target: "influxdb"
              args: '{"token": "deadbeef", "org": "ddn" , "bucket": "red", "url": "http://localhost:8086", "interval": 1}'
        required: true
      responses:
        "201":
          description: Forwarding target updated successfully
      security:
        - jwt: []
    delete:
      tags:
        - REDAPI
      description: Delete forwarding target
      operationId: controllers.forwarding_target.Delete
      parameters:
        - $ref: "#/components/parameters/targetname"
        - $ref: "#/components/parameters/targettype"
      responses:
        "200":
          description: Forwarding target deleted successfully
      security:
        - jwt: []

  /forward/metric/level:
    get:
      tags:
        - REDAPI
      description: Get RED forwarding metric level
      operationId: controllers.forwarding_target.GetMetricLevel
      responses:
        "200":
          description: Get RED forwarding metric level
      security:
        - jwt: []
    put:
      tags:
        - REDAPI
      description: RED set forwarding metric level
      operationId: controllers.forwarding_target.SetMetricLevel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/forwarding_metrics_level"
            example:
              target: "http://<hostname>:8086"
              level: "low"
        required: true
      responses:
        "200":
          description: Metric level updated successfully
      security:
        - jwt: []

  /forward/metric/level/all:
    get:
      tags:
        - REDAPI
      description: Get all RED forwarding metric level
      operationId: controllers.forwarding_target.GetMetricLevelAll
      responses:
        "200":
          description: Get all RED forwarding metric level
      security:
        - jwt: []
    put:
      tags:
        - REDAPI
      description: RED set all forwarding metric level
      operationId: controllers.forwarding_target.SetMetricLevelAll
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/forwarding_metrics_level"
            example:
              level: "low"
        required: true
      responses:
        "200":
          description: Metric level updated successfully
      security:
        - jwt: []

  /forward/metric/list:
    get:
      tags:
        - REDAPI
      description: Get RED forwarding metric list
      operationId: controllers.forwarding_target.GetMetricList
      responses:
        "200":
          description: Get RED forwarding metric list
      security:
        - jwt: []
    put:
      tags:
        - REDAPI
      description: RED set forwarding metric list
      operationId: controllers.forwarding_target.SetMetricList
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/forwarding_metrics_list"
            example:
              target: "http://<hostname>:8086"
              metrics: ["memory", "cpu", "netdev"]
        required: true
      responses:
        "200":
          description: Metric list updated successfully
      security:
        - jwt: []

  /forward/metric/available:
    get:
      tags:
        - REDAPI
      description: Get available RED metric list
      operationId: controllers.forwarding_target.GetMetricavailable
      responses:
        "200":
          description: Get available RED metric list
      security:
        - jwt: []

  /prometheus/config:
    get:
      tags:
        - REDAPI
      description: Generate Prometheus config
      operationId: controllers.prometheus.Configgenerate
      parameters:
        - $ref: "#/components/parameters/configinstances"
        - $ref: "#/components/parameters/address-type-ip"
      responses:
        "200":
          description: Generate Prometheus config
      security:
        - jwt: []

  /daemons:
    get:
      tags:
        - REDAPI
      description: Get list of daemons from registry
      operationId: controllers.daemons.get_all
      responses:
        "200":
          description: Get list of daemons success
      security:
        - jwt: []
    put:
      tags:
        - REDAPI
      description: Start or stop data services
      operationId: controllers.daemon.update
      parameters:
        - in: query
          name: service
          schema:
            type: string
          description: Start or stop the data service name.
        - in: query
          name: startservice
          schema:
            type: boolean
          description: Start data service(s).
        - in: query
          name: stopservice
          schema:
            type: boolean
          description: Stop data service(s).
        - in: query
          name: hostname
          schema:
            type: string
          description: Host name to start or stop data services.
      responses:
        "200":
          description: Successfully updated data service(s).
      security:
        - jwt: []

  /daemons/{daemon_uuid}:
    get:
      tags:
        - REDAPI
      description: Get list of daemons from registry
      operationId: controllers.daemons.get
      parameters:
        - $ref: "#/components/parameters/daemon_uuid"
      responses:
        "200":
          description: Get daemons success
      security:
        - jwt: []

  /auth_user:
    get:
      tags:
        - REDAUTH
      description: Get authenticate user
      operationId: controllers.user.authenticate
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/user_id"
        - $ref: "#/components/parameters/password"
        - $ref: "#/components/parameters/caps"
        - $ref: "#/components/parameters/identity"
      responses:
        "200":
          description: JWT token

  /auth_openid_user:
    get:
      tags:
        - REDAUTH
      description: Get authenticate OpenID user
      operationId: controllers.user.authenticate_openid
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/identity_id"
        - $ref: "#/components/parameters/openid_code"
      responses:
        "200":
          description: JWT token and user_id

  /auth_openid_client:
    get:
      tags:
        - REDAUTH
      description: Get OpenID client id
      operationId: controllers.identity.openid_client
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/identity_id"
      responses:
        "200":
          description: OpenID client id

  /user:
    get:
      tags:
        - REDAUTH
      description: Get a list of users
      operationId: controllers.user.list_ids
      parameters:
        - $ref: "#/components/parameters/user_id_optional"
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/caps"
        - $ref: "#/components/parameters/identity"
        - $ref: "#/components/parameters/group"
        - $ref: "#/components/parameters/email"
        - $ref: "#/components/parameters/from"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/keyword"
        - $ref: "#/components/parameters/user_filter_field"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          description: Get users list
      security:
        - jwt: []
    post:
      tags:
        - REDAUTH
      description: Add user
      operationId: controllers.user.add
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/user_id"
        - $ref: "#/components/parameters/name"
        - $ref: "#/components/parameters/email"
        - $ref: "#/components/parameters/password"
        - $ref: "#/components/parameters/newpass"
        - $ref: "#/components/parameters/caps"
        - $ref: "#/components/parameters/identity"
        - $ref: "#/components/parameters/groups"
      responses:
        "200":
          description: User successfully reactivated
        "201":
          description: User successfully added
      security:
        - jwt: []
    put:
      tags:
        - REDAUTH
      description: Update user
      operationId: controllers.user.update
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/user_id"
        - $ref: "#/components/parameters/name"
        - $ref: "#/components/parameters/email"
        - $ref: "#/components/parameters/password"
        - $ref: "#/components/parameters/caps"
        - $ref: "#/components/parameters/identity"
        - $ref: "#/components/parameters/groups"
      responses:
        "200":
          description: User successfully updated
      security:
        - jwt: []
    delete:
      tags:
        - REDAUTH
      description: Delete user
      operationId: controllers.user.remove
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/user_id"
      responses:
        "200":
          description: User successfully deleted
      security:
        - jwt: []

  /user/grant:
    put:
      tags:
        - REDAUTH
      description: Give resource access to user
      operationId: controllers.user.grant
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/user_id"
        - $ref: "#/components/parameters/caps"
      responses:
        "200":
          description: Access successfully given
      security:
        - jwt: []

  /user/revoke:
    put:
      tags:
        - REDAUTH
      description: Revoke resource access from user
      operationId: controllers.user.revoke
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/user_id"
        - $ref: "#/components/parameters/caps"
      responses:
        "200":
          description: Access successfully revoked
      security:
        - jwt: []

  /user/change_password:
    post:
      tags:
        - REDAUTH
      description: Change own password
      operationId: controllers.user.change_password
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/user_id"
        - $ref: "#/components/parameters/current_password"
        - $ref: "#/components/parameters/new_password"
      responses:
        "200":
          description: Password updated
      security:
        - jwt: []

  /user/cert:
    post:
      tags:
        - REDAUTH
      description: generate and sign certificate for user. ❗️❗️❗️ IMPORTANT! This is an unsecure method! Change it to csr signing, when it will be available!
      operationId: controllers.user.generate_cert
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/user_id"
      responses:
        "200":
          description: Here is a certificate with Key
          # schema: # TODO!
      security:
        - jwt: []

  /user/group:
    get:
      tags:
        - REDAUTH
      description: Get list groups
      operationId: controllers.user.group_list
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/group"
        - $ref: "#/components/parameters/from"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/keyword"
        - $ref: "#/components/parameters/group_filter_field"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          description: Get groups list
      security:
        - jwt: []
    post:
      tags:
        - REDAUTH
      description: Add group
      operationId: controllers.user.group_add
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/group"
        - $ref: "#/components/parameters/about"
        - $ref: "#/components/parameters/caps"
      responses:
        "200":
          description: Group successfully added
      security:
        - jwt: []
    put:
      tags:
        - REDAUTH
      description: Update group
      operationId: controllers.user.group_update
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/group"
        - $ref: "#/components/parameters/about"
        - $ref: "#/components/parameters/caps"
      responses:
        "200":
          description: Group successfully updated
      security:
        - jwt: []
    delete:
      tags:
        - REDAUTH
      description: Delete group
      operationId: controllers.user.group_remove
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/group"
      responses:
        "200":
          description: Group successfully deleted
      security:
        - jwt: []

  /user/group/grant:
    put:
      tags:
        - REDAUTH
      description: Give resource access to group
      operationId: controllers.user.group_grant
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/group"
        - $ref: "#/components/parameters/caps"
      responses:
        "200":
          description: Access successfully given
      security:
        - jwt: []

  /user/group/revoke:
    put:
      tags:
        - REDAUTH
      description: Revoke resource access from group
      operationId: controllers.user.group_revoke
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/group"
        - $ref: "#/components/parameters/caps"
      responses:
        "200":
          description: Access successfully revoked
      security:
        - jwt: []

  /user/group/adduser:
    put:
      tags:
        - REDAUTH
      description: Add users to group
      operationId: controllers.user.group_add_user
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/group"
        - $ref: "#/components/parameters/users"
      responses:
        "200":
          description: User successfully added
      security:
        - jwt: []

  /user/group/removeuser:
    put:
      tags:
        - REDAUTH
      description: Remove users from group
      operationId: controllers.user.group_remove_user
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/group"
        - $ref: "#/components/parameters/users"
      responses:
        "200":
          description: User successfully removed
      security:
        - jwt: []

  /identity:
    get:
      tags:
        - REDAUTH
      description: Get list of identity providers
      operationId: controllers.identity.list_ids
      parameters:
        - $ref: "#/components/parameters/level"
      responses:
        "200":
          description: Gets identity providers list
      security:
        - jwt: []

    post:
      tags:
        - REDAUTH
      description: Add identity provider
      operationId: controllers.identity.add
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/identity_id"
        - $ref: "#/components/parameters/identity_type"
        - $ref: "#/components/parameters/group"
        - $ref: "#/components/parameters/about"
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        "201":
          description: Identity provider successfully added
      security:
        - jwt: []

    put:
      tags:
        - REDAUTH
      description: Update identity provider
      operationId: controllers.identity.update
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/identity_id"
        - $ref: "#/components/parameters/identity_type"
        - $ref: "#/components/parameters/group"
        - $ref: "#/components/parameters/about"
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: Identity provider successfully updated
      security:
        - jwt: []

    delete:
      tags:
        - REDAUTH
      description: Delete identity provider
      operationId: controllers.identity.remove
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/identity_id"
      responses:
        "200":
          description: Identity provider successfully deleted
      security:
        - jwt: []

  /identity_mapping:
    post:
      tags:
        - REDAUTH
      description: Add identity mapping
      operationId: controllers.identity_mapping.add
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/identity_id"
        - $ref: "#/components/parameters/group"
        - $ref: "#/components/parameters/group_filter"
      responses:
        "200":
          description: Identity mapping successfully added
      security:
        - jwt: []

    delete:
      tags:
        - REDAUTH
      description: Delete identity mapping
      operationId: controllers.identity_mapping.remove
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/identity_id"
        - $ref: "#/components/parameters/group"
      responses:
        "200":
          description: Identity mapping successfully deleted
      security:
        - jwt: []

  /certs:
    get:
      tags:
        - REDAUTH
      description: Get RED ca security certificate
      operationId: controllers.certs.getca
      responses:
        "200":
          description: Get security ca certificate
      security:
        - jwt: []

  /certs/s3:
    put:
      tags:
        - REDAUTH
      description: Install s3 server security certificate
      operationId: controllers.certs.install
      parameters:
        - in: query
          name: force
          schema:
            type: boolean
            default: false
          description: Install certificate forcefully.
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/certs_request"
        required: true
      responses:
        "200":
          description: Security s3 certificate is successfully installed
      security:
        - jwt: []

  /certs/proxy:
    put:
      tags:
        - REDAUTH
      description: Install proxy server security certificate
      operationId: controllers.certs.proxy
      parameters:
        - in: query
          name: force
          schema:
            type: boolean
            default: false
          description: Install certificate forcefully.
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/certs_request"
        required: true
      responses:
        "200":
          description: Proxy security certificate is successfully installed
      security:
        - jwt: []

  /red_client/config:
    get:
      tags:
        - REDAUTH
      description: Get red client configuration
      operationId: controllers.red_client_config.get
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/cert_name"
      responses:
        "200":
          description: Returns red client configuration
      security:
        - jwt: []

  /red_client/client_manage:
    post:
      tags:
        - REDAPI
      description: Client management
      operationId: controllers.red_client_manage.post
      parameters:
      - in: query
        name: clienttype
        schema:
          type: string
        description: client type
      - in: query
        name: action
        schema:
          type: string
        description: Start stop restart status
      - in: query
        name: nodes
        schema:
          type: string
        description: List of host name
      responses:
        "200":
          description: Client management succeed
      security:
        - jwt: []

  /client_certs:
    get:
      tags:
        - REDAUTH
      description: Get list of client certificates
      operationId: controllers.client_certs.get
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/cert_name"
      responses:
        "200":
          description: Gets client certificates list
      security:
        - jwt: []

    post:
      tags:
        - REDAUTH
      description: Add client certificate
      operationId: controllers.client_certs.add
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/caps"
        - $ref: "#/components/parameters/cert_name"
        - $ref: "#/components/parameters/cert_expiration"
      responses:
        "200":
          description: Client certificate successfully added
      security:
        - jwt: []

    put:
      tags:
        - REDAUTH
      description: Validate client certificate
      operationId: controllers.client_certs.validate
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: Client certificate successfully validated
      security:
        - jwt: []

    delete:
      tags:
        - REDAUTH
      description: Delete client certificate
      operationId: controllers.client_certs.revoke
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/cert_name"
      responses:
        "200":
          description: Client certificate successfully deleted
      security:
        - jwt: []

  /license:
    get:
      tags:
        - LICENSE
      description: Get current license
      operationId: controllers.license.get_license
      parameters:
        - $ref: "#/components/parameters/license_field"
      responses:
        "200":
          description: Gets current license ok
        "202":
          description: License expired
        "203":
          description: License invalid
      security:
        - jwt: []

    post:
      tags:
        - LICENSE
      description: Install license
      operationId: controllers.license.install
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: License successfully installed
      security:
        - jwt: []

  /license_generate:
    post:
      tags:
        - LICENSE
      description: Generate license
      operationId: controllers.license.generate
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: License successfully generated
      security:
        - jwt: []

  /license_request:
    get:
      tags:
        - LICENSE
      description: Get the license request
      operationId: controllers.license.request
      parameters:
        - $ref: "#/components/parameters/activation_token"
        - $ref: "#/components/parameters/regenerate"
      responses:
        "200":
          description: Gets the license request
      security:
        - jwt: []

  /license_status:
    get:
      tags:
        - LICENSE
      description: Get license validity and compliance
      operationId: controllers.license.status
      responses:
        "200":
          description: Gets the license status
      security:
        - jwt: []

  /license_check:
    get:
      tags:
        - LICENSE
      description: Get the license validity and compliance
      operationId: controllers.license.check
      responses:
        "200":
          description: Gets the license status
      security:
        - jwt: []

  /license_eula:
    get:
      tags:
        - LICENSE
      description: Get current EULA agreement
      operationId: controllers.license.get_eula
      responses:
        "200":
          description: Gets current EULA agreement date
        "404":
          description: EULA agreement not found
      security:
        - jwt: []

    post:
      tags:
        - LICENSE
      description: Set EULA agreement
      operationId: controllers.license.set_eula
      responses:
        "200":
          description: EULA agreement successfully set
      security:
        - jwt: []

  /nameserver/hosts:
    get:
      tags:
        - NAMESERVER
      description: Get nameservers
      operationId: controllers.nameserver.get_all
      responses:
        "200":
          description: Gets all nameservers
      security:
        - jwt: []
  /nameserver/hosts/{host}:
    get:
      tags:
        - NAMESERVER
      description: Get nameserver
      operationId: controllers.nameserver.get
      parameters:
         - $ref: "#/components/parameters/host"
      responses:
        "200":
          description: Get nameserver on specified host
      security:
        - jwt: []
  /nameserver/domains:
    get:
      tags:
        - NAMESERVER
      description: Get domains
      operationId: controllers.nameserver.get_domains
      responses:
        "200":
          description: Gets all domains
      security:
        - jwt: []
  /nameserver/domains/{domain}:
    get:
      tags:
        - NAMESERVER
      description: Get nameserver
      operationId: controllers.nameserver.get_domain
      parameters:
        - $ref: "#/components/parameters/domain"
        - $ref: "#/components/parameters/detailed"
      responses:
        "200":
          description: Gets all nameservers
      security:
        - jwt: []
  /nameserver/config:
    get:
      tags:
        - NAMESERVER
      description: Get nameserver monitor configuration
      operationId: controllers.nameserver.get_config
      responses:
        "200":
          description: Gets nameserver monitor configuration
      security:
        - jwt: []
    put:
      tags:
        - NAMESERVER
      description: Update nameserver monitor configuration
      operationId: controllers.nameserver.update_config
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/forwarding_metrics_level"
      responses:
        "200":
          description: nameserver monitor configuration updated
      security:
        - jwt: []   

  /nameserver/enable:
    put:
      tags:
        - NAMESERVER
      summary: Enables nameserver containers
      operationId: nameserver_enable
      responses:
        "200":
          description: Enables nameserver containers
      security:
        - jwt: []

  /nameserver/disable:
    put:
      tags:
        - NAMESERVER
      summary: Disables nameserver containers
      operationId: nameserver_disable
      responses:
        "200":
          description: Disables nameserver containers
      security:
        - jwt: []

  /clusters:
    get:
      tags:
        - CLUSTERS
      description: Get list of clusters
      operationId: controllers.clusters.get_all
      parameters:
        - $ref: "#/components/parameters/detailed"
        - in: query
          name: verbose
          description: log verbose information
          schema:
            type: boolean
      responses:
        "200":
          description: Get all clusters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/clusters_resp"
              examples:
                success:
                  $ref: "#/components/examples/clusters_example"
      security:
        - jwt: []
    post:
      tags:
        - CLUSTERS
      summary: Create a new cluster
      operationId: controllers.clusters.add
      description: Generates a RED cluster object
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/new_cluster"
            example:
              clustername: "cluster1"
              device-include: "nvme:*"
              device-exclude: "*:/dev/sd*, *:/var/lib/red/*"
      responses:
        "201":
          description: Success - new cluster added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/clusters_resp"
              examples:
                success:
                  $ref: "#/components/examples/clusters_example"
      security:
        - jwt: []

  /clusters/{cluster_name}/capacity_percent:
    get:
      tags:
        - CLUSTERS
      description: Get the capacity percentage
      operationId: controllers.clusters.get_capacity_percent
      parameters:
        - $ref: "#/components/parameters/cluster_name"
      responses:
        "200":
          description: Get cluster capacity percent
      security:
        - jwt: []

  /clusters/{cluster_name}:
    get:
      tags:
        - CLUSTERS
      description: Get a single cluster
      operationId: controllers.clusters.get
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - in: query
          name: verbose
          description: log verbose information
          schema:
            type: boolean
        - in: query
          name: with-status
          description: Add status and capacity information
          schema:
            type: boolean
      responses:
        "200":
          description: Return cluster by name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cluster_resp"
              examples:
                success:
                  $ref: "#/components/examples/cluster_example"
      security:
        - jwt: []
    delete:
      tags:
        - CLUSTERS
      description: Delete the cluster with specified id
      operationId: controllers.clusters.delete
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - in: query
          name: is-ignore-errors
          schema:
            type: boolean
      responses:
        "200":
          description: Successfully deleted cluster
      security:
        - jwt: []

  /clusters/{cluster_name}/start:
    post:
      tags:
        - CLUSTERS
      description: Start all instances for cluster
      operationId: controllers.clusters.start
      parameters:
        - $ref: "#/components/parameters/cluster_name"
      responses:
        "200":
          description: Start all instances by id for specified cluster
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cluster_start_resp"
              examples:
                success:
                  $ref: "#/components/examples/cluster_start_example"

      security:
        - jwt: []

  /clusters/{cluster_name}/stop:
    post:
      tags:
        - CLUSTERS
      description: Stop all instances for cluster
      operationId: controllers.clusters.stop
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - in: query
          name: hard
          schema:
            type: boolean
          description: Hard stop sends sigkill to each instance.
      responses:
        "200":
          description: Stop all instances by id for specified cluster
      security:
        - jwt: []

  /clusters/{cluster_name}/status:
    get:
      tags:
        - CLUSTERS
      description: Get status of all instances in cluster runtime
      operationId: controllers.clusters.status
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - in: query
          name: verbose
          description: log verbose information
          schema:
            type: boolean
      responses:
        "200":
          description: Get cluster status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cluster_status_resp"
              examples:
                success:
                  $ref: "#/components/examples/cluster_status_example"
      security:
        - jwt: []

  /clusters/{cluster_name}/health:
    get:
      tags:
        - CLUSTERS
      description: Get health of cluster
      operationId: controllers.clusters.health
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - in: query
          name: verbose
          description: log verbose information
          schema:
            type: boolean
      responses:
        "200":
          description: Get cluster health
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cluster_health_resp"
              examples:
                success:
                  $ref: "#/components/examples/cluster_health_example"
      security:
        - jwt: []

  /clusters/{cluster_name}/dump:
    post:
      tags:
        - CLUSTERS
      description: Generate required dumps
      operationId: cluster.dump.create
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - in: query
          name: nodes
          schema:
            type: string
          description: List of host name(s).
        - in: query
          name: target
          schema:
            type: string
          description: List of agents.
        - in: query
          name: traces
          schema:
            type: boolean
          description: Request dump traces.
        - in: query
          name: reason
          schema:
            type: string
          description: Dump reason.
        - in: query
          name: cores
          schema:
            type: boolean
          description: Request dump cores.
        - in: query
          name: memory
          schema:
            type: boolean
          description: Request dump memory.
        - in: query
          name: profile
          schema:
            type: boolean
          description: Dump management server profile data.
        - in: query
          name: coreimage
          schema:
            type: boolean
          description: Dump RED core image.
      responses:
        "201":
          description: Generate required dumps.
      security:
        - jwt: []
    delete:
      tags:
        - CLUSTERS
      description: Delete old dumps
      operationId: cluster.dump.delete
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - name: incident_age_threshold
          in: query
          schema:
            type: integer
            default: 0
          description: Delete dumps older than specified number of days.
      responses:
        "200":
          description: Successfully deleted dumps
      security:
        - jwt: []

  /clusters/{cluster_name}/logs:
    post:
      tags:
        - CLUSTERS
      description: Upload cluster logs
      operationId: cluster.logs.upload
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - in: query
          name: caseid
          schema:
            type: string
          description: Log file will be tagged with specified case ID
        - in: query
          name: backend
          schema:
            type: string
          description: Backend to upload logs (ddn_development, ddn_production, local_directory)
        - in: query
          name: logpath
          schema:
            type: string
          description: Local directory to store log bundle
        - in: query
          name: nodes
          schema:
            type: string
          description: List of host name(s)
        - in: query
          name: instances
          schema:
            type: string
          description: List of instance(s)
        - in: query
          name: target
          schema:
            type: string
          description: List of agents
        - in: query
          name: traces
          schema:
            type: boolean
          description: Request dump traces
        - in: query
          name: reason
          schema:
            type: string
          description: Request dump traces reason
        - in: query
          name: cores
          schema:
            type: boolean
          description: Request dump cores
        - in: query
          name: memory
          schema:
            type: boolean
          description: Request dump memory
        - in: query
          name: profile
          schema:
            type: boolean
          description: Dump management server profile data
        - in: query
          name: waitgraph
          schema:
            type: boolean
          description: Dump waitgraph
        - in: query
          name: coreimage
          schema:
            type: boolean
          description: Dump RED core image
        - in: query
          name: compression
          schema:
            type: string
          description: Compression method for redlog file used redlog-pack
        - in: query
          name: level
          schema:
            type: string
            default: medium
            enum:
              - -L
              - light
              - -M
              - medium
              - -H
              - heavy
              - callhome_daily
              - callhome_init
              - callhome_ftdc
        - in: query
          name: disablerealm
          schema:
            type: boolean
          description: Upload cluster logs only
        - in: query
          name: sosdata
          schema:
            type: boolean
          description: Collect sos report with log bundle
        - in: query
          name: logs_pattern
          schema:
            type: string
          description: Collect only log files that matches given pattern
        - in: query
          name: logs_section
          description: Collect only log files from given section
          schema:
            type: string
            enum:
            - dlm
            - e2e
            - waitgraph
      responses:
        "201":
          description: Upload cluster logs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cluster_logs_resp"
              examples:
                success:
                  $ref: "#/components/examples/cluster_logs_example"
        # we cant use 204 because we do want to return response object
        #"204":
        #  description: >
        #    only for callhome initial logs; it returns only only expected url
        #    where logs will be uploaded
        #  content:
        #    application/json:
        #      schema:
        #        type: string
        #        description: link to file in google cloud storage

      security:
        - jwt: []

  /clusters/{cluster_name}/monitor_stats:
    get:
      tags:
        - CLUSTERS
      description: Return monitor stats for cluster
      operationId: controllers.clusters.monitor_stats
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - in: query
          name: verbose
          description: log verbose information
          schema:
            type: boolean
      responses:
        "200":
          description: Get monitor stats for a cluster name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cluster_monitor_stats_resp"
      security:
        - jwt: []

  /clusters/{cluster_name}/is_running:
    get:
      tags:
        - CLUSTERS
      description: Check for running cluster
      operationId: controllers.clusters.is_cluster_running
      parameters:
        - $ref: "#/components/parameters/cluster_name"
      responses:
        "200":
          description: Get running status for a cluster name
          content:
            application/json:
              schema:
                type: string
                example: "true"
      security:
        - jwt: []

  /clusters/{cluster_name}/configs:
    get:
      tags:
        - CLUSTERS
      description: Get all configs for cluster
      operationId: controllers.configs.get_all
      parameters:
        - $ref: "#/components/parameters/cluster_name"
      responses:
        "200":
          description: Get all configs for a cluster name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cluster_configs_resp"
              examples:
                success:
                  $ref: "#/components/examples/cluster_configs_example"
      security:
        - jwt: []

  /clusters/{cluster_name}/configs/{config_name}:
    get:
      tags:
        - CLUSTERS
      description: Return requested config for cluster
      operationId: controllers.configs.get
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/config_name"
        - in: query
          name: verbose
          description: log verbose information
          schema:
            type: boolean
      responses:
        "200":
          description: Get config by name for specified cluster
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cluster_config_resp"
              examples:
                success:
                  $ref: "#/components/examples/cluster_config_example"
      security:
        - jwt: []
    put:
      tags:
        - CLUSTERS
      description: Update a specific config for cluster
      operationId: controllers.configs.update
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/config_name"
        - in: query
          name: is-populate
          schema:
            type: boolean
        - in: query
          name: is-propose
          schema:
            type: boolean
        - in: query
          name: initinstances
          schema:
            type: boolean
          description: If true with is-propose true, initialize runtime config the instance data so the cluster can be started.
      responses:
        "200":
          description: Update config by name for specified cluster
      security:
        - jwt: []
    delete:
      tags:
        - CLUSTERS
      description: Delete config in cluster
      operationId: controllers.configs.delete
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/config_name"
      responses:
        "200":
          description: Successfully deleted config
      security:
        - jwt: []

  /clusters/{cluster_name}/configs/{config_name}/cats:
    get:
      tags:
        - CLUSTERS
      description: Get list of CATs for cluster and config
      operationId: controllers.cats.list
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/config_name"
        - $ref: "#/components/parameters/pool"
        - $ref: "#/components/parameters/abnormal"
        - $ref: "#/components/parameters/from"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/keyword"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          description: List CATs for specified cluster and config
      security:
        - jwt: []

  /clusters/{cluster_name}/configs/{config_name}/dp_profile:
    get:
      tags:
        - CLUSTERS
      description: Get list of dp_profiles for cluster and config
      operationId: controllers.dp_profiles.list
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/config_name"
        - in: query
          name: detailed
          schema:
            type: boolean
          description: Return detailed profiles
      responses:
        "200":
          description: Get dp_profiles for specified cluster and config
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cluster_dp_profile_resp"
              examples:
                success:
                  $ref: "#/components/examples/cluster_dp_profile_example"
      security:
        - jwt: []
  /clusters/{cluster_name}/configs/{config_name}/dp_profile/{dp_profile_name}:
    get:
      tags:
        - CLUSTERS
      description: Get specified dp_profile for cluster and config
      operationId: controllers.dp_profiles.get
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/config_name"
        - $ref: "#/components/parameters/dp_profile_name"
      responses:
        "200":
          description: Get specified dp_profile for cluster and config
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/dp_profile_resp"
              examples:
                success:
                  $ref: "#/components/examples/dp_profile_example"
      security:
        - jwt: []
    post:
      tags:
        - CLUSTERS
      description: Create a dp_profile for specified config for cluster
      operationId: controllers.dp_profiles.create
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/config_name"
        - $ref: "#/components/parameters/dp_profile_name"
      responses:
        "201":
          description: Create a dp_profile for specified config for cluster
      security:
        - jwt: []
  /clusters/{cluster_name}/configs/{config_name}/dp_profile/{dp_profile_name}/rename/{new_profile_name}:
    put:
      tags:
        - CLUSTERS
      description: Rename a dp_profile
      operationId: controllers.dp_profiles.rename
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/config_name"
        - $ref: "#/components/parameters/dp_profile_name"
        - $ref: "#/components/parameters/new_profile_name"
      responses:
        "200":
          description: Rename dp_profile
      security:
        - jwt: []
  /clusters/{cluster_name}/configs/{config_name}/dp_profile/{dp_profile_name}/ext:
    post:
      tags:
        - CLUSTERS
      description: Create a dp_profile for specified config for cluster
      operationId: controllers.dp_profiles.createext
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/config_name"
        - $ref: "#/components/parameters/dp_profile_name"
      responses:
        "201":
          description: Create a dp_profile for specified config for cluster
      security:
        - jwt: []

  /configs/params/{cluster_name}:
    get:
      tags:
        - CLUSTERS
      description: Get default creation params for specified cluster
      operationId: controllers.configs.get_params
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - in: query
          name: availability-rank
          schema:
            type: string
          description: Rank used for auto generated dataset profiles
      responses:
        "200":
          description: Get config create params by name for specified cluster
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cluster_config_params_resp"
              examples:
                success:
                  $ref: "#/components/examples/cluster_config_params_example"
      security:
        - jwt: []
  #    post:
  #      tags:
  #        - CLUSTERS
  #      description: Create new config for cluster using specified create params
  #      operationId: controllers.configs.generate
  #      parameters:
  #        - $ref: "#/components/parameters/cluster_name"
  #      requestBody:
  #        required: true
  #        content:
  #          text/plain:
  #            schema:
  #              type: string
  #      responses:
  #        "200":
  #          description: Create a new config for cluster using specified create params
  #      security:
  #        - jwt: []

  /clusters/{cluster_name}/leader:
    get:
      tags:
        - CLUSTERS
      description: Get cluster leader
      operationId: controllers.clusters.get_leader
      parameters:
        - $ref: "#/components/parameters/cluster_name"
      responses:
        "200":
          description: Get instance id of cluster leader
          content:
            application/json:
              schema:
                type: integer
                example: 3
      security:
        - jwt: []

  # /clusters/{cluster_name}/propose:
  #   post:
  #     tags:
  #       - CLUSTERS
  #     description: Creates new cluster config and propose it as runtime
  #     operationId: controllers.configs.propose_runtime
  #     parameters:
  #       - $ref: "#/components/parameters/cluster_name"
  #     responses:
  #       "200":
  #         description: Name of the successfully created config
  #     security:
  #       - jwt: []

  /clusters/{cluster_name}/desired_config/{config_name}:
    put:
      tags:
        - CLUSTERS
      description: Update desired config definition for cluster
      operationId: controllers.clusters.SetDesiredConfig
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/config_name"
        - in: query
          name: initinstances
          schema:
            type: boolean
          description: If true, initialize runtime config with instance data so cluster can be started.
      responses:
        "200":
          description: Successfully updated desired config
      security:
        - jwt: []

  /clusters/{cluster_name}/instances:
    get:
      tags:
        - CLUSTERS
      description: Get instances for cluster
      operationId: controllers.instances.get_all
      parameters:
        - $ref: "#/components/parameters/cluster_name"
      responses:
        "200":
          description: Get all instances for a cluster name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cluster_instances_resp"
              examples:
                success:
                  $ref: "#/components/examples/cluster_instances_example"
      security:
        - jwt: []

  /clusters/{cluster_name}/instances/{node}:
    delete:
      tags:
        - CLUSTERS
      description: Delete Instance for cluster
      operationId: controllers.instances.delete
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/single_node_pathparam"
      responses:
        "200":
          description: Delete Instance
      security:
        - jwt: []
    put:
      tags:
        - CLUSTERS
      description: Create Instance for cluster
      operationId: controllers.instances.create
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/single_node_pathparam"
      responses:
        "200":
          description: Create Instance
      security:
        - jwt: []
    get:
      tags:
        - CLUSTERS
      description: Get a single instance for cluster
      operationId: controllers.instances.get
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/single_node_pathparam"
      responses:
        "200":
          description: Get instance by id for specified cluster
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cluster_instance_resp"
              examples:
                success:
                  $ref: "#/components/examples/cluster_instance_example"
      security:
        - jwt: []

  /clusters/{cluster_name}/instances/{instance_id}/start:
    post:
      tags:
        - CLUSTERS
      description: Start a single instance for cluster
      operationId: controllers.instances.start
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/instance_id"
      responses:
        "200":
          description: Start instance by id for specified cluster
          content:
            application/json:
              schema:
                type: boolean
                example: true
      security:
        - jwt: []

  /clusters/{cluster_name}/instances/{instance_id}/enter_maintenance:
    post:
      tags:
        - CLUSTERS
      description: Enter maintenance mode for a single instance for cluster
      operationId: controllers.instances.enter_maintenance
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/instance_id"
      responses:
        "200":
          description: Maintenance mode entered successfully
          content:
            application/json:
              schema:
                type: boolean
                example: true
      security:
        - jwt: []

  /clusters/{cluster_name}/instances/{instance_id}/exit_maintenance:
    post:
      tags:
        - CLUSTERS
      description: Exit maintenance mode for a single instance for cluster
      operationId: controllers.instances.exit_maintenance
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/instance_id"
      responses:
        "200":
          description: Maintenance mode exited successfully
          content:
            application/json:
              schema:
                type: boolean
                example: true
      security:
        - jwt: []

  /clusters/{cluster_name}/instances/{instance_id}/stop:
    post:
      tags:
        - CLUSTERS
      description: Stop a single instance for cluster
      operationId: controllers.instances.stop
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/instance_id"
      responses:
        "200":
          description: Stop instance by id for specified cluster
          content:
            application/json:
              schema:
                type: boolean
                example: true
      security:
        - jwt: []

  /clusters/{cluster_name}/instances/{instance_id}/status:
    get:
      tags:
        - CLUSTERS
      description: Get a single instance status for cluster
      operationId: controllers.instances.status
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/instance_id"
      responses:
        "200":
          description: Get instance by id for specified cluster
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cluster_instance_status_resp"
              examples:
                success:
                  $ref: "#/components/examples/cluster_instance_status_example"
      security:
        - jwt: []

  /clusters/{cluster_name}/configs/{config_name}/pools:
    get:
      tags:
        - CLUSTERS
      description: Get all pools for cluster
      operationId: controllers.pools.get_all
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/config_name"
      responses:
        "200":
          description: Get all pools for a cluster name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cluster_config_pools_resp"
              examples:
                success:
                  $ref: "#/components/examples/cluster_config_pools_example"
      security:
        - jwt: []
    post:
      tags:
        - CLUSTERS
      description: Create a pool
      operationId: controllers.pools.create
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/config_name"
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        "201":
          description: Pool created
      security:
        - jwt: []

  /clusters/{cluster_name}/configs/{config_name}/pools/{pool_uuid}:
    get:
      tags:
        - CLUSTERS
      description: Get a single pool for cluster
      operationId: controllers.pools.get
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/config_name"
        - $ref: "#/components/parameters/pool_uuid"
        - $ref: "#/components/parameters/pool_details"
      responses:
        "200":
          description: Get pool by id for specified cluster
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cluster_config_pool_resp"
              examples:
                success:
                  $ref: "#/components/examples/cluster_config_pool_example"
      security:
        - jwt: []
    delete:
      tags:
        - CLUSTERS
      description: Delete a pool
      operationId: controllers.pools.delete
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/config_name"
        - $ref: "#/components/parameters/pool_uuid"
      responses:
        "200":
          description: Pool deleted
      security:
        - jwt: []

  /clusters/{cluster_name}/configs/{config_name}/pools/{pool_uuid}/cats:
    get:
      tags:
        - CLUSTERS
      description: Get all CAT devices for cluster and config
      operationId: controllers.cats.get_all
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/config_name"
        - $ref: "#/components/parameters/pool_uuid"
      responses:
        "200":
          description: Get all CAT devices for a cluster name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cats_resp"
              examples:
                success:
                  $ref: "#/components/examples/cats_example"
      security:
        - jwt: []
    post:
      tags:
        - CLUSTERS
      description: Add a CAT device to a pool in the specified cluster and config
      operationId: controllers.cats.add
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/config_name"
        - $ref: "#/components/parameters/pool_uuid"
        - in: query
          name: propose
          schema:
            type: boolean
            default: false
      responses:
        "201":
          description: CAT added to specified pool
      security:
        - jwt: []

  /clusters/{cluster_name}/configs/{config_name}/pools/{pool_uuid}/cats/{cat_uuid}:
    get:
      tags:
        - CLUSTERS
      description: Return a single CAT device for cluster
      operationId: controllers.cats.get
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/config_name"
        - $ref: "#/components/parameters/pool_uuid"
        - $ref: "#/components/parameters/cat_uuid"
      responses:
        "200":
          description: Get CAT device by id for specified cluster and config
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cat_resp"
              examples:
                success:
                  $ref: "#/components/examples/cat_example"
      security:
        - jwt: []
    delete:
      tags:
        - CLUSTERS
      description: Delete CAT device from specified cluster and config
      operationId: controllers.cats.delete
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/config_name"
        - $ref: "#/components/parameters/pool_uuid"
        - $ref: "#/components/parameters/cat_uuid"
      responses:
        "200":
          description: Delete CAT device
      security:
        - jwt: []
    put:
      tags:
        - CLUSTERS
      description: Move CAT device in specified cluster and config
      operationId: controllers.cats.move
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/config_name"
        - $ref: "#/components/parameters/pool_uuid"
        - $ref: "#/components/parameters/cat_uuid"
      responses:
        "200":
          description: Move CAT device
      security:
        - jwt: []

  /clusters/{cluster_name}/cats/{cat_uuid}:
    put:
      tags:
        - CLUSTERS
      description: Reset CAT device in specified cluster
      operationId: controllers.cat.reset
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/cat_uuid"
      responses:
        "200":
          description: Reset CAT device
      security:
        - jwt: []

  /clusters/{cluster_name}/cats:
    put:
      tags:
        - CLUSTERS
      description: Reset CATs in specified cluster
      operationId: controllers.cat.reset_cats
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/cat_ids"
        - $ref: "#/components/parameters/all_cats"
      responses:
        "200":
          description: Reset CAT devices
      security:
        - jwt: []

  /clusters/{cluster_name}/runtime:
    get:
      tags:
        - CLUSTERS
      description: Get cluster runtime config
      operationId: controllers.clusters.runtime
      parameters:
        - $ref: "#/components/parameters/cluster_name"
      responses:
        "200":
          description: Get runtime config
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cluster_runtime_resp"
              examples:
                success:
                  $ref: "#/components/examples/cluster_runtime_example"
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants:
    get:
      tags:
        - CLUSTERS
      description: Get a list of tennants
      operationId: cluster.tenant.list
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/nodetails"
        - in: query
          name: verbose
          description: Log verbose information
          schema:
            type: boolean
        - in: query
          name: recurse
          schema:
            type: boolean
            default: false
          description: Gets the tree of tenants, subtenants and users
      responses:
        "200":
          description: Get list of tenants
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tenants_resp"
              examples:
                recurse_true:
                  $ref: "#/components/examples/tenants_recurse_example"
                recurse_false:
                  $ref: "#/components/examples/tenants_example"
      security:
        - jwt: []
    post:
      tags:
        - CLUSTERS
      description: Create tenant
      operationId: tenant_post
      parameters:
        - $ref: "#/components/parameters/cluster_name"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tenantsub_request"
      responses:
        "201":
          description: Create tenant
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/create_tenant_resp"
              examples:
                success:
                  $ref: "#/components/examples/create_tenant_example"
      security:
        - jwt: []

  /clusters/{cluster_name}/datasets:
    get:
      tags:
        - CLUSTERS
      description: Return all user datasets
      operationId: cluster.datasets.get_all
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/nodetails"
        - $ref: "#/components/parameters/flavors"
        - $ref: "#/components/parameters/next"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/keyword"
        - $ref: "#/components/parameters/limit"
        - in: query
          name: verbose
          description: Log verbose information
          schema:
            type: boolean
        - in: query
          name: tenants
          description: List of tenants
          schema:
            type: string
            pattern: ^[\w0-9,]+
        - in: query
          name: subtenants
          description: List of subtenants
          schema:
            type: string
            pattern: ^[\w0-9,]+
        - in: query
          name: services
          description: List of services
          schema:
            type: string
            pattern: ^[\w0-9,]+
      responses:
        "200":
          description: Get all user datasets
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}:
    get:
      tags:
        - CLUSTERS
      description: Get tenant
      operationId: cluster.tenant.get
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - in: query
          name: verbose
          description: log verbose information
          schema:
            type: boolean
      responses:
        "200":
          description: Get tenant
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_tenant_resp"
              examples:
                success:
                  $ref: "#/components/examples/get_tenant_example"
      security:
        - jwt: []
    put:
      tags:
        - CLUSTERS
      description: Update tenant
      operationId: cluster.tenant.put
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tenantsub_request"
      responses:
        "200":
          description: Update tenant
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/update_tenant_resp"
              examples:
                success:
                  $ref: "#/components/examples/update_tenant_example"
      security:
        - jwt: []
    delete:
      tags:
        - CLUSTERS
      description: Delete tenant
      operationId: cluster.tenant.delete
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
      responses:
        "200":
          description: Delete tenant
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/subtenants:
    get:
      tags:
        - CLUSTERS
      description: Get list of subtenants
      operationId: cluster.subtenant.list
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/nodetails"
        - $ref: "#/components/parameters/from"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/keyword"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/subtenant_filter_field"
        - in: query
          name: recurse
          schema:
            type: boolean
            default: false
          description: Gets the tree of subtenants and users
        - in: query
          name: verbose
          description: Log verbose information
          schema:
            type: boolean
      responses:
        "200":
          description: List subtenants
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/list_subtenants_resp"
              examples:
                recurse_false:
                  $ref: "#/components/examples/list_subtenants_example"
                recurse_true:
                  $ref: "#/components/examples/list_subtenants_recurse_example"
      security:
        - jwt: []
    post:
      tags:
        - CLUSTERS
      description: Create cluster subtenant
      operationId: cluster.subtenant.post
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_admins"
        - $ref: "#/components/parameters/subtenant_viewers"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tenantsub_request"
      responses:
        "201":
          description: Create cluster subtenant
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/create_subtenant_resp"
              examples:
                success:
                  $ref: "#/components/examples/create_subtenant_example"
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/subtenants/{subtenant_name}:
    get:
      tags:
        - CLUSTERS
      description: Get subtenant
      operationId: cluster.subtenant.get
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - in: query
          name: verbose
          description: log verbose information
          schema:
            type: boolean
      responses:
        "200":
          description: Get subtenant
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_subtenant_resp"
              examples:
                success:
                  $ref: "#/components/examples/get_subtenant_example"
      security:
        - jwt: []
    put:
      tags:
        - CLUSTERS
      description: Update subtenant
      operationId: cluster.subtenant.put
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tenantsub_request"
      responses:
        "200":
          description: Update subtenant
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/update_subtenant_resp"
              examples:
                success:
                  $ref: "#/components/examples/update_subtenant_example"
      security:
        - jwt: []
    delete:
      tags:
        - CLUSTERS
      description: Delete subtenant
      operationId: cluster.subtenant.delete
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
      responses:
        "200":
          description: Delete subtenant
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/subtenants/{subtenant_name}/services/{service_name}:
    get:
      tags:
        - SERVICE
      description: Get service
      operationId: cluster.service.get
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/servicetype"
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/service_name"
        - in: query
          name: verbose
          description: Log verbose information
          schema:
            type: boolean
      responses:
        "200":
          description: Get Service
      security:
        - jwt: []
    put:
      tags:
        - SERVICE
      description: Update Service
      operationId: cluster.service.put
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/servicetype"
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/service_name"
        - in: query
          name: verbose
          description: Log verbose information
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/service_request"
      responses:
        "200":
          description: Put Service
      security:
        - jwt: []
    delete:
      tags:
        - SERVICE
      description: Delete service
      operationId: cluster.service.delete
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/servicetype"
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/service_name"
        - in: query
          name: keepdataset
          schema:
            type: boolean
          description: Service will be deleted by keeping its dataset.
        - in: query
          name: dryrun
          description: dryrun will return total number of buckets.
          schema:
            type: boolean
      responses:
        "200":
          description: Delete service
      security:
        - jwt: []

  /clusters/{cluster_name}/services:
    get:
      tags:
        - CLUSTERS
      description: Get all user services
      operationId: cluster.services.get_all
      parameters:
        - $ref: "#/components/parameters/servicetype"
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/from"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/keyword"
        - $ref: "#/components/parameters/limit"
        - in: query
          name: verbose
          description: log verbose information
          schema:
            type: boolean
      responses:
        "200":
          description: Get all user services
      security:
        - jwt: []

  /clusters/{cluster_name}/users:
    get:
      tags:
        - CLUSTERS
      description: Get all user users
      operationId: cluster.users.get_all
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/user_id_optional"
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/caps"
        - $ref: "#/components/parameters/identity"
        - $ref: "#/components/parameters/group"
        - $ref: "#/components/parameters/email"
        - $ref: "#/components/parameters/from"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/keyword"
        - $ref: "#/components/parameters/user_filter_field"
        - $ref: "#/components/parameters/limit"
        - in: query
          name: verbose
          description: Log verbose information
          schema:
            type: boolean
        - in: query
          name: realm
          description: List only realm users
          schema:
            type: boolean
            default: false
        - in: query
          name: tenants
          description: List of tenants
          schema:
            type: string
            pattern: ^[\w0-9,]+
      responses:
        "200":
          description: Get all user users
      security:
        - jwt: []

  /clusters/{cluster_name}/groups:
    get:
      tags:
        - REDAUTH
      description: Get all user groups
      operationId: cluster.groups.get_all
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/group"
        - $ref: "#/components/parameters/next"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/keyword"
        - $ref: "#/components/parameters/group_filter_field"
        - $ref: "#/components/parameters/limit"
        - in: query
          name: verbose
          description: Log verbose information
          schema:
            type: boolean
        - in: query
          name: realm
          description: List only realm groups
          schema:
            type: boolean
            default: false
        - in: query
          name: tenants
          description: List of tenants
          schema:
            type: string
            pattern: ^[\w0-9,]+
      responses:
        "200":
          description: Get all user groups
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/services:
    get:
      tags:
        - SERVICE
      description: Get list of services
      operationId: cluster.service.list
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/servicetype"
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/from"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/keyword"
        - $ref: "#/components/parameters/limit"
        - in: query
          name: verbose
          description: Log verbose information
          schema:
            type: boolean
      responses:
        "200":
          description: Get all services
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/subtenants/{subtenant_name}/services:
    post:
      tags:
        - SERVICE
      summary: Create a new service
      operationId: cluster.service.post
      description: Creates a RED service object
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/password"
        - in: query
          name: verbose
          description: Log verbose information
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/service_request"
      responses:
        "201":
          description: Success - added new service
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/subtenants/{subtenant_name}/datasets:
    get:
      tags:
        - CLUSTERS
      description: Get a list of datasets
      operationId: cluster.dataset.list
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/nodetails"
        - $ref: "#/components/parameters/flavors"
        - $ref: "#/components/parameters/cookie"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/keyword"
        - $ref: "#/components/parameters/limit"
        - in: query
          name: verbose
          description: log verbose information
          schema:
            type: boolean
      responses:
        "200":
          description: Get dataset lists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/list_datasets_resp"
              examples:
                success:
                  $ref: "#/components/examples/list_datasets_example"
      security:
        - jwt: []
    post:
      tags:
        - CLUSTERS
      description: Create a dataset
      operationId: cluster.dataset.post
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/dataset_request"
            example:
              name: "dataset1"
              nstripes: 16
              pool: 1
              ltid: 1
              type: "volume"
              bulk_quota: 34359738368
              xattrs: { "k1": "v1", "k2": "v2" }
      responses:
        "201":
          description: Create cluster dataset
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/subtenants/{subtenant_name}/datasets/{dataset_name}:
    get:
      tags:
        - CLUSTERS
      description: Get a dataset for a tenant/subtenant combination
      operationId: cluster.dataset.get
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/dataset_name"
        - in: query
          name: verbose
          description: log verbose information
          schema:
            type: boolean
      responses:
        "200":
          description: Dataset found for a tenant/subtenant combination
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_dataset_resp"
              examples:
                success:
                  $ref: "#/components/examples/get_dataset_example"
      security:
        - jwt: []
    put:
      tags:
        - CLUSTERS
      description: Update dataset for a tenant/subtenant combination
      operationId: cluster.dataset.put
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/dataset_name"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/dataset_request"
      responses:
        "200":
          description: Dataset updated successfully for a tenant/subtenant combination
      security:
        - jwt: []
    delete:
      tags:
        - CLUSTERS
      description: Delete dataset for a tenant/subtenant combination
      operationId: cluster.dataset.delete
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/dataset_name"
      responses:
        "200":
          description: Dataset deleted successfully for a tenant/subtenant combination
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/subtenants/{subtenant_name}/datasets/{dataset_name}/snapshot:
    get:
      tags:
        - CLUSTERS
      description: Get a list of snapshots
      operationId: cluster.snapshot.get
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/dataset_name"
      responses:
        "200":
          description: Listed snapshots successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/list_snapshots_resp"
              examples:
                success:
                  $ref: "#/components/examples/list_snapshots_example"
      security:
        - jwt: []
    post:
      tags:
        - CLUSTERS
      description: Create dataset snapshot
      operationId: cluster.snapshot.create
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/dataset_name"
      responses:
        "201":
          description: Created dataset snapshot successfully
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/subtenants/{subtenant_name}/datasets/{dataset_name}/snapshot/{snapshot_id}:
    delete:
      tags:
        - CLUSTERS
      description: Delete dataset snapshot
      operationId: cluster.snapshot.delete
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/dataset_name"
        - $ref: "#/components/parameters/snapshot_id"
      responses:
        "200":
          description: Dataset snapshot deleted successfully
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/subtenants/{subtenant_name}/datasets/{dataset_name}/volumes:
    get:
      tags:
        - CLUSTERS
      description: Get list of all volumes for a tenant/subtenant dataset combination.
      operationId: volume_list
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/dataset_name"
        - $ref: "#/components/parameters/volume_filter_field"
        - $ref: "#/components/parameters/from"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/keyword"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          description: Get list of volumes successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/list_volumes_resp"
              examples:
                success:
                  $ref: "#/components/examples/list_volumes_example"
      security:
        - jwt: []
    post:
      tags:
        - CLUSTERS
      description: Create volume for a tenant/subtenant dataset combination.
      operationId: volume_create
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/dataset_name"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/volume_request"
            example:
              volumeName: vol01
              nblocks: 1048576
              block_size: 4096
              nvmfTarget: false
              nvmfProp: {}
              xattrs: {}
        required: true
      responses:
        "201":
          description: Volume successfully created
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/subtenants/{subtenant_name}/datasets/{dataset_name}/volumes/{volume_name}:
    get:
      tags:
        - CLUSTERS
      description: Get a volume for a tenant/subtenant dataset combination.
      operationId: volume_get
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/dataset_name"
        - $ref: "#/components/parameters/volume_name"
      responses:
        "200":
          description: Volume found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_volume_resp"
              examples:
                success:
                  $ref: "#/components/examples/get_volume_example"
      security:
        - jwt: []
    put:
      tags:
        - CLUSTERS
      description: Update volume for a tenant/subtenant dataset combination.
      operationId: volume_update
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/dataset_name"
        - $ref: "#/components/parameters/volume_name"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/volume_update_request"
        required: true
      responses:
        "200":
          description: Volume successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/update_volume_resp"
              examples:
                success:
                  $ref: "#/components/examples/update_volume_example"
      security:
        - jwt: []
    delete:
      tags:
        - CLUSTERS
      description: Delete volume for a tenant/subtenant dataset combination.
      operationId: volume_delete
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/dataset_name"
        - $ref: "#/components/parameters/volume_name"
        - in: query
          name: force
          schema:
            type: boolean
            default: false
          description: Delete the volume forcefully.
      responses:
        "200":
          description: volume successfully deleted
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/subtenants/{subtenant_name}/datasets/{dataset_name}/volumes/{volume_name}/expose:
    put:
      tags:
        - CLUSTERS
      description: Expose volume for a tenant/subtenant dataset combination as NVMF block.
      operationId: volume_expose
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/dataset_name"
        - $ref: "#/components/parameters/volume_name"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/volume_request"
#             example:
#               nvmfProp: { "transport": "TCP", "instanceId": [1,2,3], "addrfam":"IPv4" }
        required: true
      responses:
        "200":
          description: Volume successfully exposed
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/subtenants/{subtenant_name}/datasets/{dataset_name}/volumes/{volume_name}/unexpose:
    delete:
      tags:
        - CLUSTERS
      description: Delete unexposed volume for a tenant/subtenant dataset combination.
      operationId: volume_unexpose
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/dataset_name"
        - $ref: "#/components/parameters/volume_name"
      responses:
        "200":
          description: volume successfully unexposed
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/subtenants/{subtenant_name}/datasets/{dataset_name}/volumes/{volume_name}/resize:
    put:
      tags:
        - CLUSTERS
      description: Resize volume for a tenant/subtenant dataset combination.
      operationId: volume_resize
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/dataset_name"
        - $ref: "#/components/parameters/volume_name"
        - in: query
          name: force
          schema:
            type: boolean
            default: false
          description: Resize the volume forcefully
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/volume_resize_request"
        required: true
      responses:
        "200":
          description: Volume successfully resized
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/subtenants/{subtenant_name}/datasets/{dataset_name}/volumes/{volume_name}/clone:
    post:
      tags:
        - CLUSTERS
      description: Clone a volume from a master volume for a tenant/subtenant dataset combination.
      operationId: volume_clone
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/dataset_name"
        - $ref: "#/components/parameters/volume_name"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/volume_clone_request"
#             example:
#               srcvolume: "volume_1"
#               sizeInBytes: 1048576
#               srcvolumeMd5: "1420ca4d3691b8e99b72b9a2fca34924"
        required: true
      responses:
        "201":
          description: Volume clone successful
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/subtenants/{subtenant_name}/subsystems/{subsystem_name}:
    post:
      tags:
        - CLUSTERS
      description: subsystem create call.
      operationId: subsystem_create
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/subsystem_name"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/subsystem_create_request"
        required: true
      responses:
        "200":
          description: Subsystem created successfully.
      security:
        - jwt: []
    get:
      tags:
        - CLUSTERS
      description: Get subsystem
      operationId: subsystem_show
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/subsystem_name"
      responses:
        "200":
          description: Subsystem show successful
      security:
        - jwt: []
    delete:
      tags:
        - CLUSTERS
      description: Delete subsystem
      operationId: subsystem_delete
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/subsystem_name"
        - in: query
          name: force
          schema:
            type: boolean
            default: false
          description: Delete the subsystem forcefully
      responses:
        "200":
          description: Subsystem delete successful
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/subtenants/{subtenant_name}/list:
    get:
      tags:
        - CLUSTERS
      description: Get subsystem list
      operationId: subsystem_list
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
      responses:
        "200":
          description: Get subsystem list successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/list_subsystems_resp"
              examples:
                success:
                  $ref: "#/components/examples/list_subsystems_example"
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/subtenants/{subtenant_name}/subsystems/{subsystem_name}/hosts:
    post:
      tags:
        - CLUSTERS
      description: Add host to subsystem
      operationId: subsystem_addhost
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/subsystem_name"
      responses:
        "200":
          description: Subsystem add host successful
      security:
        - jwt: []
    put:
      tags:
        - CLUSTERS
      description: Remove host from subsystem
      operationId: subsystem_removehost
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/subsystem_name"
      responses:
        "200":
          description: Subsystem remove host successful
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/subtenants/{subtenant_name}/subsystems/{subsystem_name}/enable:
    put:
      tags:
        - CLUSTERS
      summary: Enables ACL based on subsystem' host list
      operationId: subsystem_aclenable
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/subsystem_name"
      responses:
        "200":
          description: Subsystem' ACL successfully enabled
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/subtenants/{subtenant_name}/subsystems/{subsystem_name}/disable:
    put:
      tags:
        - CLUSTERS
      summary: Disables ACL based on subsystem' host list
      operationId: subsystem_acldisable
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/subsystem_name"
      responses:
        "200":
          description: Subsystem' ACL successfully disabled
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/subtenants/{subtenant_name}/instances/{instance_id}/vhost_ctrls:
    get:
      tags:
        - CLUSTERS
      description: List all Vhost controllers for a tenant/subtenant dataset combination.
      operationId: vhost_controller_list
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/instance_id"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
      responses:
        "200":
          description: Get a list of all Vhost controllers successfully
      security:
        - jwt: []
    post:
      tags:
        - CLUSTERS
      description: Create Vhost controller for a tenant/subtenant dataset combination.
      operationId: vhost_controller_create
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/instance_id"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/vhost_request"
            example:
              name: vhost.1
        required: true
      responses:
        "201":
          description: Vhost controller created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/vhost_controller_resp"
              examples:
                success:
                  $ref: "#/components/examples/vhost_controller_example"
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/subtenants/{subtenant_name}/instances/{instance_id}/vhost_ctrls/{vhost_ctrlr_name}:
    get:
      tags:
        - CLUSTERS
      description: Get Vhost controller for a tenant/subtenant dataset combination.
      operationId: vhost_controller_get
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/instance_id"
        - $ref: "#/components/parameters/vhost_ctrlr_name"
      responses:
        "200":
          description: Get Vhost controller successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/vhost_controller_resp"
              examples:
                success:
                  $ref: "#/components/examples/vhost_controller_example"
      security:
        - jwt: []
    delete:
      tags:
        - CLUSTERS
      description: Delete Vhost controller for a tenant/subtenant dataset combination.
      operationId: vhost_controller_delete
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/instance_id"
        - $ref: "#/components/parameters/vhost_ctrlr_name"
      responses:
        "200":
          description: Vhost controller deleted successfully
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/subtenants/{subtenant_name}/datasets/{dataset_name}/instances/{instance_id}/vhost_ctrls/{vhost_ctrlr_name}/volumes:
    get:
      tags:
        - CLUSTERS
      description: Get Vhost controller and volume mapping for a tenant/subtenant dataset combination.
      operationId: vhost_controller_volume_mapping_get
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/dataset_name"
        - $ref: "#/components/parameters/instance_id"
        - $ref: "#/components/parameters/vhost_ctrlr_name"
      responses:
        "200":
          description: Get the Vhost controller and volume mapping successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/vhost_controller_volumes_resp"
              examples:
                success:
                  $ref: "#/components/examples/vhost_controller_volumes_example"
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/subtenants/{subtenant_name}/datasets/{dataset_name}/instances/{instance_id}/vhost_ctrls/{vhost_ctrlr_name}/volumes/{volume_name}:
    post:
      tags:
        - CLUSTERS
      description: Attach volume to vhost controller for a tenant/subtenant dataset combination.
      operationId: attach_volume_to_vhost_controller
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/dataset_name"
        - $ref: "#/components/parameters/instance_id"
        - $ref: "#/components/parameters/vhost_ctrlr_name"
        - $ref: "#/components/parameters/volume_name"
      responses:
        "200":
          description: Attach volume to Vhost controller successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/vhost_controller_volume_attach_resp"
              examples:
                success:
                  $ref: "#/components/examples/vhost_controller_volume_attach_example"
      security:
        - jwt: []
    delete:
      tags:
        - CLUSTERS
      description: Detach volume from vhost controller for a tenant/subtenant dataset combination.
      operationId: detach_volume_from_vhost_controller
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/dataset_name"
        - $ref: "#/components/parameters/instance_id"
        - $ref: "#/components/parameters/vhost_ctrlr_name"
        - $ref: "#/components/parameters/volume_name"
      responses:
        "200":
          description: Detach volume from Vhost controller successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/vhost_controller_volume_detach_resp"
              examples:
                success:
                  $ref: "#/components/examples/vhost_controller_volume_detach_example"
      security:
        - jwt: []

  /stats:
    get:
      tags:
        - STATS
      description: Get RED stats
      operationId: controllers.monitoring_target.GetMetric
      parameters:
        - in: query
          name: target
          schema:
            type: string
          example: "perf"
          description: Name of target to get stats from. For all targets specify 'all'
        - in: query
          name: timestamp
          schema:
            type: number
          description: returns stats which are latest than given timestamp. Optional(if not specified returrns latest)
        - in: query
          name: filter
          schema:
            type: object
          description: Filter the measurement for specific tags. All measurements matching the filter list will be returned.
          example:
            filter: '{"subsystem":"rpc","tag_0":"network"}'
        - in: query
          name: function
          schema:
            type: object
          description: Stats function name to get data by host(s).
      responses:
        "200":
          description: Get RED stats success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/stats_resp"
              examples:
                success:
                  $ref: "#/components/examples/stats_example"
      security:
        - jwt: []

  /stats/config:
    get:
      tags:
        - STATS
      description: Get RED stats config
      operationId: controllers.monitoring_target.ConfigGet
      responses:
        "200":
          description: Get RED stats config success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/stats_config_resp"
              examples:
                success:
                  $ref: "#/components/examples/stats_config_example"
      security:
        - jwt: []
    put:
      tags:
        - STATS
      description: Update stats settings
      operationId: controllers.monitoring_target.ConfigSet
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/stats_config"
            example:
              target: "cpu"
              max: 600
              freq: 5
        required: true
      responses:
        "200":
          description: Stats config successfully updated
      security:
        - jwt: []

  /tests/network/agents/{cluster_name}:
    get:
      tags:
        - TESTS
      description: Get network test agent UUIDs
      operationId: controllers.network_test_agents.get
      parameters:
        - $ref: "#/components/parameters/cluster_name"
      responses:
        "200":
          description: Get the network test agent UUIDs for specified cluster
      security:
        - jwt: []

  /tests/network/{cluster_name}/{test_uuid}:
    get:
      tags:
        - TESTS
      description: Get network test status
      operationId: controllers.network_test.get
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/test_uuid"
      responses:
        "200":
          description: Get the network test status specified tests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/network_test_status_resp"
              examples:
                success:
                  $ref: "#/components/examples/network_test_status_example"
      security:
        - jwt: []

  /tests/network/{cluster_name}:
    post:
      tags:
        - TESTS
      description: Start network test
      operationId: controllers.network_test.start
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - in: query
          name: test_filter
          schema:
            type: string
          description: Tests to include in the run
        - in: query
          name: prd
          schema:
            type: integer
          description: PRD test group
        - in: query
          name: group
          schema:
            type: string
          description: Agent group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/nettest_config"
      responses:
        "201":
          description: Start network test for specified cluster
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/network_test_start_resp"
              examples:
                success:
                  $ref: "#/components/examples/network_test_start_example"
      security:
        - jwt: []
    get:
      tags:
        - TESTS
      description: Get network test agent groups
      operationId: controllers.network_test.get_agent_groups
      parameters:
        - $ref: "#/components/parameters/cluster_name"
      responses:
        "200":
          description: Get the network test agent groups
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/network_test_get_agent_groups_resp"
              examples:
                success:
                  $ref: "#/components/examples/network_test_get_agent_groups_example"
      security:
        - jwt: []

  /tests/verify_network:
    post:
      tags:
        - TESTS
      description: Verify network connectivity
      operationId: controllers.network_test.verify
      parameters:
        - in: query
          name: target
          schema:
            type: string
          description: Target
      responses:
        "201":
          description: Verify network connectivity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/verify_network_resp"
              examples:
                success:
                  $ref: "#/components/examples/verify_network_example"
      security:
        - jwt: []

  /tests/local_verify_network:
    post:
      tags:
        - TESTS
      description: Verify network connectivity
      operationId: controllers.network_test.local_verify
      responses:
        "201":
          description: Verify network connectivity from local host
      security:
        - jwt: []

  /tests/kvcl/{cluster_name}:
    get:
      tags:
        - TESTS
      description: Get redkvcl_test_rpc test status
      operationId: controllers.kvcl_test.status
      parameters:
        - $ref: "#/components/parameters/cluster_name"
      responses:
        "200":
          description: Get status of started redkvcl_test_rpc test for specified cluster
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/redkvcl_test_rpc_resp"
              examples:
                success:
                  $ref: "#/components/examples/redkvcl_test_rpc_example"
      security:
        - jwt: []
    post:
      tags:
        - TESTS
      description: Start redkvcl_test_rpc test
      operationId: controllers.kvcl_test.start
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - in: query
          name: sync
          schema:
            type: boolean
          description: Run synchronously (i.e. blocking)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/kvcl_test_request"
      responses:
        "201":
          description: Start redkvcl_test_rpc test for specified cluster
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/start_redkvcl_test_rpc_resp"
              examples:
                success:
                  $ref: "#/components/examples/start_redkvcl_test_rpc_example"
      security:
        - jwt: []

  /tests/iotest/{cluster_name}:
    get:
      tags:
        - TESTS
      description: Get IO test status
      operationId: controllers.io_test.status
      parameters:
        - $ref: "#/components/parameters/cluster_name"
      responses:
        "200":
          description: Get status of started IO test for specified cluster
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/io_test_status_resp"
              examples:
                success:
                  $ref: "#/components/examples/io_test_status_example"
      security:
        - jwt: []
    post:
      tags:
        - TESTS
      description: Start IO test
      operationId: controllers.io_test.start
      parameters:
        - $ref: "#/components/parameters/cluster_name"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/io_test_request"
      responses:
        "201":
          description: Start IO test for specified cluster
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/start_io_test_resp"
              examples:
                success:
                  $ref: "#/components/examples/start_io_test_example"
      security:
        - jwt: []

  /configs/produce:
    get:
      tags:
        - CONFIGS
      description: Get initial config
      operationId: configs.produce.init
      parameters:
        - in: query
          name: cluster-name
          schema:
            type: string
          description: Cluster name
        - in: query
          name: source-config-name
          schema:
            type: string
          description: Source config name
        - in: query
          name: target-config-name
          schema:
            type: string
          description: Target config name
        - in: query
          name: disable-override
          schema:
            type: boolean
          description: Disable hardware specific tuning overrides
        - in: query
          name: availability-rank
          schema:
            type: string
          description: Rank used for auto generated dataset profiles
      responses:
        "200":
          description: Get initial data config
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/configs_produce_resp"
              examples:
                success:
                  $ref: "#/components/examples/configs_produce_example"
      security:
        - jwt: []
    post:
      tags:
        - CONFIGS
      description: Create config
      operationId: configs.produce.create
      parameters:
        - in: query
          name: cluster-name
          schema:
            type: string
        - in: query
          name: config-name
          schema:
            type: string
        - in: query
          name: is-auto
          schema:
            type: boolean
        - in: query
          name: is-propose
          schema:
            type: boolean
        - in: query
          name: is-populate
          schema:
            type: boolean
        - in: query
          name: disable-override
          schema:
            type: boolean
          description: Disable hardware specific tuning overrides
        - in: query
          name: initinstances
          schema:
            type: boolean
          description: If true with is-propose true, initialize runtime config with instance data so cluster can be started.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Data config
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/configs_produce_create_resp"
              examples:
                success:
                  $ref: "#/components/examples/configs_produce_create_example"
      security:
        - jwt: []
    patch:
      tags:
        - CONFIGS
      description: Produce runtime
      operationId: configs.produce.produce_runtime
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                cluster_name:
                  type: string
                  pattern: ^.*
                  example: "red01"
      responses:
        "200":
          description: Data config
      security:
        - jwt: []

  /configs/cpuset:
    post:
      tags:
        - CONFIGS
      description: Update CPU set
      operationId: configs.cpuset.update
      parameters:
        - in: query
          name: id
          schema:
            type: string
          description: UUID, Instance ID to be updated
        - in: query
          name: config
          schema:
            type: string
          description: Name of the config to be updated
      responses:
        "200":
          description: Update CPU set information
      security:
        - jwt: []

  /validate/cluster/{cluster_name}/configs/{config_name}:
    post:
      tags:
        - CONFIGS
      description: Validate cluster config
      operationId: cluster.config.validate
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/config_name"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/config_validate_request"
      responses:
        "200":
          description: Validate cluster config
      security:
        - jwt: []

  /events:
    get:
      tags:
        - EVENTS
      description: Get all events
      operationId: controllers.events.all
      parameters:
        - $ref: "#/components/parameters/limit"
        - in: query
          name: message
          schema:
            type: string
          description: Partial text search within the message.
        - in: query
          name: keyword
          schema:
            type: string
          description: Keyword text search within the message.
        - in: query
          name: hostname
          schema:
            type: string
          description: Host name to fetch events data of.
        - in: query
          name: severity
          schema:
            type: string
          description: Severity of the events(EMERG, ALERT, CRITC, ERROR, WARNG, NOTIC, INFO, DEBUG).
        - in: query
          name: starttime
          schema:
            type: string
          description: Returns events from this time stamp(Layout:2006-01-02_15:04:05). Optional(if not specified default to one hour ago)
        - in: query
          name: endtime
          schema:
            type: string
          description: Returns events till this time stamp(Layout:2006-01-02_15:04:05). Optional(if not specified default to now)
      responses:
        "200":
          description: Get all events
      security:
        - jwt: []

  /events/cluster/{cluster_name}:
    get:
      tags:
        - EVENTS
      description: Get cluster events
      operationId: controllers.events.cluster
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/limit"
        - in: query
          name: message
          schema:
            type: string
          description: Partial text search within the message.
        - in: query
          name: keyword
          schema:
            type: string
          description: Keyword text search within the message.
        - in: query
          name: hostname
          schema:
            type: string
          description: Host name to fetch events data of.
        - in: query
          name: severity
          schema:
            type: string
          description: Severity of the events(EMERG, ALERT, CRITC, ERROR, WARNG, NOTIC, INFO, DEBUG).
        - in: query
          name: starttime
          schema:
            type: string
          description: Returns events from this time stamp(Layout:2006-01-02_15:04:05). Optional(if not specified default to one hour ago)
        - in: query
          name: endtime
          schema:
            type: string
          description: Returns events till this time stamp(Layout:2006-01-02_15:04:05). Optional(if not specified default to now)
      responses:
        "200":
          description: Get cluster events
      security:
        - jwt: []

  /events/system:
    get:
      tags:
        - EVENTS
      description: Get system events
      operationId: controllers.events.system
      parameters:
        - $ref: "#/components/parameters/limit"
        - in: query
          name: message
          schema:
            type: string
          description: Partial text search within the message.
        - in: query
          name: keyword
          schema:
            type: string
          description: Keyword text search within the message.
        - in: query
          name: hostname
          schema:
            type: string
          description: Host name to fetch events data of.
        - in: query
          name: severity
          schema:
            type: string
          description: Severity of the events(EMERG, ALERT, CRITC, ERROR, WARNG, NOTIC, INFO, DEBUG).
        - in: query
          name: starttime
          schema:
            type: string
          description: Returns events from this time stamp(Layout:2006-01-02_15:04:05). Optional(if not specified default to one hour ago)
        - in: query
          name: endtime
          schema:
            type: string
          description: Returns events till this time stamp(Layout:2006-01-02_15:04:05). Optional(if not specified default to now)
      responses:
        "200":
          description: Get system events
      security:
        - jwt: []

  /events/admin:
    get:
      tags:
        - EVENTS
      description: Get admin events
      operationId: controllers.events.admin
      parameters:
        - $ref: "#/components/parameters/limit"
        - in: query
          name: message
          schema:
            type: string
          description: Partial text search within the message.
        - in: query
          name: keyword
          schema:
            type: string
          description: Keyword text search within the message.
        - in: query
          name: hostname
          schema:
            type: string
          description: Host name to fetch events data of.
        - in: query
          name: severity
          schema:
            type: string
          description: Severity of the events(EMERG, ALERT, CRITC, ERROR, WARNG, NOTIC, INFO, DEBUG).
        - in: query
          name: starttime
          schema:
            type: string
          description: Returns events from this time stamp(Layout:2006-01-02_15:04:05). Optional(if not specified default to one hour ago)
        - in: query
          name: endtime
          schema:
            type: string
          description: Returns events till this time stamp(Layout:2006-01-02_15:04:05). Optional(if not specified default to now)
      responses:
        "200":
          description: Get admin events
      security:
        - jwt: []

  /events/hardware:
    get:
      tags:
        - EVENTS
      description: Get HMI events
      operationId: controllers.events.hmi
      parameters:
        - $ref: "#/components/parameters/limit"
        - in: query
          name: message
          schema:
            type: string
          description: Partial text search within the message.
        - in: query
          name: keyword
          schema:
            type: string
          description: Keyword text search within the message.
        - in: query
          name: hostname
          schema:
            type: string
          description: Host name to fetch events data of.
        - in: query
          name: severity
          schema:
            type: string
          description: Severity of the events(EMERG, ALERT, CRITC, ERROR, WARNG, NOTIC, INFO, DEBUG).
        - in: query
          name: starttime
          schema:
            type: string
          description: Returns events from this time stamp(Layout:2006-01-02_15:04:05). Optional(if not specified default to one hour ago)
        - in: query
          name: endtime
          schema:
            type: string
          description: Returns events till this time stamp(Layout:2006-01-02_15:04:05). Optional(if not specified default to now)
      responses:
        "200":
          description: Get HMI events
      security:
        - jwt: []

  /events/dataservice:
    get:
      tags:
        - EVENTS
      description: Get data service events
      operationId: controllers.events.service
      parameters:
        - $ref: "#/components/parameters/limit"
        - in: query
          name: message
          schema:
            type: string
          description: Partial text search within the message.
        - in: query
          name: keyword
          schema:
            type: string
          description: Keyword text search within the message.
        - in: query
          name: hostname
          schema:
            type: string
          description: Host name to fetch events data of.
        - in: query
          name: servicename
          schema:
            type: string
          description: Data service name to fetch events.
        - in: query
          name: severity
          schema:
            type: string
          description: Severity of the events(EMERG, ALERT, CRITC, ERROR, WARNG, NOTIC, INFO, DEBUG).
        - in: query
          name: starttime
          schema:
            type: string
          description: Returns events from this time stamp(Layout:2006-01-02_15:04:05). Optional(if not specified default to one hour ago)
        - in: query
          name: endtime
          schema:
            type: string
          description: Returns events till this time stamp(Layout:2006-01-02_15:04:05). Optional(if not specified default to now)
      responses:
        "200":
          description: Get HMI events
      security:
        - jwt: []

  /events2:
    get:
      tags:
        - EVENTS
      description: Get RED system events
      operationId: controllers.monitoring_target.GetEvents
      parameters:
        - in: query
          name: target
          schema:
            type: string
          description: Name of target to get events from. For all targets specify 'all'
        - in: query
          name: timestamp
          schema:
            type: number
          description: Returns events which are latest than given timestamp. Optional(if not specified returrns latest)
        - in: query
          name: filter
          schema:
            type: object
          description: Filter the events for specific tags. All events matching the filter list will be returned.
          example:
            filter: '{"source":"0f7c16a3-1af5-4ea3-9795-d0eaeeabc6dc"}'
      responses:
        "200":
          description: Get RED events success
      security:
        - jwt: []

  /s3/access:
    get:
      tags:
        - S3
      description: Get list of s3 access record(s)
      operationId: controllers.s3.access_list
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/user_id"
        - $ref: "#/components/parameters/s3_key_optional"
        - $ref: "#/components/parameters/all"
      responses:
        "200":
          description: Get access record(s)
      security:
        - jwt: []
    post:
      tags:
        - S3
      description: Add s3 access record
      operationId: controllers.s3.access_add
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/user_id"
        - $ref: "#/components/parameters/key_valid"
        - $ref: "#/components/parameters/group"
        - $ref: "#/components/parameters/caps"
      responses:
        "200":
          description: Access record successfully added
      security:
        - jwt: []
    put:
      tags:
        - S3
      description: Update s3 access record
      operationId: controllers.s3.access_update
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/user_id"
        - $ref: "#/components/parameters/s3_key"
        - $ref: "#/components/parameters/key_valid"
        - $ref: "#/components/parameters/group"
        - $ref: "#/components/parameters/caps"
      responses:
        "200":
          description: Access record successfully updated
      security:
        - jwt: []
    delete:
      tags:
        - S3
      description: Delete access record
      operationId: controllers.s3.access_remove
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/user_id"
        - $ref: "#/components/parameters/s3_key"
      responses:
        "200":
          description: Access record successfully deleted
      security:
        - jwt: []

  /s3/rsa:
    get:
      tags:
        - S3
      description: Get list of s3 rsa records
      operationId: controllers.s3.rsa_list
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/user_id"
      responses:
        "200":
          description: Get RSA keys list
      security:
        - jwt: []
    post:
      tags:
        - S3
      description: Add s3 rsa key
      operationId: controllers.s3.rsa_add
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/user_id"
        - $ref: "#/components/parameters/key_valid"
        - $ref: "#/components/parameters/rsa_md5"
        - $ref: "#/components/parameters/rsa_size"
      requestBody:
        content:
          application/json:
            schema:
              type: string
              description: "RSA public key"
        required: true
      responses:
        "200":
          description: RSA key successfully added
      security:
        - jwt: []
    delete:
      tags:
        - S3
      description: Delete RSA key
      operationId: controllers.s3.rsa_remove
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/user_id"
        - $ref: "#/components/parameters/rsa_md5"
      responses:
        "200":
          description: RSA key successfully deleted
      security:
        - jwt: []

  /s3/accesskeyhost:
    get:
      tags:
        - S3
      description: Get access record by key and vhost
      operationId: controllers.s3.access_key_host
      parameters:
        - $ref: "#/components/parameters/s3_key"
        - $ref: "#/components/parameters/s3_vhost"
      responses:
        "200":
          description: Returns access record
      security:
        - jwt: []

  /s3/rsaemailhost:
    get:
      tags:
        - S3
      description: Get RSA keys and access record by email and vhost
      operationId: controllers.s3.rsa_email_host
      parameters:
        - $ref: "#/components/parameters/email"
        - $ref: "#/components/parameters/s3_vhost"
      responses:
        "200":
          description: Returns RSA key and access record
      security:
        - jwt: []

  /s3/config:
    get:
      tags:
        - S3
      description: Get s3 configuration
      operationId: controllers.s3.config_get
      parameters:
        - $ref: "#/components/parameters/nodetails"
      responses:
        "200":
          description: Get s3 configuration
      security:
        - jwt: []
    post:
      tags:
        - S3
      description: Create s3 configuration
      operationId: controllers.s3.config_create
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/s3_subnet"
        - $ref: "#/components/parameters/s3_port"
        - $ref: "#/components/parameters/s3_non_tls_port"
      responses:
        "200":
          description: S3 configuration successfully created
      security:
        - jwt: []
    put:
      tags:
        - S3
      description: Update s3 configuration
      operationId: controllers.s3.config_update
      parameters:
        - $ref: "#/components/parameters/s3_subnet"
        - $ref: "#/components/parameters/s3_port"
        - $ref: "#/components/parameters/s3_non_tls_port"
        - in: query
          name: reset_subnet
          schema:
            type: boolean
          description: Reset subnet value.
      responses:
        "200":
          description: S3 configuration successfully updated
      security:
        - jwt: []
    delete:
      tags:
        - S3
      description: Delete s3 configuration
      operationId: controllers.s3.config_remove
      responses:
        "200":
          description: S3 configuration successfully deleted
      security:
        - jwt: []

  /s3/bucket:
    get:
      tags:
        - S3
      description: Get list of s3 bucket(s)
      operationId: controllers.s3.bucket_list
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/bucket_optional"
        - $ref: "#/components/parameters/user_id_optional"
        - $ref: "#/components/parameters/from"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/keyword"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          description: Get S3 bucket(s)
      security:
        - jwt: []
    post:
      tags:
        - S3
      description: Create s3 bucket
      operationId: controllers.s3.bucket_add
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/bucket"
        - $ref: "#/components/parameters/bulk_quota"
        - $ref: "#/components/parameters/user_id_optional"
        - $ref: "#/components/parameters/profile"
      responses:
        "200":
          description: S3 bucket successfully created
      security:
        - jwt: []
    put:
      tags:
        - S3
      description: Update s3 bucket
      operationId: controllers.s3.bucket_update
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/bucket"
        - $ref: "#/components/parameters/bulk_quota"
        - $ref: "#/components/parameters/user_id_optional"
      responses:
        "200":
          description: S3 bucket successfully updated
      security:
        - jwt: []
    delete:
      tags:
        - S3
      description: Delete s3 bucket
      operationId: controllers.s3.bucket_delete
      parameters:
        - $ref: "#/components/parameters/level"
        - $ref: "#/components/parameters/bucket"
        - $ref: "#/components/parameters/user_id_optional"
      responses:
        "200":
          description: S3 bucket successfully deleted
      security:
        - jwt: []

  /realm:
    get:
      tags:
        - REALM
      description: Get the current realm configuration
      operationId: controllers.realm.config
      responses:
        "200":
          description: Get the realm configuration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/realm_resp"
      security:
        - jwt: []
    post:
      tags:
        - REALM
      description: Update realm configuration by DM
      operationId: controllers.realm.update_new
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/realm_update_new_req"
        required: true
      responses:
        "200":
          description: Configuration updated successfully
        "201":
          description: Configuration updated successfully
      security:
        - jwt: []
    put:
      tags:
        - REALM
      description: Update realm configuration
      operationId: controllers.realm.update
      parameters:
        - in: query
          name: is-allocate-resources
          schema:
            type: boolean
          description: Generating a config 'realm config_generate' before update.
        - in: query
          name: force-services
          schema:
            type: string
          description: Update the selected services even if realm config not changed.
        - in: query
          name: components
          schema:
            type: string
          description: Update only the selected services.
        - in: query
          name: is-async
          schema:
            type: boolean
          description: Return TaskUUID.
        - in: query
          name: regenerate
          schema:
            type: boolean
          description: Regenerate server certificates.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/realm_update_new_req"
        required: true
      responses:
        "200":
          description: Configuration updated successfully
        "201":
          description: Configuration updated successfully
      security:
        - jwt: []

  /realm/upgrade:
    post:
      tags:
        - REALM
      description: Starts realm upgrade process
      operationId: realm_upgrade_apply
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/realm_upgrade_apply_req"
        required: true
      responses:
        "200":
          description: Realm upgrade process started
          content:
            application/json:
              schema:
                type: string
                description: "Upgrade apply task UUID"
      security:
        - jwt: []
    delete:
      tags:
        - REALM
      description: Delete realm upgrade process (not implemented yet)
      operationId: realm_upgrade_abort
      responses:
        "200":
          description: Realm upgrade process deleted
      security:
        - jwt: []

  /realm/upgrade/download:
    post:
      tags:
        - REALM
      description: Starts realm upgrade downloading process
      operationId: realm_upgrade_download
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/realm_upgrade_download_req"
        required: true
      responses:
        "200":
          description: Realm upgrade downloading process started
          content:
            application/json:
              schema:
                type: string
                description: "Upgrade download task UUID"
      security:
        - jwt: []

  /realm/upgrade/enable:
    post:
      tags:
        - REALM
      description: Enable the version on a cluster
      operationId: realm_upgrade_enable
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/realm_upgrade_enable_req"
        required: true
      responses:
        "200":
          description: Realm upgrade version to enable
      security:
        - jwt: []

  /realm/upgrade/status:
    get:
      tags:
        - REALM
      summary: Get detailed status of upgrade
      operationId: realm_upgrade_status
      responses:
        "200":
          description: Get the detailed status of upgrade
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/realm_status_resp"
      security:
        - jwt: []

  /realm/upgrade/channels:
    get:
      tags:
        - REALM
      description: Get a list of release channels
      operationId: realm_upgrade_channels
      responses:
        "200":
          description: Get a list of release channels
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/realm_upgrade_channels"
      security:
        - jwt: []

  /realm/upgrade/releases:
    get:
      tags:
        - REALM
      description: Get a list of releases to upgrade realm to
      operationId: realm_upgrade_releases
      parameters:
        - in: query
          name: channel
          schema:
            type: string
            enum:
              - "stable"
              - "unstable"
          description: Release channel
        - in: query
          name: all
          schema:
            type: boolean
          description: Get all version info.
      responses:
        "200":
          description: Get a list of releases to upgrade realm to
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/realm_upgrade_releases"
      security:
        - jwt: []
    post:
      tags:
        - REALM
      description: Update releases metadata to upgrade realm to
      operationId: realm_upgrade_metadata_update
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/realm_upgrade_metadata_update_req"
        required: false
      responses:
        "200":
          description: Release metadata successfully updated
      security:
        - jwt: []

  /realm/upgrade/patch_release:
    put:
      tags:
        - REALM
      summary: Patch the current release
      operationId: realm_patch_release
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/realm_patch_release_req"
        required: true
      responses:
        "200":
          description: Patched the current release
          content:
            application/json:
              schema:
                type: string
                description: "The patched release version"
      security:
        - jwt: []

  /realm/start:
    put:
      tags:
        - REALM
      description: Start realm service(s)
      operationId: controllers.realm.start
      parameters:
        - $ref: "#/components/parameters/service"
        - $ref: "#/components/parameters/node"
      responses:
        "200":
          description: RED services are started
      security:
        - jwt: []

  /realm/stop:
    put:
      tags:
        - REALM
      description: Stop realm service(s)
      operationId: controllers.realm.stop
      parameters:
        - $ref: "#/components/parameters/service"
        - $ref: "#/components/parameters/node"
      responses:
        "200":
          description: RED services are stopped
      security:
        - jwt: []

  /realm/restart:
    put:
      tags:
        - REALM
      description: Restart realm service(s)
      operationId: controllers.realm.restart
      parameters:
        - $ref: "#/components/parameters/service"
        - $ref: "#/components/parameters/node"
      responses:
        "200":
          description: Services are restarted
      security:
        - jwt: []

  /realm/status:
    get:
      tags:
        - REALM
      description: Get detailed status of deployed services
      operationId: controllers.realm.status
      responses:
        "200":
          description: Get the detailed status of deployed services
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/realm_status_resp"
      security:
        - jwt: []

  /realm/node_status:
    get:
      tags:
        - REALM
      description: Get realm nodes status
      operationId: controllers.realm.node_status
      parameters:
        - in: query
          name: withetcdmembers
          schema:
            type: boolean
          description: Node status with etcd members.
      responses:
        "200":
          description: Get the realm nodes status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/realm_node_status_resp"
      security:
        - jwt: []

  /realm/agents/{agent_subtype}/status:
    get:
      tags:
        - REALM
      description: Get detailed status of agents
      operationId: controllers.realm.agent_status
      parameters:
        - $ref: "#/components/parameters/agent_subtype"
      responses:
        "200":
          description: Get the detailed status of agents
      security:
        - jwt: []

  /realm/agents/{agent_subtype}/restart:
    put:
      tags:
        - REALM
      description: Restart agent
      operationId: controllers.realm.agent_restart
      parameters:
        - $ref: "#/components/parameters/agent_subtype"
        - in: query
          name: hostnames
          schema:
            type: string
          description: Comma separated list of host names.
      responses:
        "200":
          description: Agent are restarted
      security:
        - jwt: []

  /realm/stats:
    get:
      tags:
        - REALM
      description: RED get realm stats
      operationId: controllers.monitoring_target.GetiRealmStats
      parameters:
        - in: query
          name: node
          schema:
            type: array
            items:
              type: string
          description: Name of nodes to get stats from. Optional(if not specified returns stats from all nodes)
        - in: query
          name: target
          schema:
            type: string
          description: Name of target to get stats from. For all targets specify 'all'
        - in: query
          name: timestamp
          schema:
            type: number
          description: Returns stats which are latest than given timestamp. Optional(if not specified returns latest)
        - in: query
          name: filter
          schema:
            type: object
          description: Filter the measurement for specific tags. All measurements matching the filter list will be returned
          example:
            filter: '{"subsystem":"rpc","tag_0":"network","tag_1":"aggregate"}'
        - in: query
          name: function
          schema:
            type: object
          description: Stats function name to get data by host(s)
          example:
            filter: utilization
      responses:
        "200":
          description: RED get realm stats returned successfully
      security:
        - jwt: []

  /realm/events2:
    get:
      tags:
        - REALM
      description: Get RED realm events
      operationId: controllers.monitoring_target.GetRealmEvents
      parameters:
        - in: query
          name: node
          schema:
            type: array
            items:
              type: string
          description: Name of nodes to get events from.  Optional(if not specified returns stats from all nodes)
        - in: query
          name: target
          schema:
            type: string
          description: Name of target to get events from. For all targets specify 'all'
        - in: query
          name: timestamp
          schema:
            type: number
          description: Returns events which are latest than given timestamp. Optional(if not specified returns latest)
        - in: query
          name: filter
          schema:
            type: object
          description: Filter the events for specific tags. All events matching the filter list will be returned
          example:
            filter: '{"source":"0f7c16a3-1af5-4ea3-9795-d0eaeeabc6dc"}'
      responses:
        "200":
          description: Get RED realm stats returned successfully
      security:
        - jwt: []

  /realm/etcd_stats:
    get:
      tags:
        - REDAPI
      description: Get internal etcd db information
      operationId: controllers.realm.etcd_info
      responses:
        "200":
          description: Get RED realm etcd databaser stats returned successfully
      security:
        - jwt: []


  /realm/etcd_snapshot:
    post:
      tags:
        - REDAPI
      description: Creates ETCD snapshots on realm etcd nodes
      operationId: controllers.realm.etcd_snapshot
      responses:
        "200":
          description: ETCD snapshots are created
      security:
        - jwt: []

    put:
      tags:
        - REDAPI
      description: Restore ETCD from snapshot on realm etcd nodes
      operationId: controllers.realm.etcd_restore
      parameters:
        - in: header
          name: snapshot
          schema:
            type: string
          description: Snapshot name to use for restore
        - in: header
          name: bump-revision
          schema:
            type: integer
          description: revision ID to bump to
        - in: header
          name: need-compaction
          schema:
            type: boolean
          description: need db compaction after dnapshot restore
      responses:
        "200":
          description: ETCD realm instances are restored
      security:
        - jwt: []
    get:
      tags:
        - REDAPI
      description: List ETCD snapshots from realm etcd nodes
      operationId: controllers.realm.etcd_snapshot_list
      parameters:
        - in: header
          name: snapshot-name-filter
          schema:
            type: string
          description: Snapshot name filter to get snapshot info
          required: false
      responses:
        "200":
          description: ETCD snapshot list from etcd instances
      security:
        - jwt: []


  /realm/etcd_compaction:
    put:
      tags:
        - REDAPI
      description: Performs internal ETCD defragmentation and compaction
      operationId: controllers.realm.etcd_compaction
      parameters:
        - in: query
          name: stats-only
          schema:
            type: boolean
          description: returns actual endpoint' db information
        - in: query
          name: physical-compaction
          schema:
            type: boolean
          description: physically remove all old revisions
      responses:
        "200":
          description: ETCD compaction succeeded

  /realm/proxy:
    get:
      tags:
        - REALM
      summary: Get realm proxy settings
      operationId: controllers.realm.get_proxy_settings
      responses:
        "200":
          description: Get realm proxy settings
      security:
        - jwt: []
    put:
      tags:
        - REALM
      summary: Update realm proxy settings
      operationId: controllers.realm.update_proxy_settings
      parameters:
        - in: query
          name: is-async
          schema:
            type: boolean
          description: Return TaskUUID.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/realm_update_new_req"
        required: true
      responses:
        "200":
          description: Realm proxy settings updated
      security:
        - jwt: []

  /realm/config_generate:
    get:
      tags:
        - REALM
      description: Get generate realm configuration
      operationId: controllers.realm.config_generate
      parameters:
        - in: header
          name: agent-addrs
          schema:
            type: string
          description: Comma separate list of redclient server addresses. Optional
        - in: header
          name: client-addrs
          schema:
            type: string
          description: Comma separate list of redagent server addresses. Optional
        - in: header
          name: etcd-addrs
          schema:
            type: string
          description: Comma separate list of etcd server addresses. Optional
        - in: header
          name: alert-mgr-addrs
          schema:
            type: string
          description: Comma separate list of alert manager addresses. Optional
        - in: header
          name: stream-addrs
          schema:
            type: string
          description: Comma separate list of stream addresses. Optional
        - in: header
          name: hugemem
          schema:
            type: string
          description: Memory, in MB, to allocate in hugepages for RED daemon. Optional
        - in: header
          name: mem-limit
          schema:
            type: string
          description: Memory limit, in MB, for every service container. Optional
        - in: header
          name: cpus
          schema:
            type: string
          description: Maximum CPU resources (e.g. 0.25), for every service container. Optional
        - in: header
          name: red-addrs
          schema:
            type: string
          description: Comma separated list of RED server addresses to select. Optional
        - in: header
          name: realm-name
          schema:
            type: string
          description: Realm name. Optional
        - in: header
          name: reds3-disable
          schema:
            type: boolean
          description: Disable reds3.
        - in: header
          name: metrics-enable
          schema:
            type: boolean
          description: Enable tsdb.
        - in: header
          name: listen-port
          schema:
            type: integer
            default: 8111
          description: reds3 listen port. Default is 8111.
        - $ref: "#/components/parameters/s3_non_tls_port"
        - in: header
          name: addcertdns
          schema:
            type: string
          description: Comma separate list of additional server certificate domains. Optional
        - in: header
          name: addcertips
          schema:
            type: string
          description: Comma separate list of additional server certificate ips. Optional
        - in: header
          name: call-home-max-uploads-per-hour
          schema:
            type: integer
          description: Max uploads per hour. Default uploads per hour is 2
        - in: header
          name: call-home-backend
          schema:
            type: string
          description: Call home backend (ddn_development, ddn_production)
        - in: header
          name: name-server-disable
          schema:
            type: string
            enum:
              - "true"
              - "false"
          description: Disable name server. Optional
        - in: header
          name: call-home-disable
          schema:
            # openapi-cli-generator doesn't provide working with null values
            # this is a hack.
            type: string
            enum:
              - "true"
              - "false"
          description: Disable calling logs back to home. Optional
      responses:
        "200":
          description: Gets the generated configuration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/realm_resp"
      security:
        - jwt: []

  /realm/s3domain:
    put:
      tags:
        - REDAPI
      description: Add domains/ips to reds3 certificate
      operationId: controllers.realm.s3domain_add
      parameters:
        - in: header
          name: s3domains
          schema:
            type: string
          description: Comma separate list of new reds3 certificate domains/ips.
      responses:
        "200":
          description: domains/ips added to reds3 certificate
      security:
        - jwt: []
    delete:
      tags:
        - REDAPI
      description: Delete domains/ips from reds3 certificate
      operationId: controllers.realm.s3domain_delete
      parameters:
        - in: header
          name: s3domains
          schema:
            type: string
          description: Comma separate list of existing reds3 certificate domains/ips.
      responses:
        "200":
          description: domains/ips deleted from reds3 certificate
      security:
        - jwt: []

  /realm/exec/{server_id}:
    post:
      tags:
        - REDAPI
      description: Execute a command
      operationId: controllers.realm.exec
      parameters:
        - $ref: "#/components/parameters/server_id"
        - in: query
          name: target-agent
          schema:
            type: string
          description: "Target agent hostname/uuid"
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: Command executed
      security:
        - jwt: []

  /realm/feature:
    get:
      tags:
        - REDAPI
      description: Get currently configured feature flags
      operationId: controllers.realm.feature_get
      parameters:
        - in: query
          name: name
          schema:
            type: string
            pattern: ^[a-zA-Z0-9_]+$
          description: "Only show the feature flag with the given name. Optional."
          required: false
      responses:
        "200":
          description: Command executed
      security:
        - jwt: []
    put:
      tags:
        - REDAPI
      description: Configure feature flags
      operationId: controllers.realm.feature_update
      parameters:
        - in: query
          name: name
          schema:
            type: string
            pattern: ^[a-zA-Z0-9_]+$
          description: "Name of the feature flag."
          required: true
        - in: query
          name: enable
          schema:
            type: boolean
          description: "Enable or disable the specified feature flag."
          required: true
      responses:
        "200":
          description: Command executed
      security:
        - jwt: []

  /dmgr/status:
    get:
      tags:
        - DMGR
      description: Get detailed status of deployment manager
      operationId: dmgr-status
      responses:
        "200":
          description: Gets the detailed status of deployment manager
      security:
        - jwt: []

  /dmgr/describe:
    get:
      tags:
        - DMGR
      description: Get detailed internal configuration of deployment manager
      operationId: dmgr-describe
      responses:
        "200":
          description: Gets the detailed deployment manager' internal configuration
      security:
        - jwt: []

  /dmgr/dns:
    get:
      tags:
        - DMGR
      description: gets service endpoints health information
      operationId: dmgr-dns
      responses:
        "200":
          description: gets service endpoints health information
      security:
        - jwt: []

  /dmgr/abort:
    put:
      tags:
        - DMGR
      description: Cancel current active controller's error and mark it as failed
      operationId: dmgr-abort
      parameters:
        - in: query
          name: controller
          schema:
            type: string
          description: Controller name to abort if provided
      responses:
        "200":
          description: Abort active or specified controller execution and reset controller state
      security:
        - jwt: []

  /dmgr/continue:
    put:
      tags:
        - DMGR
      description: Resets active controller's error to continue task execution
      operationId: dmgr-continue
      responses:
        "200":
          description: Resets active controller's error to continue task execution
      security:
        - jwt: []

  /dmgr/rollback:
    put:
      tags:
        - DMGR
      description: Rollback current active controller state to previous one
      operationId: dmgr-rollback
      responses:
        "200":
          description: Rollback current active controller state to previous one
      security:
        - jwt: []

  /dmgr/enable:
    put:
      tags:
        - DMGR
      description: Enables deployment manager to reconcile realm configuration
      operationId: dmgr_enable
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/dmgr_state_req"
      responses:
        "200":
          description: Enables deployment manager
      security:
        - jwt: []

  /dmgr/disable:
    put:
      tags:
        - DMGR
      description: Disables deployment manager to reconcile realm configuration
      operationId: dmgr_disable
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/dmgr_state_req"
      responses:
        "200":
          description: Disables deployment manager
      security:
        - jwt: []

  /dmgr/controller/enable:
    put:
      tags:
        - DMGR
      description: Enables deployment manager controller(s)
      operationId: dmgr-controller-enable
      responses:
        "200":
          description: Enables deployment manager controller
      security:
        - jwt: []

  /dmgr/controller/disable:
    put:
      tags:
        - DMGR
      description: Disables deployment manager controller(s)
      operationId: dmgr-controller-disable
      responses:
        "200":
          description: Disables deployment manager controller(s)
      security:
        - jwt: []

  /tasks/{task_uuid}:
    get:
      tags:
        - TASKMGR
      description: Get detailed information of the specified task
      operationId: task-show
      parameters:
        - $ref: "#/components/parameters/task_uuid"
      responses:
        "200":
          description: Gets detailed task information
      security:
        - jwt: []
    delete:
      tags:
        - TASKMGR
      description: Delete the specified task
      operationId: task-delete
      parameters:
        - $ref: "#/components/parameters/task_uuid"
      responses:
        "200":
          description: Deletes the specified task
      security:
        - jwt: []

  /tasks/{task_uuid}/abort:
    put:
      tags:
        - TASKMGR
      description: Abort the running task
      operationId: task-abort
      parameters:
        - $ref: "#/components/parameters/task_uuid"
      responses:
        "200":
          description: Aborts running task
      security:
        - jwt: []

  /tasks/list:
    get:
      tags:
        - TASKMGR
      description: Get list of tasks
      operationId: task-list
      parameters:
        - $ref: "#/components/parameters/from"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/type_filter_field"
        - $ref: "#/components/parameters/after_timestamp_filter_field"
        - $ref: "#/components/parameters/before_timestamp_filter_field"
        - $ref: "#/components/parameters/status_filter_field"
      responses:
        "200":
          description: Gets list of long term task
      security:
        - jwt: []

  #HMI Resource
  /hmi:
    get:
      tags:
        - REDHMI
      description: Get information about hmi
      operationId: hmi_information
      responses:
        "200":
          description: Get HMI Information
      security:
        - jwt: []

  /hmi/nics:
    get:
      tags:
        - REDHMI
      description: Get list of nics
      operationId: hmi_controllers_list_nics
      parameters:
        - in: query
          name: devicename
          schema:
            type: string
          description: Device name
        - in: query
          name: hosts
          schema:
            type: string
          description: Comma delimited hostnames or UUIDs (empty for all)
        - in: query
          name: cluster
          schema:
            type: string
          description: Cluster name
        - in: query
          name: config
          schema:
            type: string
          description: Config name
        - in: query
          name: stats
          schema:
            type: boolean
          description: Include stats
      responses:
        "200":
          description: Get list of drives
      security:
        - jwt: []

  /hmi/drives:
    get:
      tags:
        - REDHMI
      description: Get list of drives
      operationId: hmi_controllers_list_drives
      parameters:
        - in: query
          name: type
          schema:
            type: string
          description: Type of drive (NVME or SAS or SATA)
        - in: query
          name: host
          schema:
            type: string
          description: Hostname or UUID
      responses:
        "200":
          description: Get list of drives
      security:
        - jwt: []

  #Server Node Resource
  /hmi/servers:
    get:
      tags:
        - REDHMI
      description: Get list of servers
      operationId: hmi_get_servers
      parameters:
        - $ref: "#/components/parameters/from"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/keyword"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          description: Get list of servers
      security:
        - jwt: []

  /servers/{node}:
    delete:
      tags:
        - CLUSTERS
      description: Delete Node from inventory and realm
      operationId: controllers.servers.delete
      parameters:
        - $ref: "#/components/parameters/single_node_pathparam"
      responses:
        "200":
          description: Delete Server
      security:
        - jwt: []

  /hmi/server:
    get:
      tags:
        - REDHMI
      description: Get information about default server
      operationId: hmi_get_server
      responses:
        "200":
          description: Get server information
      security:
        - jwt: []

  /hmi/servers/{server_id}:
    get:
      tags:
        - REDHMI
      description: Get information about server
      operationId: hmi_get_server_id
      parameters:
        - $ref: "#/components/parameters/server_id"
      responses:
        "200":
          description: Get server information
      security:
        - jwt: []

  #Server Node Resource Power
  /hmi/servers/{server_id}/power/on:
    post:
      tags:
        - REDHMI
      description: Power on the server
      operationId: hmi_power_on_server
      parameters:
        - $ref: "#/components/parameters/server_id"
        - in: query
          name: target-server
          schema:
            type: string
          description: "Target server hostname/uuid"
      responses:
        "200":
          description: Server powered on
      security:
        - jwt: []

  /hmi/servers/{server_id}/power/off:
    post:
      tags:
        - REDHMI
      description: Power off the server
      operationId: hmi_power_off_server
      parameters:
        - $ref: "#/components/parameters/server_id"
        - in: query
          name: target-server
          schema:
            type: string
          description: "Target server hostname/uuid"
      responses:
        "200":
          description: Server powered off
      security:
        - jwt: []

  /hmi/servers/{server_id}/power/reset:
    post:
      tags:
        - REDHMI
      description: Reset the server
      operationId: hmi_power_reset_server
      parameters:
        - $ref: "#/components/parameters/server_id"
        - in: query
          name: type
          schema:
            type: string
          description: Reset type, 'cold' or 'warm'
        - in: query
          name: target-server
          schema:
            type: string
          description: "Target server hostname/uuid"
      responses:
        "200":
          description: Server power reset
      security:
        - jwt: []

  /hmi/servers/{server_id}/power/status:
    post:
      tags:
        - REDHMI
      description: Power status of the server
      operationId: hmi_power_status_server
      parameters:
        - $ref: "#/components/parameters/server_id"
        - in: query
          name: target-server
          schema:
            type: string
          description: "Target server hostname/uuid"
      responses:
        "200":
          description: Server powere status
      security:
        - jwt: []

  #Server Node Resource Indicator
  /hmi/servers/{server_id}/indicator/on:
    post:
      tags:
        - REDHMI
      description: Turn on the server indicator
      operationId: hmi_turnon_server_indicator
      parameters:
        - $ref: "#/components/parameters/server_id"
        - in: query
          name: target-server
          schema:
            type: string
          description: "Target server hostname/uuid"
      responses:
        "200":
          description: Server indicator turned on
      security:
        - jwt: []

  /hmi/servers/{server_id}/indicator/off:
    post:
      tags:
        - REDHMI
      description: Turn off the server indicator
      operationId: hmi_turnoff_server_indicator
      parameters:
        - $ref: "#/components/parameters/server_id"
        - in: query
          name: target-server
          schema:
            type: string
          description: "Target server hostname/uuid"
      responses:
        "200":
          description: Server indicator tunred off
      security:
        - jwt: []

  /hmi/servers/{server_id}/indicator/blink:
    post:
      tags:
        - REDHMI
      description: Blink server indicator
      operationId: hmi_blink_server_indicator
      parameters:
        - $ref: "#/components/parameters/server_id"
        - in: query
          name: target-server
          schema:
            type: string
          description: "Target server hostname/uuid"
      responses:
        "200":
          description: Blink server indicator
      security:
        - jwt: []

  /hmi/servers/{server_id}/bmclog:
    post:
      tags:
        - REDHMI
      description: Gather the server node BMC log
      operationId: hmi_server_bmclog
      parameters:
        - $ref: "#/components/parameters/server_id"
      responses:
        "200":
          description: Gathered server BMC log
      security:
        - jwt: []

  /hmi/servers/{server_id}/bmcevents:
    get:
      tags:
        - REDHMI
      description: Obtain the server node BMC events text
      operationId: hmi_server_bmcevents
      parameters:
        - $ref: "#/components/parameters/server_id"
      responses:
        "200":
          description: Obtained server BMC events
      security:
        - jwt: []

  /hmi/servers/{server_id}/bmcinfo:
    get:
      tags:
        - REDHMI
      description: Get the server bmc info
      operationId: hmi_get_server_bmcinfo
      parameters:
        - $ref: "#/components/parameters/server_id"
      responses:
        "200":
          description: Get the server bmc info
      security:
        - jwt: []
    post:
      tags:
        - REDHMI
      description: Update server bmc info
      operationId: hmi_update_server_bmcinfo
      parameters:
        - $ref: "#/components/parameters/server_id"
        - in: query
          name: ipaddress
          schema:
            type: string
          description: IP address to change
        - in: query
          name: networkmask
          schema:
            type: string
          description: Netmask to change
        - in: query
          name: gateway
          schema:
            type: string
          description: Gateway to change
      responses:
        "200":
          description: Updated server bmc info
      security:
        - jwt: []

  /hmi/servers/{server_id}/nics:
    get:
      tags:
        - REDHMI
      description: Get the list of nics
      operationId: hmi_get_nics
      parameters:
        - $ref: "#/components/parameters/server_id"
      responses:
        "200":
          description: Get the list of nics
      security:
        - jwt: []

  /hmi/servers/{server_id}/nics/{nic_id}:
    get:
      tags:
        - REDHMI
      description: Get the nic details
      operationId: hmi_get_nic_details
      parameters:
        - $ref: "#/components/parameters/server_id"
        - $ref: "#/components/parameters/nic_id"
      responses:
        "200":
          description: Get the nic details
      security:
        - jwt: []

  /hmi/servers/{server_id}/nics/{nic_id}/fwupdate:
    post:
      tags:
        - REDHMI
      description: network adapter firmware update
      operationId: hmi_nic_fw_update
      parameters:
        - $ref: "#/components/parameters/server_id"
        - $ref: "#/components/parameters/nic_id"
        - in: query
          name: path
          schema:
            type: string
          description: Filepath to the firmware binary
        - in: query
          name: status
          schema:
            type: boolean
          description: Check status of the FW Update
      responses:
        "200":
          description: NIC fw updated successfully
      security:
        - jwt: []

  ### comment out unimplemeted network adapter apis (RED-15518) ###
  #
  #  /hmi/servers/{server_id}/nics/{nic_id}/power/on:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Power on network adapter
  #      operationId: hmi_power_on_nic
  #      parameters:
  #        - $ref: "#/components/parameters/server_id"
  #        - $ref: "#/components/parameters/nic_id"
  #      responses:
  #        "200":
  #          description: Power on network adapter
  #      security:
  #        - jwt: []
  #
  #  /hmi/servers/{server_id}/nics/{nic_id}/power/off:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Power off network adapter
  #      operationId: hmi_power_off_nic
  #      parameters:
  #        - $ref: "#/components/parameters/server_id"
  #        - $ref: "#/components/parameters/nic_id"
  #      responses:
  #        "200":
  #          description: Power off network adapter
  #      security:
  #        - jwt: []
  #
  #  /hmi/servers/{server_id}/nics/{nic_id}/led/on:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Power on network adapter indicator led
  #      operationId: hmi_nic_led_on
  #      parameters:
  #        - $ref: "#/components/parameters/server_id"
  #        - $ref: "#/components/parameters/nic_id"
  #      responses:
  #        "200":
  #          description: Power on network adapter indicator led
  #      security:
  #        - jwt: []
  #
  #  /hmi/servers/{server_id}/nics/{nic_id}/led/off:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Power off network adapter indicator led
  #      operationId: hmi_nic_led_off
  #      parameters:
  #        - $ref: "#/components/parameters/server_id"
  #        - $ref: "#/components/parameters/nic_id"
  #      responses:
  #        "200":
  #          description: Power off network adapter indicator led
  #      security:
  #        - jwt: []
  #
  #  /hmi/servers/{server_id}/nics/{nic_id}/led/reset:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Reset network adapter indicator led
  #      operationId: hmi_nic_led_reset
  #      parameters:
  #        - $ref: "#/components/parameters/server_id"
  #        - $ref: "#/components/parameters/nic_id"
  #      responses:
  #        "200":
  #          description: Reset network adapter indicator led
  #      security:
  #        - jwt: []
  ### end of network adapter apis ###

  #  #Enclosure Resource
  #  /hmi/servers/{server_id}/enclosures/{enclosure_id}:
  #    get:
  #      tags:
  #        - REDHMI
  #      description: Get info about enclosure of server
  #      operationId: hmi_server_enclosure
  #      parameters:
  #        - $ref: "#/components/parameters/server_id"
  #        - $ref: "#/components/parameters/enclosure_id"
  #      responses:
  #        "200":
  #          description: Get enclosure information
  #      security:
  #        - jwt: []
  #  #Enclosure Resource Power
  #  /hmi/servers/{server_id}/enclosures/{enclosure_id}/power/on:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Power on the enclosure
  #      operationId: hmi_power_on_server_enclosure
  #      parameters:
  #        - $ref: "#/components/parameters/server_id"
  #        - $ref: "#/components/parameters/enclosure_id"
  #      responses:
  #        "200":
  #          description: Enclosure powered on
  #      security:
  #        - jwt: []
  #  /hmi/servers/{server_id}/enclosures/{enclosure_id}/power/off:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Power off the enclosure
  #      operationId: hmi_power_off_server_enclosure
  #      parameters:
  #        - $ref: "#/components/parameters/server_id"
  #        - $ref: "#/components/parameters/enclosure_id"
  #      responses:
  #        "200":
  #          description: Enclosure powered off
  #      security:
  #        - jwt: []
  #  /hmi/servers/{server_id}/enclosures/{enclosure_id}/power/reset:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Power reset the enclosure
  #      operationId: hmi_power_reset_server_enclosure
  #      parameters:
  #        - $ref: "#/components/parameters/server_id"
  #        - $ref: "#/components/parameters/enclosure_id"
  #      responses:
  #        "200":
  #          description: Enclosure powered reset
  #      security:
  #        - jwt: []
  #  #Enclosure Resource Indicator
  #  /hmi/servers/{server_id}/enclosures/{enclosure_id}/indicator/on:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Turn on the enclosure indicator
  #      operationId: hmi_turnon_server_enclosure_indicator
  #      parameters:
  #        - $ref: "#/components/parameters/server_id"
  #        - $ref: "#/components/parameters/enclosure_id"
  #      responses:
  #        "200":
  #          description: Enclosure indicator turned on
  #      security:
  #        - jwt: []
  #  /hmi/servers/{server_id}/enclosures/{enclosure_id}/indicator/off:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Turn off the enclosure indicator
  #      operationId: hmi_turnoff_server_enclosure_indicator
  #      parameters:
  #        - $ref: "#/components/parameters/server_id"
  #        - $ref: "#/components/parameters/enclosure_id"
  #      responses:
  #        "200":
  #          description: Enclosure indicator turned off
  #      security:
  #        - jwt: []
  #  /hmi/servers/{server_id}/enclosures/{enclosure_id}/indicator/blink:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Blink the enclosure indicator
  #      operationId: hmi_blink_server_enclosure_indicator
  #      parameters:
  #        - $ref: "#/components/parameters/server_id"
  #        - $ref: "#/components/parameters/enclosure_id"
  #      responses:
  #        "200":
  #          description: Blink enclosure indicator
  #      security:
  #        - jwt: []
  #  /hmi/servers/{server_id}/enclosures/{enclosure_id}/log:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Gather the enclosure vendor logs
  #      operationId: hmi_server_enclosure_log
  #      parameters:
  #        - $ref: "#/components/parameters/server_id"
  #        - $ref: "#/components/parameters/enclosure_id"
  #      responses:
  #        "200":
  #          description: Gathered enclosure vendor logs
  #      security:
  #        - jwt: []
  #  #Enclosure Resource
  #  /hmi/enclosures/{enclosure_id}:
  #    get:
  #      tags:
  #        - REDHMI
  #      description: Get info about enclosure
  #      operationId: hmi_enclosure
  #      parameters:
  #        - $ref: "#/components/parameters/enclosure_id"
  #      responses:
  #        "200":
  #          description: Get enclosure information
  #      security:
  #        - jwt: []
  #  #Enclosure Resource Power
  #  /hmi/enclosures/{enclosure_id}/power/on:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Power on the enclosure
  #      operationId: hmi_power_on_enclosure
  #      parameters:
  #        - $ref: "#/components/parameters/enclosure_id"
  #      responses:
  #        "200":
  #          description: Enclosure powered on
  #      security:
  #        - jwt: []
  #  /hmi/enclosures/{enclosure_id}/power/off:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Power off the enclosure
  #      operationId: hmi_power_off_enclosure
  #      parameters:
  #        - $ref: "#/components/parameters/enclosure_id"
  #      responses:
  #        "200":
  #          description: Enclosure powered off
  #      security:
  #        - jwt: []
  #  /hmi/enclosures/{enclosure_id}/power/reset:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Reset the enclosure
  #      operationId: hmi_power_reset_enclosure
  #      parameters:
  #        - $ref: "#/components/parameters/enclosure_id"
  #      responses:
  #        "200":
  #          description: Power resert enclosure
  #      security:
  #        - jwt: []
  #  #Enclosure Resource Indicator
  #  /hmi/enclosures/{enclosure_id}/indicator/on:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Turn on enclosure indicator
  #      operationId: hmi_turnon_enclosure_indicator
  #      parameters:
  #        - $ref: "#/components/parameters/enclosure_id"
  #      responses:
  #        "200":
  #          description: Enclosure indicator torned on
  #      security:
  #        - jwt: []
  #  /hmi/enclosures/{enclosure_id}/indicator/off:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Turn off enclosure indicator
  #      operationId: hmi_turnoff_enclosure_indicator
  #      parameters:
  #        - $ref: "#/components/parameters/enclosure_id"
  #      responses:
  #        "200":
  #          description: Enclosure indicator torned off
  #      security:
  #        - jwt: []
  #  /hmi/enclosures/{enclosure_id}/indicator/blink:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Blink enclosure indicator
  #      operationId: hmi_blink_enclosure_indicator
  #      parameters:
  #        - $ref: "#/components/parameters/enclosure_id"
  #      responses:
  #        "200":
  #          description: Blink enclosure indicator
  #      security:
  #        - jwt: []
  #  /hmi/enclosures/{enclosure_id}/log:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Gather the enclosure vendor logs
  #      operationId: hmi_enclosure_log
  #      parameters:
  #        - $ref: "#/components/parameters/enclosure_id"
  #      responses:
  #        "200":
  #          description: Gathered enclosure vendor logs
  #      security:
  #        - jwt: []
  #  #Enclosure Drive Resource
  #  /hmi/enclosures/{enclosure_id}/drives/{drive_id}:
  #    get:
  #      tags:
  #        - REDHMI
  #      description: Get info about drive
  #      operationId: hmi_controllers_enclosure_drive
  #      parameters:
  #        - $ref: "#/components/parameters/enclosure_id"
  #        - $ref: "#/components/parameters/drive_id"
  #      responses:
  #        "200":
  #          description: Get drive information
  #      security:
  #        - jwt: []
  #  #Enclosure Drive Resource Power
  #  /hmi/enclosures/{enclosure_id}/drives/{drive_id}/power/on:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Power on the enclosure drive
  #      operationId: hmi_power_on_enclosure_drive
  #      parameters:
  #        - $ref: "#/components/parameters/enclosure_id"
  #        - $ref: "#/components/parameters/drive_id"
  #      responses:
  #        "200":
  #          description: Enclosure drive powered on
  #      security:
  #        - jwt: []
  #  /hmi/enclosures/{enclosure_id}/drives/{drive_id}/power/off:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Power off the enclosure drive
  #      operationId: hmi_power_off_enclosure_drive
  #      parameters:
  #        - $ref: "#/components/parameters/enclosure_id"
  #        - $ref: "#/components/parameters/drive_id"
  #      responses:
  #        "200":
  #          description: Enclosure drive powered off
  #      security:
  #        - jwt: []
  #  /hmi/enclosures/{enclosure_id}/drives/{drive_id}/power/reset:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Reset the enclosure drive
  #      operationId: hmi_power_reset_enclosure_drive
  #      parameters:
  #        - $ref: "#/components/parameters/enclosure_id"
  #        - $ref: "#/components/parameters/drive_id"
  #      responses:
  #        "200":
  #          description: Power resert enclosure drive
  #      security:
  #        - jwt: []
  #  #Enclosure Drive Resource Indicator
  #  /hmi/enclosures/{enclosure_id}/drives/{drive_id}/indicator/on:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Turn on enclosure drive indicator
  #      operationId: hmi_turnon_enclosure_drive_indicator
  #      parameters:
  #        - $ref: "#/components/parameters/enclosure_id"
  #        - $ref: "#/components/parameters/drive_id"
  #      responses:
  #        "200":
  #          description: Enclosure drive indicator torned on
  #      security:
  #        - jwt: []
  #  /hmi/enclosures/{enclosure_id}/drives/{drive_id}/indicator/off:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Turn off enclosure drive indicator
  #      operationId: hmi_turnoff_enclosure_drive_indicator
  #      parameters:
  #        - $ref: "#/components/parameters/enclosure_id"
  #        - $ref: "#/components/parameters/drive_id"
  #      responses:
  #        "200":
  #          description: Enclosure drive indicator torned off
  #      security:
  #        - jwt: []
  #  /hmi/enclosures/{enclosure_id}/drives/{drive_id}/indicator/blink:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Blink enclosure drive indicator
  #      operationId: hmi_blink_enclosure_drive_indicator
  #      parameters:
  #        - $ref: "#/components/parameters/enclosure_id"
  #        - $ref: "#/components/parameters/drive_id"
  #      responses:
  #        "200":
  #          description: Blink enclosure drive indicator
  #      security:
  #        - jwt: []
  #  #Enclosure Drive Smart Data
  #  /hmi/enclosures/{enclosure_id}/drives/{drive_id}/smartdata:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Gather the enclosure drive smartdata
  #      operationId: hmi_enclosure_drive_smartdata
  #      parameters:
  #        - $ref: "#/components/parameters/enclosure_id"
  #        - $ref: "#/components/parameters/drive_id"
  #      responses:
  #        "200":
  #          description: Gathered enclosure drive smartdata
  #      security:
  #        - jwt: []
  #  #Enclosure Drive Logs
  #  /hmi/enclosures/{enclosure_id}/drives/{drive_id}/log:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Gather the enclosure drive vendor logs
  #      operationId: hmi_enclosure_drive_log
  #      parameters:
  #        - $ref: "#/components/parameters/enclosure_id"
  #        - $ref: "#/components/parameters/drive_id"
  #      responses:
  #        "200":
  #          description: Gathered enclosure drive vendor logs
  #      security:
  #        - jwt: []

  #Server Drive Resource
  /hmi/servers/{server_id}/drives:
    get:
      tags:
        - REDHMI
      description: Get list of drives
      operationId: hmi_controllers_server_drives
      parameters:
        - $ref: "#/components/parameters/server_id"
        - in: query
          name: type
          schema:
            type: string
          description: Type of drive (NVME or SAS or SATA)
      responses:
        "200":
          description: Get list of drives
      security:
        - jwt: []

  /hmi/servers/{server_id}/drives/{drive_id}:
    get:
      tags:
        - REDHMI
      description: Get information about drive
      operationId: hmi_controllers_server_drive
      parameters:
        - $ref: "#/components/parameters/server_id"
        - $ref: "#/components/parameters/drive_id"
      responses:
        "200":
          description: Get drive information
      security:
        - jwt: []

  #Server Drive Resource Power
  /hmi/servers/{server_id}/drives/{drive_id}/power/on:
    post:
      tags:
        - REDHMI
      description: Power on the server drive
      operationId: hmi_power_on_server_drive
      parameters:
        - $ref: "#/components/parameters/server_id"
        - $ref: "#/components/parameters/drive_id"
      responses:
        "200":
          description: Server drive powered on
      security:
        - jwt: []

  /hmi/servers/{server_id}/drives/{drive_id}/power/off:
    post:
      tags:
        - REDHMI
      description: Power off the server drive
      operationId: hmi_power_off_server_drive
      parameters:
        - $ref: "#/components/parameters/server_id"
        - $ref: "#/components/parameters/drive_id"
      responses:
        "200":
          description: Server drive powered off
      security:
        - jwt: []

  /hmi/servers/{server_id}/drives/{drive_id}/power/reset:
    post:
      tags:
        - REDHMI
      description: Reset the server drive
      operationId: hmi_power_reset_server_drive
      parameters:
        - $ref: "#/components/parameters/server_id"
        - $ref: "#/components/parameters/drive_id"
      responses:
        "200":
          description: Power reset server drive
      security:
        - jwt: []

  /hmi/servers/{server_id}/drives/{drive_id}/power/replace:
    post:
      tags:
        - REDHMI
      description: Replace the server drive
      operationId: hmi_power_replace_server_drive
      parameters:
        - $ref: "#/components/parameters/server_id"
        - $ref: "#/components/parameters/drive_id"
      responses:
        "200":
          description: Replace server drive
      security:
        - jwt: []

  #Server Drive Resource Indicator
  /hmi/servers/{server_id}/drives/{drive_id}/indicator/on:
    post:
      tags:
        - REDHMI
      description: Turn on server drive indicator
      operationId: hmi_turnon_server_drive_indicator
      parameters:
        - $ref: "#/components/parameters/server_id"
        - $ref: "#/components/parameters/drive_id"
      responses:
        "200":
          description: Server drive indicator torned on
      security:
        - jwt: []

  /hmi/servers/{server_id}/drives/{drive_id}/indicator/off:
    post:
      tags:
        - REDHMI
      description: Turn off server drive indicator
      operationId: hmi_turnoff_server_drive_indicator
      parameters:
        - $ref: "#/components/parameters/server_id"
        - $ref: "#/components/parameters/drive_id"
      responses:
        "200":
          description: Server drive indicator torned off
      security:
        - jwt: []

  /hmi/servers/{server_id}/drives/{drive_id}/indicator/blink:
    post:
      tags:
        - REDHMI
      description: Blink server drive indicator
      operationId: hmi_blink_server_drive_indicator
      parameters:
        - $ref: "#/components/parameters/server_id"
        - $ref: "#/components/parameters/drive_id"
      responses:
        "200":
          description: Blink server drive indicator
      security:
        - jwt: []

  #Server Drive Smart Data
  /hmi/servers/{server_id}/drives/{drive_id}/smartdata:
    get:
      tags:
        - REDHMI
      description: Get the server drive smartdata
      operationId: hmi_server_drive_smartdata
      parameters:
        - $ref: "#/components/parameters/server_id"
        - $ref: "#/components/parameters/drive_id"
      responses:
        "200":
          description: Get server drive smartdata
      security:
        - jwt: []

  #Server Drive Logs
  /hmi/servers/{server_id}/drives/{drive_id}/log:
    get:
      tags:
        - REDHMI
      description: Get the server drive vendor logs
      operationId: hmi_server_drive_log
      parameters:
        - $ref: "#/components/parameters/server_id"
        - $ref: "#/components/parameters/drive_id"
        - in: query
          name: page
          schema:
            type: integer
          description: Required log page number
        - in: query
          name: logLen
          schema:
            type: integer
          description: Required log length
        - in: query
          name: filepath
          schema:
            type: string
          description: Required filepath
      responses:
        "200":
          description: Get server drive vendor logs
      security:
        - jwt: []

  #server drive firmware update
  /hmi/servers/{server_id}/drives/{drive_id}/firmware:
    post:
      tags:
        - REDHMI
      description: Update drive firmware
      operationId: hmi_update_drive_firmware
      parameters:
        - $ref: "#/components/parameters/server_id"
        - $ref: "#/components/parameters/drive_id"
        - in: query
          name: path
          schema:
            type: string
          description: Path to the firmware file.
        - in: query
          name: status
          schema:
            type: boolean
          description: Get status of the fw update
      responses:
        "200":
          description: Drive firmware updated successfully
      security:
        - jwt: []

  #Server NVMe drive pci resource
  /hmi/servers/{server_id}/nvmepcis:
    get:
      tags:
        - REDHMI
      description: Get the server NVMe drive pci list
      operationId: hmi_server_nvmepcis
      parameters:
        - $ref: "#/components/parameters/server_id"
      responses:
        "200":
          description: Got server NVMe drive pci list
      security:
        - jwt: []

  #server NVMe drive pci config (bind/unbind)
  /hmi/servers/{server_id}/nvmepcis/{pci_bdf}/config:
    post:
      tags:
        - REDHMI
      description: Configure NVMe device (bind/unbind to a driver)
      operationId: hmi_server_nvmepci_config
      parameters:
        - $ref: "#/components/parameters/server_id"
        - $ref: "#/components/parameters/pci_bdf"
        - in: query
          name: bind
          schema:
            type: string
          description: Drive name to bind the NVMe device.
      responses:
        "200":
          description: NVMe device configured successfully
      security:
        - jwt: []

  # #Drive Resource
  # /hmi/drives:
  #   get:
  #     tags:
  #       - REDHMI
  #     description: Get list of drives
  #     operationId: controller.hmi.drives
  #     responses:
  #       "200":
  #         description: Get list of drives
  #     security:
  #       - jwt: []

  # /hmi/drives/{drive_id}:
  #   get:
  #     tags:
  #       - REDHMI
  #     description: Get info about drive
  #     operationId: controller.hmi.drive
  #     parameters:
  #       - $ref: "#/components/parameters/drive_id"
  #     responses:
  #       "200":
  #         description: Get drive information
  #     security:
  #       - jwt: []

  # #Drive Resource Power
  # /hmi/drives/{drive_id}/power/on:
  #   post:
  #     tags:
  #       - REDHMI
  #     description: Power on the drive
  #     operationId: hmi_power_on_drive
  #     parameters:
  #       - $ref: "#/components/parameters/drive_id"
  #     responses:
  #       "200":
  #         description: Drive powered on
  #     security:
  #       - jwt: []

  # /hmi/drives/{drive_id}/power/off:
  #   post:
  #     tags:
  #       - REDHMI
  #     description: Power off the drive
  #     operationId: hmi_power_off_drive
  #     parameters:
  #       - $ref: "#/components/parameters/drive_id"
  #     responses:
  #       "200":
  #         description: Drive powered off
  #     security:
  #       - jwt: []

  # /hmi/drives/{drive_id}/power/reset:
  #   post:
  #     tags:
  #       - REDHMI
  #     description: Reset the drive
  #     operationId: hmi_power_reset_drive
  #     parameters:
  #       - $ref: "#/components/parameters/drive_id"
  #     responses:
  #       "200":
  #         description: Power resert drive
  #     security:
  #       - jwt: []

  # #Drive Resource Indicator
  # /hmi/drives/{drive_id}/indicator/on:
  #   post:
  #     tags:
  #       - REDHMI
  #     description: Turn on Drive indicator
  #     operationId: hmi_turnon_drive_indicator
  #     parameters:
  #       - $ref: "#/components/parameters/drive_id"
  #     responses:
  #       "200":
  #         description: Drive indicator turned on
  #     security:
  #       - jwt: []

  # /hmi/drives/{drive_id}/indicator/off:
  #   post:
  #     tags:
  #       - REDHMI
  #     description: Turn off drive indicator
  #     operationId: hmi_turnoff_drive_indicator
  #     parameters:
  #       - $ref: "#/components/parameters/drive_id"
  #     responses:
  #       "200":
  #         description: Drive indicator turned off
  #     security:
  #       - jwt: []

  # /hmi/drives/{drive_id}/indicator/blink:
  #   post:
  #     tags:
  #       - REDHMI
  #     description: Blink drive indicator
  #     operationId: hmi_blink_drive_indicator
  #     parameters:
  #       - $ref: "#/components/parameters/drive_id"
  #     responses:
  #       "200":
  #         description: Blink drive indicator
  #     security:
  #       - jwt: []

  # #Drive Smart Data
  # /hmi/drives/{drive_id}/smartdata:
  #   post:
  #     tags:
  #       - REDHMI
  #     description: Gather the drive smartdata
  #     operationId: hmi_drive_smartdata
  #     parameters:
  #       - $ref: "#/components/parameters/drive_id"
  #     responses:
  #       "200":
  #         description: Gathered drive smartdata
  #     security:
  #       - jwt: []

  # #Server Drive Logs
  # /hmi/drives/{drive_id}/log:
  #   post:
  #     tags:
  #       - REDHMI
  #     description: Gather the drive vendor logs
  #     operationId: hmi_drive_log
  #     parameters:
  #       - $ref: "#/components/parameters/drive_id"
  #       - in: query
  #         name: page
  #         schema:
  #           type: integer
  #         description: Required log page number
  #     responses:
  #       "200":
  #         description: Gathered drive vendor logs
  #     security:
  #       - jwt: []

  #Code Resource
  /hmi/servers/{server_id}/bios:
    get:
      tags:
        - REDHMI
      description: Get information about bios
      operationId: hmi_server_bios
      parameters:
        - $ref: "#/components/parameters/server_id"
      responses:
        "200":
          description: Get bios information
      security:
        - jwt: []
    post:
      tags:
        - REDHMI
      description: Update server bios with the specified version
      operationId: hmi_update_server_bios
      parameters:
        - $ref: "#/components/parameters/server_id"
        - in: query
          name: path
          schema:
            type: string
          description: Filepath to the firmware binary
        - in: query
          name: target-server
          schema:
            type: string
          description: Target Server
        - in: query
          name: reboot
          schema:
            type: boolean
          description: Reboot after the upgrade
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bios_version"
      responses:
        "200":
          description: Server bios updated successfully
      security:
        - jwt: []

  /hmi/servers/{server_id}/bios_config:
    get:
      tags:
        - REDHMI
      description: Get server BIOS config
      operationId: hmi_server_bios_config
      parameters:
        - $ref: "#/components/parameters/server_id"
        - in: query
          name: path
          schema:
            type: string
          description: Filepath to save BIOS config
        - in: query
          name: target-server
          schema:
            type: string
          description: Target Server
      responses:
        "200":
          description: Get server BIOS configuration
      security:
        - jwt: []
    post:
      tags:
        - REDHMI
      description: Update server BIOS config
      operationId: hmi_update_server_bios_config
      parameters:
        - $ref: "#/components/parameters/server_id"
        - in: query
          name: path
          schema:
            type: string
          description: Filepath of BIOS config
        - in: query
          name: target-server
          schema:
            type: string
          description: Target Server
        - in: query
          name: reboot
          schema:
            type: boolean
          description: Reboot after BIOS config update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bios_config"
      responses:
        "200":
          description: Server BIOS config updated successfully
      security:
        - jwt: []

  /hmi/servers/{server_id}/bmcfw:
    get:
      tags:
        - REDHMI
      description: Get information about bmcfw
      operationId: hmi_server_bmcfw
      parameters:
        - $ref: "#/components/parameters/server_id"
      responses:
        "200":
          description: Get bmcfw information
      security:
        - jwt: []
    post:
      tags:
        - REDHMI
      description: Update server bmcfw with the specified version
      operationId: hmi_update_server_bmcfw
      parameters:
        - $ref: "#/components/parameters/server_id"
        - in: query
          name: path
          schema:
            type: string
          description: Filepath to the firmware binary
        - in: query
          name: target-server
          schema:
            type: string
          description: Target Server
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bmcfw_version"
      responses:
        "200":
          description: Server bmcfw updated successfully
      security:
        - jwt: []

  #  /hmi/enclosures/{enclosure_id}/firmware:
  #    get:
  #      tags:
  #        - REDHMI
  #      description: Get info about enclosure firmware
  #      operationId: hmi_enclosure_firmware
  #      parameters:
  #        - $ref: "#/components/parameters/enclosure_id"
  #      responses:
  #        "200":
  #          description: Get enclosure firmware information
  #      security:
  #        - jwt: []
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Update enclosure firmware with the specified version
  #      operationId: hmi_update_enclosure_firmware
  #      parameters:
  #        - $ref: "#/components/parameters/enclosure_id"
  #        - in: query
  #          name: activate
  #          schema:
  #            type: boolean
  #          description: If true, Update and activate specified version
  #      requestBody:
  #        required: true
  #        content:
  #          application/json:
  #            schema:
  #              $ref: "#/components/schemas/enclosure_version"
  #      responses:
  #        "200":
  #          description: Enclosure firmware updated successfully
  #      security:
  #        - jwt: []

  /hmi/frus/{fru_id}/firmware:
    get:
      tags:
        - REDHMI
      description: Get information about fru firmware
      operationId: hmi_fru_firmware
      parameters:
        - $ref: "#/components/parameters/fru_id"
      responses:
        "200":
          description: Get fru firmware information
      security:
        - jwt: []
    post:
      tags:
        - REDHMI
      description: Update fru firmware with the specified version
      operationId: hmi_update_fru_firmware
      parameters:
        - $ref: "#/components/parameters/fru_id"
        - in: query
          name: activate
          schema:
            type: boolean
          description: If true, Update and activate specified version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/fru_version"
      responses:
        "200":
          description: Fru firmware updated successfully
      security:
        - jwt: []

  # Sensor Resource

  /hmi/servers/{server_id}/server_sensors:
    get:
      tags:
        - REDHMI
      description: Get sensors list
      operationId: server_sensors_list
      parameters:
        - $ref: "#/components/parameters/server_id"
        - in: query
          name: type
          schema:
            type: string
          description: Sensor type (TEMPERATURE or COOLING or VOLTAGE)
        - in: query
          name: health
          schema:
            type: string
          description: Sensor Health (OK, WARNING, CRITICAL, FATAL, UNKNOWN, INVALID)
      responses:
        "200":
          description: Get server sensors list
      security:
        - jwt: []

  /hmi/servers/{server_id}/drive_sensors:
    get:
      tags:
        - REDHMI
      description: Get sensors list
      operationId: drive_sensors_list
      parameters:
        - $ref: "#/components/parameters/server_id"
        - in: query
          name: type
          schema:
            type: string
          description: Sensor type (TEMPERATURE or COOLING or VOLTAGE)
        - in: query
          name: driveid
          schema:
            type: string
          description: Drive Id
      responses:
        "200":
          description: Get drive sensors list
      security:
        - jwt: []

  /hmi/servers/{server_id}/server_sensor:
    get:
      tags:
        - REDHMI
      description: Get information about server sensor
      operationId: server_sensor_get
      parameters:
        - $ref: "#/components/parameters/server_id"
        - in: query
          name: name
          schema:
            type: string
          description: Sensor Name/ID to show
      responses:
        "200":
          description: Get server sensor information
      security:
        - jwt: []

  /hmi/servers/{server_id}/drive_sensor:
    get:
      tags:
        - REDHMI
      description: Get information about drive sensor
      operationId: drive_sensor_get
      parameters:
        - $ref: "#/components/parameters/server_id"
        - in: query
          name: name
          schema:
            type: string
          description: Sensor Name/ID to show
      responses:
        "200":
          description: Get drive sensor information
      security:
        - jwt: []

  /hmi/servers/{server_id}/sensor:
    put:
      tags:
        - REDHMI
      description: Update sensor threshold
      operationId: hmi_sensor_update
      parameters:
        - $ref: "#/components/parameters/server_id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/sensor_update"
            example:
              name: "c1d76dbc-9b87-4197-8b1e-9bc8665bdd3a/sensors/1"
              activation: "neither"
              limit: "lower"
              type: "critical"
              value: 90
      responses:
        "200":
          description: Update sensor threshold
      security:
        - jwt: []

  /hmi/servers/{server_id}/sensor/reset:
    post:
      tags:
        - REDHMI
      description: Reset the server sensor
      operationId: hmi_sensor_reset
      parameters:
        - $ref: "#/components/parameters/server_id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/hmi_resource_id"
            example:
              name: "1"
      responses:
        "200":
          description: Server sensor reset successful
      security:
        - jwt: []

  #  /hmi/enclosures/{enclosure_id}/sensors/{sensor_id}:
  #    get:
  #      tags:
  #        - REDHMI
  #      description: Get info about sensor
  #      operationId: hmi_enclosure_sensor
  #      parameters:
  #        - $ref: "#/components/parameters/enclosure_id"
  #        - $ref: "#/components/parameters/sensor_id"
  #      responses:
  #        "200":
  #          description: Get sensor information
  #      security:
  #        - jwt: []
  #  /hmi/enclosures/{enclosure_id}/sensors/{sensor_id}/reset:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Reset the enclosure sensor
  #      operationId: hmi_reset_enclosure_sensor
  #      parameters:
  #        - $ref: "#/components/parameters/enclosure_id"
  #        - $ref: "#/components/parameters/sensor_id"
  #      responses:
  #        "200":
  #          description: Enclosure sensor reset successful
  #      security:
  #        - jwt: []

  # /hmi/drives/{drive_id}/sensors/{sensor_id}:
  #   get:
  #     tags:
  #       - REDHMI
  #     description: Get info about sensor
  #     operationId: hmi_drive_sensor
  #     parameters:
  #       - $ref: "#/components/parameters/drive_id"
  #       - $ref: "#/components/parameters/sensor_id"
  #     responses:
  #       "200":
  #         description: Get sensor information
  #     security:
  #       - jwt: []

  # /hmi/drives/{drive_id}/sensors/{sensor_id}/reset:
  #   post:
  #     tags:
  #       - REDHMI
  #     description: Reset the drive sensor
  #     operationId: hmi_reset_drive_sensor
  #     parameters:
  #       - $ref: "#/components/parameters/drive_id"
  #       - $ref: "#/components/parameters/sensor_id"
  #     responses:
  #       "200":
  #         description: Drive sensor reset successful
  #     security:
  #       - jwt: []

  #FRU Resource
  /hmi/servers/{server_id}/frus/{fru_id}:
    get:
      tags:
        - REDHMI
      description: Get information about fru
      operationId: hmi_server_fru
      parameters:
        - $ref: "#/components/parameters/server_id"
        - $ref: "#/components/parameters/fru_id"
      responses:
        "200":
          description: Get fru information
      security:
        - jwt: []

  #Server FRU Resource Power
  /hmi/servers/{server_id}/frus/{fru_id}/power/on:
    post:
      tags:
        - REDHMI
      description: Power on the server fru
      operationId: hmi_power_on_server_fru
      parameters:
        - $ref: "#/components/parameters/server_id"
        - $ref: "#/components/parameters/fru_id"
      responses:
        "200":
          description: Server fru powered on
      security:
        - jwt: []

  /hmi/servers/{server_id}/frus/{fru_id}/power/off:
    post:
      tags:
        - REDHMI
      description: Power off the server fru
      operationId: hmi_power_off_server_fru
      parameters:
        - $ref: "#/components/parameters/server_id"
        - $ref: "#/components/parameters/fru_id"
      responses:
        "200":
          description: Server fru powered off
      security:
        - jwt: []

  #Server FRU Resource Indicator
  # /hmi/servers/{server_id}/frus/{fru_id}/indicator/on:
  #   post:
  #     tags:
  #       - REDHMI
  #     description: Turn on server fru indicator
  #     operationId: hmi_turnon_server_fru_indicator
  #     parameters:
  #       - $ref: "#/components/parameters/server_id"
  #       - $ref: "#/components/parameters/fru_id"
  #     responses:
  #       "200":
  #         description: Server fru indicator torned on
  #     security:
  #       - jwt: []
  # /hmi/servers/{server_id}/frus/{fru_id}/indicator/off:
  #   post:
  #     tags:
  #       - REDHMI
  #     description: Turn off server fru indicator
  #     operationId: hmi_turnoff_server_fru_indicator
  #     parameters:
  #       - $ref: "#/components/parameters/server_id"
  #       - $ref: "#/components/parameters/fru_id"
  #     responses:
  #       "200":
  #         description: Server fru indicator torned off
  #     security:
  #       - jwt: []
  # /hmi/servers/{server_id}/frus/{fru_id}/indicator/blink:
  #   post:
  #     tags:
  #       - REDHMI
  #     description: Blink server fru indicator
  #     operationId: hmi_blink_server_fru_indicator
  #     parameters:
  #       - $ref: "#/components/parameters/server_id"
  #       - $ref: "#/components/parameters/fru_id"
  #     responses:
  #       "200":
  #         description: Blink server fru indicator
  #     security:
  #       - jwt: []
  #  #Enclosures FRU
  #  /hmi/enclosures/{enclosure_id}/frus/{fru_id}:
  #    get:
  #      tags:
  #        - REDHMI
  #      description: Get info about fru
  #      operationId: hmi_enclosure_fru
  #      parameters:
  #        - $ref: "#/components/parameters/enclosure_id"
  #        - $ref: "#/components/parameters/fru_id"
  #      responses:
  #        "200":
  #          description: Get fru information
  #      security:
  #        - jwt: []
  #  #Server FRU Resource Power
  #  /hmi/enclosures/{enclosure_id}/frus/{fru_id}/power/on:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Power on the enclosure fru
  #      operationId: hmi_power_on_enclosure_fru
  #      parameters:
  #        - $ref: "#/components/parameters/enclosure_id"
  #        - $ref: "#/components/parameters/fru_id"
  #      responses:
  #        "200":
  #          description: Enclosure fru powered on
  #      security:
  #        - jwt: []
  #  /hmi/enclosures/{enclosure_id}/frus/{fru_id}/power/off:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Power off the enclosure fru
  #      operationId: hmi_power_off_enclosure_fru
  #      parameters:
  #        - $ref: "#/components/parameters/enclosure_id"
  #        - $ref: "#/components/parameters/fru_id"
  #      responses:
  #        "200":
  #          description: Enclosure fru powered off
  #      security:
  #        - jwt: []
  #  #Server FRU Resource Indicator
  #  /hmi/enclosures/{enclosure_id}/frus/{fru_id}/indicator/on:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Turn on enclosure fru indicator
  #      operationId: hmi_turnon_enclosure_fru_indicator
  #      parameters:
  #        - $ref: "#/components/parameters/enclosure_id"
  #        - $ref: "#/components/parameters/fru_id"
  #      responses:
  #        "200":
  #          description: Enclosure fru indicator torned on
  #      security:
  #        - jwt: []
  #  /hmi/enclosures/{enclosure_id}/frus/{fru_id}/indicator/off:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Turn off enclosure frue indicator
  #      operationId: hmi_turnoff_enclosure_fru_indicator
  #      parameters:
  #        - $ref: "#/components/parameters/enclosure_id"
  #        - $ref: "#/components/parameters/fru_id"
  #      responses:
  #        "200":
  #          description: Enclosure fru indicator torned off
  #      security:
  #        - jwt: []
  #  /hmi/enclosures/{enclosure_id}/frus/{fru_id}/indicator/blink:
  #    post:
  #      tags:
  #        - REDHMI
  #      description: Blink enclosure fru indicator
  #      operationId: hmi_blink_enclosure_fru_indicator
  #      parameters:
  #        - $ref: "#/components/parameters/enclosure_id"
  #        - $ref: "#/components/parameters/fru_id"
  #      responses:
  #        "200":
  #          description: Blink enclosure fru indicator
  #      security:
  #        - jwt: []

  # RED Time series query APIs
  /metrics/{server_id}/query/raw:
    post:
      tags:
        - REDTS
      description: Get time series data
      operationId: tsdb_raw_query
      parameters:
        - $ref: "#/components/parameters/server_id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tsdb_raw"
            example:
              query: 'from(bucket: "<NAME>") |> range(start: -10m) |> filter(fn: (r) => r["_measurement"] == "cpu") |> filter(fn: (r) => r["_field"] == "cpu_percentage")'
      responses:
        "200":
          description: Time series data by TSDB query
      security:
        - jwt: []

  /metrics/{server_id}/query/cpu:
    get:
      tags:
        - REDTS
      description: Get time series data for instance CPU
      operationId: tsdb_cpu_instance
      parameters:
        - $ref: "#/components/parameters/server_id"
        - in: query
          name: start
          schema:
            type: integer
          description: Start time of the query. Ex. 1665149000
        - in: query
          name: stop
          schema:
            type: integer
          description: Stop time of the query. Ex. 1665149212
        - in: query
          name: field
          schema:
            type: string
          description: Required field name. Ex. system
        - in: query
          name: id
          schema:
            type: string
          description: Required CPU ID. Ex. cpu0
        - in: query
          name: aggregate
          schema:
            type: string
          description: Aggregate window required. Ex. 1m
      responses:
        "200":
          description: Gets time series data by instance CPU
      security:
        - jwt: []

  /aggregated/metrics/query/cpu:
    get:
      tags:
        - REDTS
      description: Get aggregated time series data for all instance CPUs
      operationId: tsdb_cpu
      parameters:
        - in: query
          name: start
          schema:
            type: integer
          description: Start time of the query. Ex. 1665149000
        - in: query
          name: stop
          schema:
            type: integer
          description: Stop time of the query. Ex. 1665149212
        - in: query
          name: field
          schema:
            type: string
          description: Required field name. Ex. system
        - in: query
          name: id
          schema:
            type: string
          description: Required CPU ID. Ex. cpu0
        - in: query
          name: aggregate
          schema:
            type: string
          description: Aggregate window required. Ex. 1m
        - in: query
          name: hosts
          schema:
            type: string
          description: Comma separated list of hosts. Ex. host1,host2
      responses:
        "200":
          description: Gets aggregated time series data by instance CPUs
      security:
        - jwt: []

  /metrics/{server_id}/query/memory:
    get:
      tags:
        - REDTS
      description: Get time series data for instance memory
      operationId: tsdb_memory_instance
      parameters:
        - $ref: "#/components/parameters/server_id"
        - in: query
          name: start
          schema:
            type: integer
          description: Start time of the query. Ex. 1665149000
        - in: query
          name: stop
          schema:
            type: integer
          description: Stop time of the query. Ex. 1665149212
        - in: query
          name: field
          schema:
            type: string
          description: Required field name. Ex. SwapFree
        - in: query
          name: aggregate
          schema:
            type: string
          description: Aggregate window required. Ex. 1m
      responses:
        "200":
          description: Get time series data for instance memory
      security:
        - jwt: []

  /aggregated/metrics/query/memory:
    get:
      tags:
        - REDTS
      description: Get aggregated time series data for all instance memory
      operationId: tsdb_memory
      parameters:
        - in: query
          name: start
          schema:
            type: integer
          description: Start time of the query. Ex. 1665149000
        - in: query
          name: stop
          schema:
            type: integer
          description: Stop time of the query. Ex. 1665149212
        - in: query
          name: field
          schema:
            type: string
          description: Required field name. Ex. SwapFree
        - in: query
          name: aggregate
          schema:
            type: string
          description: Aggregate window required. Ex. 1m
        - in: query
          name: hosts
          schema:
            type: string
          description: Comma separated list of hosts. Ex. host1,host2
      responses:
        "200":
          description: Get aggregated time series data by instance memory
      security:
        - jwt: []

  /metrics/{server_id}/query/network:
    get:
      tags:
        - REDTS
      description: Get time series data for instance nics
      operationId: tsdb_network_instance
      parameters:
        - $ref: "#/components/parameters/server_id"
        - in: query
          name: start
          schema:
            type: integer
          description: Start time of the query. Ex. 1665149000
        - in: query
          name: stop
          schema:
            type: integer
          description: Stop time of the query. Ex. 1665149212
        - in: query
          name: field
          schema:
            type: string
          description: Required field name. Ex. tx_mbps
        - in: query
          name: aggregate
          schema:
            type: string
          description: Aggregate window required. Ex. 1m
      responses:
        "200":
          description: Gets time series data by instance nics
      security:
        - jwt: []

  /aggregated/metrics/query/network:
    get:
      tags:
        - REDTS
      description: Get aggregated time series data for all nics
      operationId: tsdb_network
      parameters:
        - in: query
          name: start
          schema:
            type: integer
          description: Start time of the query. Ex. 1665149000
        - in: query
          name: stop
          schema:
            type: integer
          description: Stop time of the query. Ex. 1665149212
        - in: query
          name: field
          schema:
            type: string
          description: Required field name. Ex. tx_mbps
        - in: query
          name: aggregate
          schema:
            type: string
          description: Aggregate window required. Ex. 1m
        - in: query
          name: hosts
          schema:
            type: string
          description: Comma separated list of hosts. Ex. host1,host2
      responses:
        "200":
          description: Gets aggregated time series data by instance nics
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/subtenants/{subtenant_name}/metrics/query/s3:
    get:
      tags:
        - REDTS
      description: Get S3 time series data for a given tenant/subtenant
      operationId: tsdb_s3_subtenant
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - in: query
          name: start
          schema:
            type: integer
          description: Start time of the query. Ex. 1665149000
        - in: query
          name: stop
          schema:
            type: integer
          description: Stop time of the query. Ex. 1665149212
        - in: query
          name: field
          schema:
            type: string
          description: Required field name. Ex. egress_bytes
        - in: query
          name: bucket
          schema:
            type: string
          description: Bucket name
        - in: query
          name: aggregate
          schema:
            type: string
          description: Aggregate window required. Ex. 20m
      responses:
        "200":
          description: Get S3 time series data for a given tenant/subtenant
      security:
        - jwt: []

  /clusters/{cluster_name}/metrics/query/s3:
    get:
      tags:
        - REDTS
      description: Get S3 time series data for the realm
      operationId: tsdb_s3_realm
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - in: query
          name: start
          schema:
            type: integer
          description: Start time of the query. Ex. 1665149000
        - in: query
          name: stop
          schema:
            type: integer
          description: Stop time of the query. Ex. 1665149212
        - in: query
          name: field
          schema:
            type: string
          description: Required field name. Ex. egress_bytes
        - in: query
          name: bucket
          schema:
            type: string
          description: Bucket name
        - in: query
          name: tenant
          schema:
            type: string
          description: Tenant Name.
        - in: query
          name: aggregate
          schema:
            type: string
          description: Aggregate window required. Ex. 1m
      responses:
        "200":
          description: Get S3 time series data for the realm
      security:
        - jwt: []

  /metrics/{server_id}/query/netdev:
    get:
      tags:
        - REDTS
      description: Get time series data for netdev metrics
      operationId: tsdb_netdev_instance
      parameters:
        - $ref: "#/components/parameters/server_id"
        - in: query
          name: start
          schema:
            type: integer
          description: Start time of the query. Ex. 1665149000
        - in: query
          name: stop
          schema:
            type: integer
          description: Stop time of the query. Ex. 1665149212
        - in: query
          name: field
          schema:
            type: string
          description: Required field name. Ex. RxBytes, TxBytes
        - in: query
          name: aggregate
          schema:
            type: string
          description: Aggregate window required. Ex. 1m
        - in: query
          name: devicename
          schema:
            type: string
          description: Device name. Ex. eth0
      responses:
        "200":
          description: Get time series data for single s3 instance
      security:
        - jwt: []

  /clusters/{cluster_name}/metrics/query/quota:
    get:
      tags:
        - REDTS
      description: Get time series data for tenant quota metrics
      operationId: tsdb_quota
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - in: query
          name: start
          schema:
            type: integer
          description: Start time of the query. Ex. 1665149000
        - in: query
          name: stop
          schema:
            type: integer
          description: Stop time of the query. Ex. 1665149212
        - in: query
          name: field
          schema:
            type: string
          description: Required field name. Ex. bulk_usage
        - in: query
          name: aggregate
          schema:
            type: string
          description: Aggregate window required. Ex. 30m
        - in: query
          name: tenant
          schema:
            type: string
          description: Tenant Name.
      responses:
        "200":
          description: Get time series data for quota stats
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/metrics/query/quota:
    get:
      tags:
        - REDTS
      description: Get time series data for tenant quota metrics
      operationId: tsdb_quota_tenant
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - in: query
          name: start
          schema:
            type: integer
          description: Start time of the query. Ex. 1665149000
        - in: query
          name: stop
          schema:
            type: integer
          description: Stop time of the query. Ex. 1665149212
        - in: query
          name: field
          schema:
            type: string
          description: Required field name. Ex. bulk_usage
        - in: query
          name: aggregate
          schema:
            type: string
          description: Aggregate window required. Ex. 30m
      responses:
        "200":
          description: Get time series data for quota stats
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/subtenants/{subtenant_name}/metrics/query/quota:
    get:
      tags:
        - REDTS
      description: Get time series data for subtenant quota metrics
      operationId: tsdb_quota_subtenant
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - in: query
          name: start
          schema:
            type: integer
          description: Start time of the query. Ex. 1665149000
        - in: query
          name: stop
          schema:
            type: integer
          description: Stop time of the query. Ex. 1665149212
        - in: query
          name: field
          schema:
            type: string
          description: Required field name. Ex. bulk_usage
        - in: query
          name: aggregate
          schema:
            type: string
          description: Aggregate window required. Ex. 30m
      responses:
        "200":
          description: Get time series data for quota stats
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/subtenants/{subtenant_name}/datasets/{dataset_name}/metrics/query/quota:
    get:
      tags:
        - REDTS
      description: Get time series data for dataset quota metrics
      operationId: tsdb_quota_dataset
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - $ref: "#/components/parameters/dataset_name"
        - in: query
          name: start
          schema:
            type: integer
          description: Start time of the query. Ex. 1665149000
        - in: query
          name: stop
          schema:
            type: integer
          description: Stop time of the query. Ex. 1665149212
        - in: query
          name: field
          schema:
            type: string
          description: Required field name. Ex. bulk_usage
        - in: query
          name: aggregate
          schema:
            type: string
          description: Aggregate window required. Ex. 30m
      responses:
        "200":
          description: Get time series data for quota stats
      security:
        - jwt: []

  /clusters/{cluster_name}/tenants/{tenant_name}/subtenants/{subtenant_name}/metrics/query/service:
    get:
      tags:
        - REDTS
      description: Get time series data for service
      operationId: tsdb_service
      parameters:
        - $ref: "#/components/parameters/cluster_name"
        - $ref: "#/components/parameters/tenant_name"
        - $ref: "#/components/parameters/subtenant_name"
        - in: query
          name: service_name
          schema:
            type: string
          description: Service Name.
        - in: query
          name: service_type
          schema:
            type: string
          description: Service Type. Ex. block Or file-and-object
        - in: query
          name: start
          schema:
            type: integer
          description: Start time of the query. Ex. 1665149000
        - in: query
          name: stop
          schema:
            type: integer
          description: Stop time of the query. Ex. 1665149212
        - in: query
          name: field
          schema:
            type: string
          description: Required field name. Ex. bulk_usage
        - in: query
          name: aggregate
          schema:
            type: string
          description: Aggregate window required. Ex. 30m
      responses:
        "200":
          description: Get time series data for service
      security:
        - jwt: []

  /bfb/list:
    get:
      tags:
        - BFB
      summary: Get a list of available BFB images
      operationId: controllers.bfb.list
      parameters:
        - in: query
          name: channel
          schema:
            type: string
          description: BFB channel to list (e.g., stable, beta)
        - in: query
          name: all
          schema:
            type: boolean
          description: Show all available BFB images (by default only shows compatible images)
      responses:
        "200":
          description: List of available BFB images
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        version:
                          type: string
                          description: BFB version
                        created:
                          type: string
                          format: date-time
                          description: Creation timestamp
                        image_name:
                          type: string
                          description: Docker image name
                        channel:
                          type: string
                          description: Release channel (e.g., stable, beta)
                        compatible:
                          type: boolean
                          description: Whether the image is compatible with current system
      security:
        - jwt: []

  /bfb/metadata/update:
    post:
      tags:
        - BFB
      summary: Update BFB metadata from remote registry
      operationId: controllers.bfb.metadata_update
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bfb_metadata:
                  type: string
                  description: BFB metadata content (optional, if updating from file)
      responses:
        "200":
          description: BFB metadata successfully updated
        "400":
          description: Invalid metadata format
        "500":
          description: Failed to update metadata
      security:
        - jwt: []

  /system_images/list:
    get:
      tags:
        - BFB
        - AIC3000
      summary: Get a list of available system images
      operationId: controllers.system_images.list
      parameters:
        - in: query
          name: channel
          schema:
            type: string
          description: system image channel to list (e.g., stable, beta)
        - in: query
          name: all
          schema:
            type: boolean
          description: Show all available system images (by default only shows compatible images)
      responses:
        "200":
          description: List of available system images
      security:
        - jwt: []


  /trace:
    get:
      tags:
        - TRACE
      description: Get trace state
      operationId: trace_get
      parameters:
        - in: query
          name: cluster
          schema:
            type: string
          description: Cluster (used in conjunction with instances)
        - in: query
          name: clusters
          schema:
            type: string
          description: Cluster(s) to get trace state of. Ex. c1,c2
        - in: query
          name: agents
          schema:
            type: string
          description: Agents(s) to get trace state of. Ex. a1,a2
        - in: query
          name: instances
          schema:
            type: string
          description: Instances(s) to get trace state of. Ex. 1,2
        - in: query
          name: services
          schema:
            type: string
          description: Services to get trace state of. Ex. reds3
        - in: query
          name: daemons
          schema:
            type: string
          description: Daemons to get trace state of. Ex. name@host1
        - in: query
          name: clients
          schema:
            type: string
          description: Clients to get trace state of. Ex. client@host1
      responses:
        "200":
          description: Get trace state
      security:
        - jwt: []

  /trace/inject:
    put:
      tags:
        - TRACE
      description: Inject trace message
      operationId: trace_inject
      parameters:
        - in: query
          name: cluster
          schema:
            type: string
          description: Cluster (used in conjunction with instances)
        - in: query
          name: clusters
          schema:
            type: string
          description: Cluster(s) to get trace state of. Ex. c1,c2
        - in: query
          name: agents
          schema:
            type: string
          description: Agents(s) to get trace state of. Ex. a1,a2
        - in: query
          name: instances
          schema:
            type: string
          description: Instances(s) to get trace state of. Ex. 1,2
        - in: query
          name: services
          schema:
            type: string
          description: Services to set trace state of. Ex. reds3
        - in: query
          name: daemons
          schema:
            type: string
          description: Daemons to get trace state of. Ex. name@host1
        - in: query
          name: clients
          schema:
            type: string
          description: Clients to get trace state of. Ex. client@host1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/trace_inject"
            example:
              query: "<message>"
      responses:
        "200":
          description: Trace message injected
      security:
        - jwt: []

  /trace/e2e:
    put:
      tags:
        - TRACE
      description: Set trace e2e
      operationId: trace_set_e2e
      parameters:
        - in: query
          name: cluster
          schema:
            type: string
          description: Cluster (used in conjunction with instances)
        - in: query
          name: clusters
          schema:
            type: string
          description: Cluster(s) to set trace e2e of. Ex. c1,c2
        - in: query
          name: agents
          schema:
            type: string
          description: Agents(s) to set trace e2e of. Ex. a1,a2
        - in: query
          name: instances
          schema:
            type: string
          description: Instances(s) to set trace e2e of. Ex. 1,2
        - in: query
          name: services
          schema:
            type: string
          description: Services to get trace state of. Ex. reds3
        - in: query
          name: daemons
          schema:
            type: string
          description: Daemons to get trace state of. Ex. name@host1
        - in: query
          name: clients
          schema:
            type: string
          description: Clients to get trace state of. Ex. client@host1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/trace_e2e"
      responses:
        "200":
          description: Trace e2e set
      security:
        - jwt: []

  /trace/fmt_on_exit:
    put:
      tags:
        - TRACE
      description: Set trace format on exit
      operationId: trace_set_fmt_on_exit
      parameters:
        - in: query
          name: cluster
          schema:
            type: string
          description: Cluster (used in conjunction with instances)
        - in: query
          name: clusters
          schema:
            type: string
          description: Cluster(s) to set trace option of. Ex. c1,c2
        - in: query
          name: agents
          schema:
            type: string
          description: Agents(s) to set trace option of. Ex. a1,a2
        - in: query
          name: instances
          schema:
            type: string
          description: Instances(s) to set trace option of. Ex. 1,2
        - in: query
          name: services
          schema:
            type: string
          description: Services to get trace state of. Ex. reds3
        - in: query
          name: daemons
          schema:
            type: string
          description: Daemons to get trace state of. Ex. name@host1
        - in: query
          name: clients
          schema:
            type: string
          description: Clients to get trace state of. Ex. client@host1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/trace_fmt_on_exit"
      responses:
        "200":
          description: Trace format option set
      security:
        - jwt: []

  /trace/fmtoption:
    put:
      tags:
        - TRACE
      description: Set trace format options
      operationId: trace_set_fmtoptions
      parameters:
        - in: query
          name: cluster
          schema:
            type: string
          description: Cluster (used in conjunction with instances)
        - in: query
          name: clusters
          schema:
            type: string
          description: Cluster(s) to set trace state of. Ex. c1,c2
        - in: query
          name: agents
          schema:
            type: string
          description: Agents(s) to set trace state of. Ex. a1,a2
        - in: query
          name: instances
          schema:
            type: string
          description: Instances(s) to set trace state of. Ex. 1,2
        - in: query
          name: services
          schema:
            type: string
          description: Services to get trace state of. Ex. reds3
        - in: query
          name: daemons
          schema:
            type: string
          description: Daemons to get trace state of. Ex. name@host1
        - in: query
          name: clients
          schema:
            type: string
          description: Clients to get trace state of. Ex. client@host1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/trace_fmt_option"
      responses:
        "200":
          description: Trace format option set
      security:
        - jwt: []

  /trace/actions:
    put:
      tags:
        - TRACE
      description: Set trace actions
      operationId: trace_set_actions
      parameters:
        - in: query
          name: cluster
          schema:
            type: string
          description: Cluster (used in conjunction with instances)
        - in: query
          name: clusters
          schema:
            type: string
          description: Cluster(s) to set trace state of. Ex. c1,c2
        - in: query
          name: agents
          schema:
            type: string
          description: Agents(s) to set trace state of. Ex. a1,a2
        - in: query
          name: instances
          schema:
            type: string
          description: Instances(s) to set trace state of. Ex. 1,2
        - in: query
          name: services
          schema:
            type: string
          description: Services to get trace state of. Ex. reds3
        - in: query
          name: daemons
          schema:
            type: string
          description: Daemons to get trace state of. Ex. name@host1
        - in: query
          name: clients
          schema:
            type: string
          description: Clients to get trace state of. Ex. client@host1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/trace_actions"
      responses:
        "200":
          description: Trace action set
      security:
        - jwt: []

  /trace/stream:
    put:
      tags:
        - TRACE
      description: Set trace stream
      operationId: trace_set_stream
      parameters:
        - in: query
          name: cluster
          schema:
            type: string
          description: Cluster (used in conjunction with instances)
        - in: query
          name: clusters
          schema:
            type: string
          description: Cluster(s) to set trace state of. Ex. c1,c2
        - in: query
          name: agents
          schema:
            type: string
          description: Agents(s) to set trace state of. Ex. a1,a2
        - in: query
          name: instances
          schema:
            type: string
          description: Instances(s) to set trace state of. Ex. 1,2
        - in: query
          name: services
          schema:
            type: string
          description: Services to get trace state of. Ex. reds3
        - in: query
          name: daemons
          schema:
            type: string
          description: Daemons to get trace state of. Ex. name@host1
        - in: query
          name: clients
          schema:
            type: string
          description: Clients to get trace state of. Ex. client@host1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/trace_stream"
      responses:
        "200":
          description: Trace stream set
      security:
        - jwt: []

  /trace/wrap:
    put:
      tags:
        - TRACE
      description: Set wrap stream
      operationId: trace_set_wrap
      parameters:
        - in: query
          name: cluster
          schema:
            type: string
          description: Cluster (used in conjunction with instances)
        - in: query
          name: clusters
          schema:
            type: string
          description: Cluster(s) to set trace wrap state of. Ex. c1,c2
        - in: query
          name: agents
          schema:
            type: string
          description: Agents(s) to set trace wrap state of. Ex. a1,a2
        - in: query
          name: instances
          schema:
            type: string
          description: Instances(s) to set trace wrap state of. Ex. 1,2
        - in: query
          name: services
          schema:
            type: string
          description: Services to get trace state of. Ex. reds3
        - in: query
          name: daemons
          schema:
            type: string
          description: Daemons to get trace state of. Ex. name@host1
        - in: query
          name: clients
          schema:
            type: string
          description: Clients to get trace state of. Ex. client@host1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/trace_wrap"
      responses:
        "200":
          description: Trace wrap set
      security:
        - jwt: []

  /trace/dump:
    put:
      tags:
        - TRACE
      description: Dump trace logs
      operationId: trace_dump
      parameters:
        - in: query
          name: cluster
          schema:
            type: string
          description: Cluster (used in conjunction with instances)
        - in: query
          name: clusters
          schema:
            type: string
          description: Cluster(s) to dump traces of. Ex. c1,c2
        - in: query
          name: agents
          schema:
            type: string
          description: Agents(s) to dump traces of. Ex. a1,a2
        - in: query
          name: instances
          schema:
            type: string
          description: Instances(s) to dump traces of. Ex. 1,2
        - in: query
          name: services
          schema:
            type: string
          description: Services to dump traces of. Ex. reds3
        - in: query
          name: daemons
          schema:
            type: string
          description: Daemons to dump traces of. Ex. client@host1
      responses:
        "200":
          description: Trace logs dumped
      security:
        - jwt: []

  /trace/log/levels:
    get:
      tags:
        - TRACE
      description: Get trace log levels
      operationId: trace_log_levels_get
      parameters:
        - in: query
          name: target_type
          schema:
            type: string
          description: Target type. Ex. redapi, hmi, redsetup or all
        - in: query
          name: targets
          schema:
            type: string
          description: Host names of target(s). Ex. host1,host2 (default all)
      responses:
        "200":
          description: Get trace log level
      security:
        - jwt: []
    post:
      tags:
        - TRACE
      description: Set trace log levels
      operationId: trace_log_levels_set
      parameters:
        - in: query
          name: target_type
          schema:
            type: string
          description: Target type. Ex. redapi, hmi, redsetup or all
        - in: query
          name: targets
          schema:
            type: string
          description: Host names of target(s). Ex. host1,host2 (default all)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/trace_log"
      responses:
        "200":
          description: Trace log level set
      security:
        - jwt: []

  /trace/log/level:
    get:
      tags:
        - TRACE
      description: Get trace log level (local)
      operationId: trace_log_level_get
      parameters:
        - in: query
          name: target_type
          schema:
            type: string
          description: Target type. Ex. redapi, hmi, redsetup or all
      responses:
        "200":
          description: Get trace log level
      security:
        - jwt: []
    post:
      tags:
        - TRACE
      description: Set trace log level (local)
      operationId: trace_log_level_set
      parameters:
        - in: query
          name: target_type
          schema:
            type: string
          description: Target type. Ex. redapi, hmi, redsetup or all
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/trace_log"
      responses:
        "200":
          description: Trace log level set
      security:
        - jwt: []

  #Support Session (IntelliShell) Resources
  /sessions:
    get:
      tags:
        - SUPPORT
      description: Get list of support sessions for all realm nodes
      operationId: controllers.sessions.list
      responses:
        "200":
          description: List of support sessions for all realm nodes
          content:
            application/json:
              schema:
                type: string #TODO
      security:
        - jwt: []

  /sessions/{node}:
    get:
      tags:
        - SUPPORT
      summary: Get status of support session on the specified node
      operationId: controllers.sessions.status
      description: Get status of support session on the specified node
      parameters:
        - $ref: "#/components/parameters/single_node_pathparam"
      responses:
        "200":
          description: Get status of support session on the specified node
          content:
            application/json:
              schema:
                type: string #TODO
        "404":
          description: Node not found
      security:
        - jwt: []
    post:
      tags:
        - SUPPORT
      summary: Start a support session for the specified node
      operationId: controllers.sessions.start
      description: Start a support session for the specified node
      parameters:
        - $ref: "#/components/parameters/single_node_pathparam"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/session_properties"
      responses:
        "201":
          description: Success - started support session
        "400":
          description: Malformed properties
        "404":
          description: Node not found (is realm configured?)
      security:
        - jwt: []
    put:
      tags:
        - SUPPORT
      summary: Set properties for active support session on the specified node
      operationId: controllers.sessions.properties
      description: Set properties for active support session on the specified node
      parameters:
        - $ref: "#/components/parameters/single_node_pathparam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/session_properties"
      responses:
        "204":
          description: Properties for active support session on the specified node
        "400":
          description: Malformed properties or session is not active
        "404":
          description: Node not found (is realm configured?)
      security:
        - jwt: []
    delete:
      tags:
        - SUPPORT
      summary: Delete active support session on the specified node
      operationId: controllers.sessions.stop
      description: Delete active support session on the specified node
      parameters:
        - $ref: "#/components/parameters/single_node_pathparam"
      responses:
        "204":
          description: Success - deleted support session
        "404":
          description: Node not found
      security:
        - jwt: []

  /sessions/{node}/token:
    get:
      tags:
        - SUPPORT
      summary: Get token for active support session on the specified node
      operationId: controllers.sessions.token
      description: Get token for active support session on the specified node
      parameters:
        - $ref: "#/components/parameters/single_node_pathparam"
      responses:
        "200":
          description: Token for active support session on the specified node
          content:
            application/json:
              schema:
                type: string
            text/plain:
              schema:
                type: string
        "400":
          description: Session is not active
        "404":
          description: Node not found
      security:
        - jwt: []
    post:
      tags:
        - SUPPORT
      summary: Create new token for active support session on the specified node
      operationId: controllers.sessions.newtoken
      description: Create new token for active support session on the specified node
      parameters:
        - $ref: "#/components/parameters/single_node_pathparam"
      responses:
        "201":
          description: Token for active support session on the specified node
          content:
            application/json:
              schema:
                type: string
            text/plain:
              schema:
                type: string
        "400":
          description: Session is not active
        "404":
          description: Node not found
      security:
        - jwt: []

  /sessions/{node}/lifetime:
    get:
      tags:
        - SUPPORT
      summary: Get remaining lifetime for active support session on the specified node
      operationId: controllers.sessions.get_lifetime
      description: Get remaining lifetime for active support session on the specified node
      parameters:
        - $ref: "#/components/parameters/single_node_pathparam"
      responses:
        "200":
          description: Remaining lifetime for active support session on the specified node
          content:
            application/json:
              schema:
                type: string
            text/plain:
              schema:
                type: string
        "400":
          description: Session is not active
        "404":
          description: Node not found
      security:
        - jwt: []
    put:
      tags:
        - SUPPORT
      summary: Set new lifetime, relative to the present, for active support session on the specified node
      operationId: controllers.sessions.set_lifetime
      description: Set new lifetime, relative to the present, for active support session on the specified node
      parameters:
        - $ref: "#/components/parameters/single_node_pathparam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/lifetime_type"
      responses:
        "204":
          description: Success - set new lifetime, relative to the present, for active support session on the specified node
        "400":
          description: Malformed lifetime value or session is not active
        "404":
          description: Node not found
      security:
        - jwt: []

  /sessions/{node}/audit_email:
    get:
      tags:
        - SUPPORT
      summary: Get audit email for active support session on the specified node
      operationId: controllers.sessions.get_audit_email
      description: Get audit email for active support session on the specified node
      parameters:
        - $ref: "#/components/parameters/single_node_pathparam"
      responses:
        "200":
          description: Audit email for active support session on the specified node
          content:
            application/json:
              schema:
                type: string
            text/plain:
              schema:
                type: string
        "400":
          description: Session is not active
        "404":
          description: Node not found
      security:
        - jwt: []
    put:
      tags:
        - SUPPORT
      summary: Set audit email for active support session on the specified node
      operationId: controllers.sessions.set_audit_email
      description: Set audit email for active support session on the specified node
      parameters:
        - $ref: "#/components/parameters/single_node_pathparam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/audit_email_type"
      responses:
        "204":
          description: Success - set audit email for active support session on the specified node
        "400":
          description: Malformed email address or session is not active
        "404":
          description: Node not found
      security:
        - jwt: []

  /networks:
    post:
      tags:
        - REDAPI
      description: Reconfigure networks
      operationId: controllers.networks.reconfigure
      parameters:
      - in: query
        name: instances
        schema:
          type: string
        description: Instances list (default is all instances)
      - in: query
        name: cluster
        schema:
          type: string
        description: Cluster name
      responses:
        "200":
          description: Network reconfigured
      security:
        - jwt: []

  /networks/health-report:
    get:
      tags:
        - REDAPI
      description: Get a network health report
      operationId: controllers.networks.health-report
      parameters:
      - name: cluster
        in: query
        description: cluster name
        required: true
        schema:
          type: string
      - name: instances
        in: query
        description: report network health between the specified instance(s) (defaults to all if none given)
        required: false
        schema:
          type: string
      - name: client_types
        in: query
        description: report network health between client-instances of the given type
        required: false
        schema:
          type: string
      - name: output_file
        in: query
        description: output file (defaults to $RED_LOGDIR/utils/network-health-<date-string>.html)
        required: false
        schema:
          type: string
      responses:
        "200":
          description: network health reported
      security:
        - jwt: []

  /telemetry/export/add:
    post:
      tags:
        - REDAPI
      description: Add new telemetry export target
      operationId: controllers.telemetry.Add
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/telemetry_export"
            example:
              name: "loki"
              target: "logs"
              action: "add"
              args: '{"endpoint": "http://loki.olly.mydomain.com:3100/otlp", "protocol": "otlphttp"}'
        required: true
      responses:
        "201":
          description: Telemetry export target added successfully
      security:
        - jwt: []

  /telemetry/export/update:
    post:
      tags:
        - REDAPI
      description: Add new telemetry export target
      operationId: controllers.telemetry.Update
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/telemetry_export"
            example:
              name: "loki"
              target: "logs"
              action: "update"
              args: '{"endpoint": "http://loki.olly.mydomain.com:3100/otlp", "protocol": "otlphttp"}'
        required: true
      responses:
        "201":
          description: Telemetry export target added successfully
      security:
        - jwt: []

  /telemetry/export/delete:
    post:
      tags:
        - REDAPI
      description: Add new telemetry export target
      operationId: controllers.telemetry.Delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/telemetry_export"
            example:
              name: "loki"
              target: "logs"
              action: "delete"
        required: true
      responses:
        "201":
          description: Telemetry export target added successfully
      security:
        - jwt: []

  /telemetry/export/list:
    get:
      tags:
        - REDAPI
      description: list telemetry export targets
      operationId: controllers.telemetry.List
      parameters:
        - $ref: "#/components/parameters/telemetry_type"
      responses:
        "200":
          description: Get all export targets
      security:
        - jwt: []

servers:
  - url: /redapi/v1
  - url: https://{host}/redapi/v1
    variables:
      host:
        default: localhost

components:
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: controllers.user.authenticate_token

  parameters:
    agent_subtype:
      name: agent_subtype
      description: The subtype of agents
      in: path
      required: true
      schema:
        type: string
        enum:
          - "all"
          - "instance"
          - "reds3"
    
    abnormal:
      name: abnormal
      description: Include only items with abnormal state
      in: header
      required: false
      allowEmptyValue: true
      schema:
        type: boolean
    
    # cat_id:
    #   name: cat_id
    #   description: CAT number (integer)
    #   in: path
    #   required: true
    #   schema:
    #     type: string
    #     pattern: ^.*
    
    # cat_udid:
    #   name: cat_udid
    #   description: CAT UDID
    #   in: path
    #   required: true
    #   schema:
    #     type: string
    #     pattern: ^.*
    
    cat_uuid:
      name: cat_uuid
      description: CAT UUID
      in: path
      required: true
      schema:
        type: string
        pattern: ^.*
    
    domain:
      name: domain
      description: network domain
      in: path
      required: true
      schema:
        type: string
        pattern: ^.*
    
    host:
      name: host
      description: ip or hostname
      in: path
      required: true
      schema:
        type: string
        pattern: ^.*
    
    daemon_uuid:
      name: daemon_uuid
      description: Unique identifier daemon
      in: path
      required: true
      schema:
        type: string
        pattern: ^.*
    
    pool_uuid:
      name: pool_uuid
      description: Unique identifier for pool within a cluster and config
      in: path
      required: true
      schema:
        type: string
        pattern: ^.*
    
    # pool_name:
    #   name: pool_name
    #   description: Name of a pool within a cluster and config
    #   in: path
    #   required: true
    #   schema:
    #     type: string
    #     pattern: ^.*
    
    pool:
      name: pool
      description: Name or UUID of a pool within a cluster and config
      in: header
      required: false
      schema:
        type: string
        pattern: ^.*
    
    task_uuid:
      name: task_uuid
      description: UUID of the task for which details need to be fetched
      in: path
      required: true
      schema:
        type: string
        pattern: ^.*
    
    instance_id:
      name: instance_id
      description: Unique identifier for instance
      in: path
      required: true
      schema:
        type: string
        pattern: ^.*
    
    user_id:
      name: user_id
      description: User unique identifier
      in: header
      required: true
      schema:
        type: string
        pattern: ^[\w0-9 \.]+
    
    user_id_optional:
      name: user_id_optional
      description: User unique identifier (optional)
      in: header
      required: false
      schema:
        type: string
        pattern: ^[\w0-9 \.]+
    
    users:
      name: users
      description: Comma separated user identifiers
      in: header
      required: true
      schema:
        type: string
        pattern: ^[\w0-9 \.,]+
    
    from:
      name: from
      description: Start listing from (optional)
      in: header
      required: false
      schema:
        type: string
        pattern: ^[\w0-9 \.]+
    
    cookie:
      name: cookie
      description: Listing cookie to continue (optional)
      in: header
      required: false
      schema:
        type: string
        pattern: ^.*
    
    next:
      name: next
      description: Listing next option to continue (optional)
      in: header
      required: false
      schema:
        type: string
        pattern: ^.*
    
    limit:
      name: limit
      description: Limit the size of listing (optional)
      in: header
      required: false
      schema:
        type: integer
    
    configinstances:
      name: configinstances
      description: Number of Prometheus instances
      in: header
      required: false
      schema:
        type: integer
    
    address-type-ip:
      name: address-type-ip
      description: Get prometheus config by IP address instead of hostname
      in: header
      required: false
      schema:
        type: boolean
    
    filter:
      name: filter
      description: Partial text search (optional)
      in: header
      required: false
      schema:
        type: string
        pattern: ^[a-zA-Z0-9_-]+$
    
    keyword:
      name: keyword
      description: Keyword text search (optional)
      in: header
      required: false
      schema:
        type: string
        pattern: ^[a-zA-Z0-9_-]+$
    
    user_filter_field:
      name: field
      description: Text search field (optional)
      in: header
      required: false
      schema:
        type: string
        pattern: (user|name|email)
    
    group_filter_field:
      name: field
      description: Text search field (optional)
      in: header
      required: false
      schema:
        type: string
        pattern: (name|about)
    
    subtenant_filter_field:
      name: field
      description: Text search field (optional)
      in: header
      required: false
      schema:
        type: string
        pattern: (name|quota|usage|ratio|priority|admin)
    
    volume_filter_field:
      name: field
      description: Text search field (optional)
      in: header
      required: false
      schema:
        type: string
        pattern: (name|capacity|export)
    
    flavors:
      name: flavors
      description: Dataset flavors (optional)
      in: header
      required: false
      schema:
        type: string
        pattern: ((none|block|s3|posix|s3_pref|posix_pref)(,?))+
    
    activation_token:
      name: activation_token
      description: License activation token
      in: header
      required: false
      schema:
        type: string
        pattern: ^[\w0-9\-]+
    
    regenerate:
      name: regenerate
      description: Regenerate realm uuid(guid)
      in: header
      required: false
      allowEmptyValue: true
      schema:
        type: boolean
    
    license_field:
      name: license_field
      description: License field
      in: header
      required: true
      schema:
        type: string
        pattern: ^.*
    
    name:
      name: name
      description: User name
      in: header
      required: false
      schema:
        type: string
        pattern: ^[\w0-9 \.]+
    
    email:
      name: email
      description: User email
      in: header
      required: false
      schema:
        type: string
        pattern: ^[^@]+@[^@]+
    
    password:
      name: password
      description: User password
      in: header
      required: false
      schema:
        type: string
        pattern: ^.*
    
    current_password:
      name: current_password
      description: Current user password
      in: header
      required: true
      schema:
        type: string
        pattern: ^.*
    
    new_password:
      name: new_password
      description: New user password
      in: header
      required: true
      schema:
        type: string
        pattern: ^.*
    
    newpass:
      name: newpass
      description: Need password change on next login
      in: header
      required: false
      allowEmptyValue: true
      schema:
        type: boolean
    
    level:
      name: level
      description: User level
      in: header
      required: false
      schema:
        type: string
        pattern: ^.*
    
    caps:
      name: caps
      description: User capabilities
      in: header
      required: false
      schema:
        type: string
        pattern: ^.*
    
    subtenant_admins:
      name: subtenant_admins
      description: Subtenants admins
      in: header
      required: false
      schema:
        type: string
        pattern: ^.*
    
    subtenant_viewers:
      name: subtenant_viewers
      description: Subtenants viewers
      in: header
      required: false
      schema:
        type: string
        pattern: ^.*
    
    about:
      name: about
      description: Group description
      in: header
      required: false
      schema:
        type: string
        pattern: ^.+
    
    group:
      name: group
      description: User group
      in: header
      required: false
      schema:
        type: string
        pattern: ^[\w0-9]+
    
    groups:
      name: groups
      description: User groups (teams)
      in: header
      required: false
      schema:
        type: string
        pattern: ^([\w0-9]+)(,([\w0-9]+))*
    
    group_filter:
      name: group_filter
      description: Group filter
      in: header
      required: true
      schema:
        type: string
        pattern: ^.+
    
    identity:
      name: identity
      description: Identity service name
      in: header
      required: false
      schema:
        type: string
        pattern: ^[\w0-9]+
    
    identity_id:
      name: identity_id
      description: Identity provider unique identifier
      in: header
      required: true
      schema:
        type: string
        pattern: ^[\w0-9]+
    
    identity_type:
      name: identity_type
      description: Identity provider type (ad,ldap or openid)
      in: header
      required: true
      schema:
        type: string
        pattern: (ad|ldap|openid)
    
    openid_code:
      name: openid_code
      description: Code returned by openid identity provider
      in: header
      required: true
      schema:
        type: string
        pattern: ^[\w0-9]+
    
    cert_expiration:
      name: cert_expiration
      description: Client certificate expiration
      in: header
      required: false
      schema:
        type: string
        pattern: ^[0-9]+[dmy]+
    
    key_valid:
      name: key_valid
      description: Key validity duration
      in: header
      required: false
      schema:
        type: string
        pattern: ^[0-9]+[dmy]+
    
    all:
      name: all
      description: Get list for all users
      in: header
      required: false
      allowEmptyValue: true
      schema:
        type: boolean
    
    all_cats:
      name: all_cats
      description: Apply to all CATs
      in: query
      required: false
      allowEmptyValue: true
      schema:
        type: boolean
    
    cat_ids:
      name: cat_ids
      description: CAT IDs separated by comma
      in: query
      required: false
      allowEmptyValue: true
      schema:
        type: string
        pattern: ^.*
    
    # subtenants:
    #   name: subtenants
    #   description: S3 subtenants separated by comma
    #   in: header
    #   required: false
    #   schema:
    #     type: string
    #     pattern: ^[\w0-9,]+
    
    service:
      name: service
      description: RED service
      in: header
      required: false
      schema:
        type: string
        pattern: ^.+
    
    node:
      name: node
      description: RED node hostname or address
      in: header
      required: false
      schema:
        type: string
        pattern: ^.+
    
    s3_key:
      name: s3_key
      description: S3 access key
      in: header
      required: true
      schema:
        type: string
        pattern: ^[A-Z0-9]{20}
    
    s3_key_optional:
      name: s3_key_optional
      description: S3 access key
      in: header
      required: false
      schema:
        type: string
        pattern: ^[A-Z0-9]{20}
    
    rsa_md5:
      name: rsa_md5
      description: RSA key md5
      in: header
      required: true
      schema:
        type: string
        pattern: ^[a-f0-9]{32}
    
    rsa_size:
      name: rsa_size
      description: RSA key size
      in: header
      required: false
      schema:
        type: integer
    
    s3_port:
      name: s3_port
      description: S3 listening port
      in: header
      required: false
      schema:
        type: integer
    
    s3_non_tls_port:
      name: s3_non_tls_port
      description: non-TLS S3 listening port
      in: header
      required: false
      schema:
        type: integer
        default: -1
    
    s3_subnet:
      name: s3_subnet
      description: S3 subnet
      in: header
      required: false
      schema:
        type: string
        pattern: ^[0-9\.]+
    
    # s3_hostname_header:
    #   name: s3_hostname_header
    #   description: S3 hostname header
    #   in: header
    #   required: false
    #   schema:
    #     type: string
    
    s3_vhost:
      name: s3_vhost
      description: S3 vhost
      in: header
      required: true
      schema:
        type: string
    
    bucket:
      name: bucket
      description: S3 bucket name
      in: header
      required: true
      schema:
        type: string
        pattern: ^[\w0-9]+
    
    bucket_optional:
      name: bucket_optional
      description: S3 bucket name
      in: header
      required: false
      schema:
        type: string
        pattern: ^[\w0-9]+
    
    bulk_quota:
      name: bulk_quota
      description: Bulk quota
      in: header
      required: false
      schema:
        type: integer
    
    # servicename:
    #   name: servicename
    #   description: Block service name
    #   in: header
    #   required: false
    #   schema:
    #     type: string
    
    # endpoint_name:
    #   name: endpoint_name
    #   description: S3 replication endpoint
    #   in: header
    #   required: true
    #   schema:
    #     type: string
    #     pattern: ^[\w0-9]+
    
    # endpoint_name_optional:
    #   name: endpoint_name_optional
    #   description: S3 replication endpoint
    #   in: header
    #   required: false
    #   schema:
    #     type: string
    #     pattern: ^[\w0-9]+
    
    # replication_id:
    #   name: replication_id
    #   description: S3 replication id
    #   in: header
    #   required: true
    #   schema:
    #     type: string
    #     pattern: ^[\w0-9]+
    
    # bandwidth:
    #   name: bandwidth
    #   description: S3 replication bandwidth
    #   in: header
    #   required: false
    #   schema:
    #     type: integer
    
    # threads:
    #   name: threads
    #   description: S3 replication threads
    #   in: header
    #   required: false
    #   schema:
    #     type: integer
    
    # repetition:
    #   name: repetition
    #   description: S3 complete replication repetition
    #   in: header
    #   required: false
    #   schema:
    #     type: integer
    
    # enablement:
    #   name: enablement
    #   description: S3 replication enablement
    #   in: header
    #   required: false
    #   schema:
    #     type: string
    #     pattern: enabled|disabled
    
    # replication_id_optional:
    #   name: replication_id_optional
    #   description: S3 replication id
    #   in: header
    #   required: false
    #   schema:
    #     type: string
    #     pattern: ^[\w0-9]+
    
    cert_name:
      name: cert_name
      description: Client certificate name
      in: header
      required: false
      schema:
        type: string
        pattern: ^[\w0-9]+
    
    cluster_name:
      name: cluster_name
      description: Unique identifier for cluster
      in: path
      required: true
      schema:
        type: string
        pattern: ^.*
    
    test_uuid:
      name: test_uuid
      description: Unique identifier for network test
      in: path
      required: true
      schema:
        type: string
        pattern: ^.*
    
    config_name:
      name: config_name
      description: Unique identifier for config within a cluster
      in: path
      required: true
      schema:
        type: string
    
    dp_profile_name:
      name: dp_profile_name
      description: Unique identifier for dp_profile within a cluster
      in: path
      required: true
      schema:
        type: string
    
    new_profile_name:
      name: new_profile_name
      description: Unique identifier for dp_profile within a cluster
      in: path
      required: true
      schema:
        type: string
    
    volume_name:
      name: volume_name
      description: Name of volume to add/attach
      in: path
      required: true
      schema:
        type: string
    
    # volumeName:
    #   name: volumeName
    #   description: Name of volume to unexpose
    #   in: path
    #   required: true
    #   schema:
    #     type: string
    
    # dest_volume_name:
    #   name: dest_volume_name
    #   description: Name of volume which needs to be cloned from master/source volume
    #   in: path
    #   required: true
    #   schema:
    #     type: string
    
    subsystem_name:
      name: subsystem_name
      description: NVME subsystem name for NVMF device.
      in: path
      required: true
      schema:
        type: string
    
    dataset_name:
      name: dataset_name
      in: path
      description: Dataset name
      required: true
      schema:
        type: string
    
    snapshot_id:
      name: snapshot_id
      in: path
      description: Snapshot ID
      required: true
      schema:
        type: integer
    
    vhost_ctrlr_name:
      name: vhost_ctrlr_name
      description: Name of Vhost controller to add/attach
      in: path
      required: true
      schema:
        type: string
    
    # instID:
    #   name: instID
    #   description: Instance ID for volume/vhost operations
    #   in: query
    #   required: true
    #   schema:
    #     type: string
    #     pattern: ^[\w0-9]+
    
    # tenant:
    #   name: tenant
    #   description: Tenant Name
    #   in: query
    #   required: true
    #   schema:
    #     type: string
    #     pattern: ^[\w0-9]+
    
    # subtenant:
    #   name: subtenant
    #   description: Subtenant Name
    #   in: query
    #   required: true
    #   schema:
    #     type: string
    #     pattern: ^[\w0-9]+
    
    tenant_name:
      name: tenant_name
      in: path
      description: Tenant name
      required: true
      schema:
        type: string
        pattern: ^[\w0-9]+
    
    subtenant_name:
      name: subtenant_name
      in: path
      description: Subtenant name
      required: true
      schema:
        type: string
        pattern: ^[\w0-9]+
    
    servicetype:
      name: servicetype
      description: Service type
      in: header
      required: false
      schema:
        type: string
        pattern: ^.*
    
    service_name:
      name: service_name
      description: Service name
      in: path
      required: true
      schema:
        type: string
        pattern: ^.*
    
    targettype:
      name: targettype
      description: Target type
      in: header
      required: true
      schema:
        type: string
        pattern: ^.*
    
    targetname:
      name: targetname
      description: Target name
      in: header
      required: true
      schema:
        type: string
        pattern: ^.*
    
    # tenant_header:
    #   name: tenant
    #   description: Tenant Name
    #   in: header
    #   required: true
    #   schema:
    #     type: string
    #     pattern: ^[\w0-9]+
    
    # subtenant_header:
    #   name: subtenant
    #   description: Subtenant Name
    #   in: header
    #   required: true
    #   schema:
    #     type: string
    #     pattern: ^[\w0-9]+
    
    # dataset:
    #   name: dataset
    #   description: Dataset Name
    #   in: query
    #   required: true
    #   schema:
    #     type: string
    #     pattern: ^[\w0-9]+
    
    server_id:
      name: server_id
      description: Unique identifier for server
      in: path
      required: true
      schema:
        type: string
        pattern: ^.*
    
    detailed:
      name: detailed
      description: >-
        A query flag that indicates to use a new version of a specific method.
        This parameter saves backward compatibility, and the response
        creates a new format.
      in: query
      required: false
      allowEmptyValue: true
      schema:
        type: boolean
    
    nodetails:
      name: nodetails
      description: Omit response details
      in: query
      required: false
      allowEmptyValue: true
      schema:
        type: boolean
    
    pool_details:
      name: detailed
      description: Add pool details (CATs)
      in: query
      required: false
      allowEmptyValue: true
      schema:
        type: boolean
    
    drive_id:
      name: drive_id
      description: Unique identifier for drive
      in: path
      required: true
      schema:
        type: string
        pattern: ^.*
    
    pci_bdf:
      name: pci_bdf
      description: PCI ID of device
      in: path
      required: true
      schema:
        type: string
        pattern: ^.*
    
    # sensor_id:
    #   name: sensor_id
    #   description: Unique identifier for sensor
    #   in: path
    #   required: true
    #   schema:
    #     type: string
    #     pattern: ^.*
    
    fru_id:
      name: fru_id
      description: Unique identifier for fru
      in: path
      required: true
      schema:
        type: string
        pattern: ^.*
    
    nic_id:
      name: nic_id
      description: Unique identifier for nic
      in: path
      required: true
      schema:
        type: string
        pattern: ^.*
    
    single_node_pathparam:
      name: node
      in: path
      required: true
      description: Hostname or control plane IP address of a single node
      schema:
        oneOf:
          - type: string
            format: ipv4
            pattern: ^(?:(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
          - type: string
            format: hostname
            pattern: ^(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])(?:\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]))*$
    
    alertid:
      name: alertid
      description: alertid
      in: header
      required: true
      schema:
        type: string
        pattern: ^.*
    
    integrationid:
      name: integrationid
      description: integrationid
      in: query
      required: true
      schema:
        type: string
        pattern: ^.*
    
    offset:
      name: offset
      description: offset the size of listing (optional)
      in: header
      required: false
      schema:
        type: integer
    
    sort:
      name: sort
      description: sortby
      in: header
      required: false
      schema:
        type: string
        pattern: ^.*
    
    alertconfig_id:
      name: alertid
      description: alertid
      in: header
      required: true
      schema:
        type: string
        pattern: ^.*
    
    actionchannel_id:
      name: alertid
      description: alertid
      in: header
      required: true
      schema:
        type: string
        pattern: ^.*
    
    # query:
    #   name: query
    #   description: query
    #   in: header
    #   required: false
    #   schema:
    #     type: string
    #     pattern: ^.*
    
    oldest:
      name: oldest
      description: filter events older
      in: header
      required: false
      schema:
        type: string
        pattern: ^.*
    
    latest:
      name: latest
      description: filter events newer
      in: header
      required: false
      schema:
        type: string
        pattern: ^.*
    
    search:
      name: search
      description: search events
      in: header
      required: false
      schema:
        type: string
        pattern: ^.*
    
    alert:
      name: alert
      description: filter events based upon alert id
      in: header
      required: false
      schema:
        type: string
        pattern: ^.*
    
    severity:
      name: severity
      description: filter events basedupon severity
      in: header
      required: false
      schema:
        type: string
        pattern: ^.*
    
    source:
      name: source
      description: filter events based upon source
      in: header
      required: false
      schema:
        type: string
        pattern: ^.*
    
    hostname:
      name: hostname
      description: filter events based upon host or uuid
      in: header
      required: false
      schema:
        type: string
        pattern: ^.*
    
    regex:
      name: regex
      description: filter events based upon regex
      in: header
      required: false
      schema:
        type: string
        pattern: ^.*
    
    type:
      name: type
      description: filter events based upon type
      in: header
      required: false
      schema:
        type: string
        pattern: ^.*
    
    cluster:
      name: cluster
      description: filter events based upon cluster
      in: header
      required: false
      schema:
        type: string
        pattern: ^.*
    
    instance:
      name: instance
      description: filter events based upon instance
      in: header
      required: false
      schema:
        type: string
        pattern: ^.*
    
    timeout:
      name: timeout
      description: timeout (optional)
      in: header
      required: false
      schema:
        type: integer
    
    # uuid_filter_field:
    #   name: uuid_filter
    #   description: filter by uuid
    #   in: header
    #   required: false
    #   schema:
    #     type: string
    #     pattern: ^.*
    
    type_filter_field:
      name: type_filter
      description: filter by type
      in: header
      required: false
      schema:
        type: string
        pattern: ^.*
    
    after_timestamp_filter_field:
      name: after_filter
      description: filter for events that occurred after the given timestamp
      in: header
      required: false
      schema:
        type: string
        format: date-time
    
    before_timestamp_filter_field:
      name: before_filter
      description: filter for events that occurred before the given timestamp
      in: header
      required: false
      schema:
        type: string
        format: date-time
    
    status_filter_field:
      name: status_filter
      description: filter by status
      in: header
      required: false
      schema:
        type: string
        pattern: ^.*
    
    telemetry_type:
      name: telemetry_type
      description: telemetry type logs, events, metrics, traces
      in: query
      required: true
      schema:
        type: string
        pattern: ^.*
    
    profile:
      name: profile
      description: Profile name
      in: header
      required: false
      schema:
        type: string
        pattern: ^.*

  schemas:
    clusters_resp:
      description: Clusters response data
      nullable: true
      oneOf:
        - type: object
    
    cluster_resp:
      description: Clusters response data
      nullable: true
      oneOf:
        - type: object
    
    cluster_logs_resp:
      description: Cluster logs response data
      nullable: true
      oneOf:
        - type: object
          properties:
            uuid:
              description: Logs uuid
              type: string
              example: "d029a810-e5c1-4f61-8360-61b8f5a4fd8d"
            file_url:
              description: Logs file url
              type: string
              example: "/var/log/red/uploads/medium_20240305130217-5f18ef6e-8197-472d-9f3b-b2a598cb44e7.tar"
            dryrun:
              description: Dry run result
              type: boolean
              example:
            node_fs_stats:
              type: array
              items:
                type: object
                properties:
                  err:
                    type: string
                    description: Indicates error while getting the file system stats for the node, empty string respresents no error.
                    example: "<head><title>502 Bad Gateway</title></head>"
                  node_name:
                    type: string
                    description: Name of the node
                    example: "redvm-1"
                  free_amount:
                    type: number
                    example: 65555226624
                    minimum: 0
                    description: Free space available in bytes (uint64) on the file system of the node
                  total_amount:
                    type: number
                    example: 96450166784
                    minimum: 0
                    description: Total space in bytes (unit64) of the file system
                  fspath:
                    type: string
                    example: "/"
                    description: Path of the file system
    
    cluster_runtime_resp:
      description: Cluster runtime config response data
      nullable: true
      oneOf:
        - type: object
    
    create_tenant_resp:
      description:  Create tenant response data
      nullable: true
      oneOf:
        - type: object
          properties:
            tenant_result:
              description: Create tenant response code
              type: integer
              example: 201
            admin_result:
              description: Create tenant admin response code
              type: integer
              example: 201
    
    list_datasets_resp:
      description: List datasets response data
      nullable: true
      oneOf:
        - type: object
          properties:
            datasets:
              description: List datasets
              type: array
              items:
                type: string
                example: "red"
    
    get_dataset_resp:
      description: Get dataset response data
      nullable: true
      oneOf:
        - type: object
          properties:
            dataset:
              $ref: '#/components/schemas/dataset'
    
    get_volume_resp:
      description: Get volume response data
      nullable: true
      oneOf:
        - type: object
          properties:
            volume:
              description: Volume response data
              type: object
              properties:
                uuid:
                  description: uuid
                  type: string
                  example: "a1eb4d8a-9677-41ff-8f92-d4d37375f534"
                name:
                  description: Volume name
                  type: string
                  example: "vol01"
                volumeid:
                  description: Volume ID
                  type: integer
                  example: 1
                wwn:
                  description: wwn
                  type: string
                  example: "21f30001ffbae8ac"
                sn:
                  description: Serial number
                  type: string
                  example: "00000B00000Bin2RPEW0"
                block_size:
                  description: Block size
                  type: integer
                  example: 4096
                nblocks:
                  description: Number of blocks
                  type: integer
                  example: 2441407
                lcore:
                  description: lcore
                  type: integer
                  example: 1
                xattrs:
                  description: Volume xattrs
                  type: object
    
    update_volume_resp:
      description: Update volume response data
      nullable: true
      oneOf:
        - type: object
          properties:
            volume:
              description: Volume response data
              type: object
              properties:
                uuid:
                  description: uuid
                  type: string
                  example: "a1eb4d8a-9677-41ff-8f92-d4d37375f534"
                name:
                  description: Volume name
                  type: string
                  example: "vol01"
                volumeid:
                  description: Volume ID
                  type: integer
                  example: 1
                wwn:
                  description: wwn
                  type: string
                  example: "21f30001ffbae8ac"
                sn:
                  description: Serial number
                  type: string
                  example: "00000B00000Bin2RPEW0"
                block_size:
                  description: Block size
                  type: integer
                  example: 4096
                nblocks:
                  description: Number of blocks
                  type: integer
                  example: 2441407
                lcore:
                  description: lcore
                  type: integer
                  example: 1
                xattrs:
                  description: Volume xattrs
                  type: object
    
    list_snapshots_resp:
      description: Get a list of snapshots
      nullable: true
      oneOf:
        - type: object
          properties:
            snapshots:
              type: array
              items:
                type: integer
                example: 124281052725248
    
    list_volumes_resp:
      description: List volumes response data
      nullable: true
      oneOf:
        - type: array
          items:
            type: object
            properties:
              volume:
                description: Volume response data
                type: object
                properties:
                  uuid:
                    description: uuid
                    type: string
                    example: "a1eb4d8a-9677-41ff-8f92-d4d37375f534"
                  name:
                    description: Volume name
                    type: string
                    example: "vol01"
                  volumeid:
                    description: Volume ID
                    type: integer
                    example: 1
                  wwn:
                    description: wwn
                    type: string
                    example: "21f30001ffbae8ac"
                  sn:
                    description: Serial number
                    type: string
                    example: "00000B00000Bin2RPEW0"
                  block_size:
                    description: Block size
                    type: integer
                    example: 4096
                  nblocks:
                    description: Number of blocks
                    type: integer
                    example: 2441407
                  lcore:
                    description: lcore
                    type: integer
                    example: 1
                  xattrs:
                    description: Volume xattrs
                    type: object
    
    tenants_resp:
      description: List tenants response data
      nullable: true
      oneOf:
        - type: object
        - type: array
          items:
            type: object
    
    get_tenant_resp:
      description: Get tenant response data
      nullable: true
      oneOf:
        - type: object
          properties:
            tenant:
              description: Tenant response data
              type: object
              properties:
                id:
                  description: ID
                  type: integer
                  example: 17
                name:
                  description: Name
                  type: string
                  example: "red"
                weight:
                  description: Weight
                  type: integer
                  example: 32
                bulk_quota:
                  description: Bulk quota
                  type: integer
                  example: 2078076305408
                usage:
                  description: Usage
                  type: integer
                  example: 0
                xattrs:
                  description: Tenant xattrs
                  type: object
                  properties:
                    RED_INTERNAL:
                      description: RED_INTERNAL
                      type: object
                      properties:
                        primary-admin:
                          description: Primary admin
                          type: string
                          example: "redadmin"
    
    get_subtenant_resp:
      description: Get subtenant response data
      nullable: true
      oneOf:
        - type: object
          properties:
            subtenant:
              description: Subtenant response data
              type: object
              properties:
                id:
                  description: ID
                  type: integer
                  example: 17
                name:
                  description: Name
                  type: string
                  example: "red"
                weight:
                  description: Weight
                  type: integer
                  example: 32
                bulk_quota:
                  description: Bulk quota
                  type: integer
                  example: 2078076305408
                usage:
                  description: Usage
                  type: integer
                  example: 0
                xattrs:
                  description: Tenant xattrs
                  type: object
                  properties:
                    RED_INTERNAL:
                      description: RED_INTERNAL
                      type: object
                      properties:
                        primary-admin:
                          description: Primary admin
                          type: string
                          example: "redadmin"
    
    update_tenant_resp:
      description: Update tenant response data
      nullable: true
      oneOf:
        - type: object
          properties:
            tenant_result:
              description: Update tenant response code
              type: integer
              example: 200
            admin_result:
              description: Update tenant admin response code
              type: integer
              example: 202
    
    update_subtenant_resp:
      description: Update subtenant response data
      nullable: true
      oneOf:
        - type: object
          properties:
            subtenant_result:
              description: Update subtenant response code
              type: integer
              example: 200
            admin_result:
              description: Update subtenant admin response code
              type: integer
              example: 202
    
    list_subtenants_resp:
      description: List subtenants response data
      nullable: true
      oneOf:
        - type: object
          properties:
            subtenants:
              description: List subtenants
              type: array
              items:
                description: Tenant response data
                type: object
                properties:
                  id:
                    description: ID
                    type: integer
                    example: 17
                  name:
                    description: Name
                    type: string
                    example: "red"
                  weight:
                    description: Weight
                    type: integer
                    example: 32
                  bulk_quota:
                    description: Bulk quota
                    type: integer
                    example: 2078076305408
                  usage:
                    description: Usage
                    type: integer
                    example: 0
                  xattrs:
                    description: Tenant xattrs
                    type: object
                    properties:
                      RED_INTERNAL:
                        description: RED_INTERNAL
                        type: object
                        properties:
                          primary-admin:
                            description: Primary admin
                            type: string
                            example: "redadmin"
        - type: array
          items:
            description: Subtenant recurse response data
            type: object
            properties:
              name:
                description: Tenant name
                type: string
                example: "red"
              subtenants:
                description: List subtenants
                type: array
                items:
                  type: object
                  properties:
                    name:
                      description: Subtenant name
                      type: string
                      example: "red"
              users:
                description: Subtenant users
                type: object
    
    create_subtenant_resp:
      description: Create subtenant response data
      nullable: true
      oneOf:
        - type: object
          properties:
            subtenant_result:
              description: Create subtenant response code
              type: integer
              example: 201
            admin_result:
              description: Create subtenant admin response code
              type: integer
              example: 201
    
    vhost_controller_resp:
      description: Create vhost controller response data
      nullable: true
      oneOf:
        - type: object
          properties:
            name:
              description: Name
              type: string
              example: "vhost.1"
            cpumask:
              description: CPU mask
              type: string
              example: "0x2"
            lcore:
              description: Lcore
              type: integer
              example: 1
            timestamp:
              description: Timestamp
              type: integer
              example: 1711981216
            uuid:
              description: Uuid
              type: string
              example: "6a4e9057-ba6a-4d90-adb2-8d4ecf1b6daa"
            version:
              description: Version
              type: string
              example: "1.1"
    
    vhost_controller_volumes_resp:
      description: Vhost controller and volume mapping
      nullable: true
      oneOf:
        - type: object
          properties:
            lcore:
              description: Lcore
              type: integer
              example: 1
            timestamp:
              description: Timestamp
              type: integer
              example: 1711981216
            version:
              description: Version
              type: string
              example: "1.1"
            ctrlrs:
              type: array
              items:
                type: object
                properties:
                  name:
                    description: Name
                    type: string
                    example: "vhost.1"
                  uuid:
                    description: Uuid
                    type: string
                    example: "6a4e9057-ba6a-4d90-adb2-8d4ecf1b6daa"
                  targets:
                    type: array
                    items:
                      type: object
                      properties:
                        uuid:
                          description: Uuid
                          type: string
                          example: "6a4e9057-ba6a-4d90-adb2-8d4ecf1b6daa"
                        volume:
                          description: Volume
                          type: object
                          properties:
                            uuid:
                              description: Uuid
                              type: string
                              example: "c73618ec-34ac-4637-9135-b003fc20bd6f"
                            name:
                              description: Name
                              type: string
                              example: "volume1"
                            target_id:
                              description: Target ID
                              type: integer
                              example: -22
    
    vhost_controller_volume_attach_resp:
      description: Attach volume to vhost controller response data
      nullable: true
      oneOf:
        - type: object
          properties:
            ctrlr:
              type: object
              properties:
                uuid:
                  description: Uuid
                  type: string
                  example: "6a4e9057-ba6a-4d90-adb2-8d4ecf1b6daa"
                name:
                  description: Name
                  type: string
                  example: "vhost.1"
                cpumask:
                  description: Cpu mask
                  type: string
                  example: "0x2"
            id:
              description: Target ID
              type: integer
              example: -22
            lun:
              description: Lun number
              type: integer
              example: 0
            uuid:
              description: Uuid
              type: string
              example: "3223fd05-6951-4d79-9edc-96f2cc1fc6b5"
            volume:
              type: object
              properties:
                volume:
                  description: Volume response data
                  type: object
                  properties:
                    uuid:
                      description: uuid
                      type: string
                      example: "a1eb4d8a-9677-41ff-8f92-d4d37375f534"
                    name:
                      description: Volume name
                      type: string
                      example: "vol01"
                    volumeid:
                      description: Volume ID
                      type: integer
                      example: 1
                    wwn:
                      description: wwn
                      type: string
                      example: "21f30001ffbae8ac"
                    sn:
                      description: Serial number
                      type: string
                      example: "00000B00000Bin2RPEW0"
                    block_size:
                      description: Block size
                      type: integer
                      example: 4096
                    nblocks:
                      description: Number of blocks
                      type: integer
                      example: 2441407
                    lcore:
                      description: lcore
                      type: integer
                      example: 1
                    xattrs:
                      description: Volume xattrs
                      type: object
    
    vhost_controller_volume_detach_resp:
      description: Detach volume from vhost controller response data
      nullable: true
      oneOf:
        - type: object
          properties:
            lcore:
              description: Lcore
              type: integer
              example: 1
            status:
              description: status
              type: string
              example: "removed"
            timestamp:
              description: Timestamp
              type: integer
              example: 1711981728
            version:
              description: Version
              type: string
              example: "1.1"
    
    list_subsystems_resp:
      description: List subsystems response data
      nullable: true
      oneOf:
        - type: object
          properties:
            targets:
              description: List targets
              type: array
              items:
                type: object
                properties:
                  target:
                    description: Target
                    type: string
                    example: "nvmf_tgt"
                  subsystems:
                    description: List subsystems
                    type: array
                    items:
                      description: Subsystem
                      type: object
                      properties:
                        nqn:
                          description: Subsystem nqn
                          type: string
                          example: "nqn.2024-04.com.ddn.red.ten17.sub17:uuid:f16ef301-7963-4618-99f0-3cc6c42aa720"
                        name:
                          description: Subsystem name
                          type: string
                          example: "red.red.volume1.ac"
                        hostuuids:
                          description: Subsystem hosts uuids
                          type: array
                          items:
                            type: string
                            example: "0c1511b0-89f5-460e-819d-df40bc84e8f6"
                        type:
                          description: Subsystem type
                          type: string
                          example: "NVMe"
                        serial_number:
                          description: Serial number
                          type: string
                          example: "00000B000000-EtS3J90"
                        model_number:
                          description: Model number
                          type: string
                          example: "RED Controller"
                        allow_any_host:
                          description: Allow any host
                          type: boolean
                          example: true
                        max_namespaces:
                          description: Max namespaces
                          type: integer
                          example: 0
                        namespaces:
                          description: Namespaces
                          type: array
                          items:
                            description: Subsystem namespace
                            type: object
                            properties:
                              nsid:
                                description: Namespace ID
                                type: integer
                                example: 1
                              dataset:
                                description: Dataset
                                type: string
                                example: "red"
                              nguid:
                                description: Nguid
                                type: string
                                example: "C73618EC34AC46379135B003FC20BD6F"
                              eui64:
                                description: Eui64
                                type: string
                                example: "0000000000000000"
                              uuid:
                                description: Uuid
                                type: string
                                example: "c73618ec-34ac-4637-9135-b003fc20bd6f"
                              volume:
                                description: Volume name
                                type: string
                                example: "volume1"
                              sn:
                                description: Serial number
                                type: string
                                example: "00000B000000-EvbESA0"
                        hosts:
                          description: Hosts
                          type: array
                          items:
                            type: string
                        listeners:
                          description: Listeners
                          type: array
                          items:
                            description: Subsystem listener
                            type: object
                            properties:
                              transport:
                                description: Listener transport
                                type: string
                                example: "TCP"
                              trtype:
                                description: Listener transport type
                                type: string
                                example: "TCP"
                              adrfam:
                                description: Listener transport adrfam
                                type: string
                                example: "IPv4"
                              trsvcid:
                                description: Listener port
                                type: integer
                                example: 4420
                              traddrs:
                                description: Listener IPs
                                type: array
                                items:
                                  type: string
                                  example: "172.25.116.130"
    
    dataset:
      description: Dataset response data
      type: object
      properties:
        id:
          description: ID
          type: integer
          example: 17
        ltid:
          description: Ltid
          type: integer
          example: 1
        name:
          description: Name
          type: string
          example: "red"
        handle:
          description: Handle
          type: string
          example: "AREREQ=="
        nstripes:
          description: nstripes
          type: integer
          example: 128
        ds_nfiles:
          description: ds_nfiles
          type: integer
          example: 0
        ds_ndirs:
          description: ds_ndirs
          type: integer
          example: 1
        start_shard:
          description: start_shard
          type: integer
          example: 534355
        usage:
          description: Usage
          type: integer
          example: 0
        xattrs:
          description: Dataset xattrs
          type: object
          properties:
            block_size:
              description: Block size
              type: integer
              example: 4096
            bucket_size:
              description: Bucket size
              type: integer
              example: 262144
            dp_profile:
              description: dp profile
              type: integer
              example: 1
            ec_nparity:
              description: ec nparity
              type: integer
              example: 2
    
    cluster_monitor_stats_resp:
      description: Cluster monitor stats response data
      nullable: true
      oneOf:
        - type: object
    
    cluster_configs_resp:
      description: Cluster configs response data
      nullable: true
      oneOf:
        - type: object
    
    cluster_config_resp:
      description: Cluster config response data
      nullable: true
      oneOf:
        - type: object
    
    cluster_config_params_resp:
      description: Cluster config params response data
      nullable: true
      oneOf:
        - type: object
    
    cluster_instances_resp:
      description: Cluster instances response data
      nullable: true
      oneOf:
        - type: object
    
    cluster_instance_resp:
      description: Cluster instance response data
      nullable: true
      oneOf:
        - type: object
    
    cluster_start_resp:
      description: Cluster start response data
      nullable: true
      oneOf:
        - type: array
          items:
            type: boolean
            example: true
    
    cluster_dp_profile_resp:
      description: Cluster dp_profiles response data
      nullable: true
      oneOf:
        - type: object
          properties:
            cm:
              type: object
              example: { "1": "SYSTEM_DATA_1" }
    
    cluster_config_pools_resp:
      description: Cluster config pools response data
      nullable: true
      oneOf:
        - type: object
    
    cluster_config_pool_resp:
      description: Cluster config pool response data
      nullable: true
      oneOf:
        - type: object
    
    cats_resp:
      description: Cluster config pool CATs response data
      nullable: true
      oneOf:
        - type: object
    
    cat_resp:
      description: Cluster config pool CAT response data
      nullable: true
      oneOf:
        - type: object
          properties:
            affine_core:
              description: Affine core
              type: integer
              example: 1
            bept_cachesz:
              description: Bept cache size
              type: integer
              example: 214748364
            bept_dirtythd:
              description: Bept dirty trashhold
              type: integer
              example: 75
            bept_fanout:
              description: Bept fanout
              type: integer
              example: 28
            bept_qcachesz:
              description: Bept qcache size
              type: integer
              example: 0
            blocksize:
              description: Blocksize
              type: integer
              example: 4096
            bulk_cachesz:
              description: Bulk cache size
              type: integer
              example: 107374182
            bulk_size:
              description: Bulk size
              type: integer
              example: 262144
            capability:
              description: Capability
              type: integer
              example: 2
            capacity:
              description: Capacity
              type: integer
              example: 129879769088
            cat_id:
              description: CAT id
              type: integer
              example: 8
            csum_alg:
              description: Csum alg
              type: integer
              example: 5
            delete_pending:
              description: Delete pending
              type: boolean
              example: false
            dev_replacement:
              description: Dev replacement
              type: boolean
              example: false
            devnodes:
              description: Dev nodes
              type: object
              additionalProperties:
                $ref: '#/components/schemas/cat_devnode'
            encr_mode:
              description: Encr mode
              type: integer
              example: 1
            evicted_epoch:
              description: Evicted epoch
              type: integer
              example: 0
            evicted_time:
              description: Evicted time
              type: integer
              example: 0
            eviction_catchup_epoch:
              description: Evicted catchup epoch
              type: integer
              example: 1
            eviction_opu:
              description: Eviction opu
              type: integer
              example: 0
            failure_domains:
              description: Failure domains
              type: array
              items:
                type: string
                example: "device:silyin-redvm-2:/dev/sde"
            health:
              description: Health
              type: integer
              example: 1
            heap_size:
              description: Heap size
              type: integer
              example: 0
            instdata:
              description: Instdata
              type: object
              additionalProperties:
                $ref: '#/components/schemas/cat_instdata'
            instpref:
              description: Instpref
              type: array
              items:
                type: string
                example: "e46f94f7-e8aa-4afc-95ce-768cf33ad3e9"
            intlg_size:
              description: Intlg size
              type: integer
              example: 1073741824
            join_uuid:
              description: Join uuid
              type: string
              example: "82795bda-6b9f-43d0-92a7-66d25bcaa8af"
            joined_epoch:
              description: Joined epoch
              type: integer
              example: 7
            layout_weight:
              description: Layout weight
              type: integer
              example: 1
            lcore:
              description: Lcore
              type: integer
              example: 1
            location:
              description: Location
              type: string
              example: "silyin-redvm-2:/dev/sde"
            num_cores:
              description: Num cores
              type: integer
              example: 0
            obj_size:
              description: Object size
              type: integer
              example: 65536
            open_retries:
              description: Open retries
              type: integer
              example: 0
            owner:
              description: Owner
              type: integer
              example: 2
            reinit:
              description: Reinit
              type: integer
              example: 1
            removed_epoch:
              description: Removed epoch
              type: integer
              example: 0
            runmode:
              description: Runmode
              type: integer
              example: 1
            udid:
              description: Udid
              type: string
              example: "silyin-redvm-2:/dev/sde                                     "
    
    
    dp_profile_resp:
      description: Cluster dp_profile response data
      nullable: true
      oneOf:
        - type: object
          properties:
            cm:
              type: object
              properties:
                availability:
                  description: Availability
                  type: integer
                  example: 0
                data_ltid:
                  description: Data ltid
                  type: integer
                  example: 3
                data_poolid:
                  description: Data poolid
                  type: integer
                  example: 1
                efficiency:
                  description: Efficiency
                  type: integer
                  example: 0
                id:
                  description: id
                  type: integer
                  example: 1
                max_stripe:
                  description: Max stripe
                  type: integer
                  example: 0
                meta_ltid:
                  description: Meta ltid
                  type: integer
                  example: 2
                meta_poolid:
                  description: Meta poolid
                  type: integer
                  example: 1
                min_stripe:
                  description: Min stripe
                  type: integer
                  example: 0
                n_write_later:
                  description: Write later number
                  type: integer
                  example: 0
                name:
                  description: dp_profile name
                  type: string
                  example: "SYSTEM_DATA_1"
                policy_id:
                  description: Policy id
                  type: integer
                  example: 3
                protection:
                  description: Protection
                  type: integer
                  example: 0
                spare_count:
                  description: Spare count
                  type: integer
                  example: 0
                t_read_max:
                  description: T read max
                  type: integer
                  example: 0
                t_write_max:
                  description: T write max
                  type: integer
                  example: 0
    
    cluster_instance_status_resp:
      description: Cluster instance status response data
      nullable: true
      oneOf:
        - type: object
          properties:
            cluster:
              description: Cluster name
              type: string
              example: "red01"
            instance:
              description: Instance uuid
              type: string
              example: "285735c7-fab3-4f49-87d7-8e1a2c496348"
            state:
              description: Instance state
              type: string
              example: "running"
    
    cluster_status_resp:
      description: Clusters response data
      nullable: true
      oneOf:
        - type: object
          properties:
            cluster_state:
              description: Cluster state
              type: string
              example: "running"
            cluster_state_epoch:
              description: Cluster state epoch
              type: integer
              example: 14
            sce:
              description: Cluster sce???
              type: integer
              example: 14
            cce:
              description: Cluster cce???
              type: integer
              example: 14
            rde:
              description: Cluster rde???
              type: integer
              example: 14
            ede:
              description: Cluster ede???
              type: integer
              example: 0
            opu:
              description: Cluster opu???
              type: integer
              example: 837535399936
            feature_version:
              description: Build version
              type: string
              example: "1.0.5-beta.14654"
            config_frozen:
              description: Config frozen???
              type: boolean
              example: false
            cmsce:
              description: Cluster cmsce???
              type: integer
              example: 2
            cmidx:
              description: Cluster cmidx???
              type: integer
              example: 2
            cmuuid:
              description: Cluster manager uuid???
              type: string
              example: "5f18ef6e-8197-472d-9f3b-b2a598cb44e7"
            instances:
              description: Cluster instances
              type: object
              additionalProperties:
                $ref: '#/components/schemas/cluster_instance'
            cats:
              description: Cluster CATs
              type: object
              additionalProperties:
                $ref: '#/components/schemas/cluster_cat'
            pools:
              description: Cluster pools
              type: object
              additionalProperties:
                $ref: '#/components/schemas/cluster_pool'
    
    cluster_health_resp:
      description: Cluster health response data
      nullable: true
      oneOf:
        - type: object
          properties:
            cluster_state:
              description: Cluster state
              type: string
              example: "running"
            cluster_state_epoch:
              description: Cluster state epoch
              type: integer
              example: 14
            sce:
              description: Cluster sce???
              type: integer
              example: 14
            cce:
              description: Cluster cce???
              type: integer
              example: 14
            rde:
              description: Cluster rde???
              type: integer
              example: 14
            ede:
              description: Cluster ede???
              type: integer
              example: 0
            opu:
              description: Cluster opu???
              type: integer
              example: 837535399936
            feature_version:
              description: Build version
              type: string
              example: "1.0.5-beta.14654"
            config_frozen:
              description: Config frozen???
              type: boolean
              example: false
            cmsce:
              description: Cluster cmsce???
              type: integer
              example: 2
            cmidx:
              description: Cluster cmidx???
              type: integer
              example: 2
            cmuuid:
              description: Cluster manager uuid???
              type: string
              example: "5f18ef6e-8197-472d-9f3b-b2a598cb44e7"
            instances:
              $ref: '#/components/schemas/cluster_health_instances'
            unhealthy_instances:
              type: array
              items:
                type: string
            cats:
              $ref: '#/components/schemas/cluster_health_cats'
            pools:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/cluster_health_pool'
    
    cluster_health_instances:
      description: Cluster health instances
      type: object
      properties:
        valid:
          description: Valid instances???
          type: integer
          example: 2
        joined:
          description: Joined instances???
          type: integer
          example: 2
        replay:
          description: Replay instances???
          type: integer
          example: 0
        evicted:
          description: Evicted instances???
          type: integer
          example: 0
        left:
          description: Instances left???
          type: integer
          example: 0
        failed:
          description: Instances failed???
          type: integer
          example: 0
    
    cluster_health_pool:
      description: Cluster health pool
      type: object
      properties:
        pool:
          description: Pool name
          type: string
          example: "SYSTEM"
        cats:
          $ref: '#/components/schemas/cluster_health_cats'
        tables:
          description: Pool tables
          type: object
          additionalProperties:
            $ref: '#/components/schemas/cluster_health_pool_table'
    
    cluster_health_pool_table:
      description: Cluster health pool table
      properties:
        rebuilding_cats:
          description: Rebuilding CATs???
          type: integer
          example: 0
        rebalancing_cats:
          description: Rebalancing CATs???
          type: integer
          example: 0
        cats:
          description: CATs number
          type: integer
          example: 8
        evicted:
          description: Evicted CATs???
          type: integer
          example: 0
        redundancy:
          description: Redundancy CATs???
          type: integer
          example: 3
        health:
          description: Pool table health???
          type: string
          example: "Green"
        excepted_layout_cnt:
          description: Excepted layout count???
          type: integer
          example: 0
        width:
          description: Width???
          type: integer
          example: 4
    
    cluster_health_cats:
      description: Cluster health CATs
      type: object
      properties:
        valid:
          description: Valid CATs???
          type: integer
          example: 8
        joined:
          description: Joined CATs???
          type: integer
          example: 8
        readable:
          description: Readable CATs???
          type: integer
          example: 8
        writeable:
          description: Writeable CATs???
          type: integer
          example: 8
        evicted:
          description: Evicted CATs???
          type: integer
          example: 0
        delete_ready:
          description: Delete ready CATs???
          type: integer
          example: 0
        delete_pending:
          description: Delete pending CATs???
          type: integer
          example: 0
        degraded:
          description: Degraded CATs???
          type: integer
          example: 0
    
    cluster_instance:
      description: Cluster instance data
      type: object
      properties:
        uuid:
          description: Instance uuid
          type: string
          example: "220a6455-980f-42d2-a560-1a0c6fcd32f3"
        joined:
          description: Instance joined to the cluster
          type: boolean
          example: true
        evicted:
          description: Instance evicted from the cluster
          type: boolean
          example: false
        replay:
          description: Instance replay???
          type: boolean
          example: false
        left:
          description: Instance replay???
          type: boolean
          example: false
        liveness:
          description: Instance liveness
          type: string
          example: "present"
        hostname:
          description: Instance hostname
          type: string
          example: "silyin-redvm-1"
        sw_version:
          description: Instance software version
          type: string
          example: "1.0.5-beta.14654"
    
    cluster_cat:
      description: Cluster CAT data
      type: object
      properties:
        uuid:
          description: CAT uuid
          type: string
          example: "73d4b454-5fbe-46e2-8f3d-5318c9125ecc"
        joined:
          description: CAT joined to the cluster
          type: boolean
          example: true
        evicted:
          description: CAT evicted from the cluster
          type: boolean
          example: false
        can_read:
          description: CAT can read
          type: boolean
          example: true
        can_write:
          description: CAT can write
          type: boolean
          example: true
        owner:
          description: CAT owner???
          type: integer
          example: 1
        core:
          description: CAT core???
          type: integer
          example: 1
        affine_core:
          description: CAT affine core???
          type: integer
          example: 1
        removed:
          description: CAT removed from the cluster
          type: boolean
          example: false
        encryption_mode:
          description: CAT encryption mode???
          type: integer
          example: 1
        eviction_catchup:
          description: CAT eviction catchup???
          type: boolean
          example: false
    
    cluster_pool:
      description: Cluster pool data
      type: object
      properties:
        pool_name:
          description: Pool name
          type: string
          example: "SYSTEM"
        cats:
          description: Pool CATs
          type: object
          additionalProperties:
            $ref: '#/components/schemas/pool_cat'
        tables:
          description: Pool tables
          type: object
          additionalProperties:
            $ref: '#/components/schemas/pool_table'
    
    cat_devnode:
      description: CAT devnode
      type: object
      properties:
        numanode:
          description: CAT numanode
          type: integer
          example: 4294967295
        setup:
          type: object
          properties:
            name:
              description: CAT devnode name
              type: string
              example: "silyin-redvm-2:/dev/sde"
            filename:
              description: CAT devnode filename
              type: string
              example: "/dev/sde"
            block_size:
              description: CAT devnode block size
              type: integer
              example: 512
            type:
              description: CAT devnode type
              type: string
              example: "file"
    
    cat_instdata:
      description: CAT instdata
      type: object
      properties:
        cat_health:
          description: CAT health
          type: integer
          example: 1
    
    pool_cat:
      description: Pool CAT data
      type: object
      properties:
        udid:
          description: CAT udid
          type: string
          example: "silyin-redvm-1:/dev/sdb                                     "
    
    pool_table:
      description: Pool table data
      type: object
      properties:
        data_protect:
          description: Data protect???
          type: integer
          example: 4
        base_uuid:
          description: Base uuid???
          type: string
          example: "36beff72-7a38-4d51-bd43-3c4da0750a70"
        prime_uuid:
          description: Prime uuid???
          type: string
          example: "db79a5b0-73f8-4ee2-aeef-3b8fd8b7abd0"

    trace_inject:
      description: Trace inject message
      properties:
        message:
          type: string
    
    trace_e2e:
      description: Trace e2e
      properties:
        message:
          type: integer
    
    trace_log:
      description: Trace log level (0 through 6)
      properties:
        message:
          type: integer
    
    trace_fmt_on_exit:
      description: Trace format on exit
      properties:
        message:
          type: boolean
    
    trace_fmt_option:
      description: Trace format option
      type: object
      properties:
        opt:
          description: Act, Class, Ctx, File, Fixed Width, Hash, Id, Instance, Level, Offset, Tid
          type: string
        val:
          description: set or unset
          type: boolean
    
    trace_actions:
      description: Trace actions
      type: object
      properties:
        class:
          type: array
          items:
            type: string
          description: Class
        stream:
          type: array
          items:
            type: integer
          description: Stream
        wrap:
          type: array
          items:
            type: integer
          description: Wrap
    
    trace_stream:
      description: Trace stream buffer
      type: object
      properties:
        size:
          description: Stream buffer size
          type: integer
        enable:
          description: enable or disable
          type: boolean
        flow_ctrl:
          description: flow control
          type: boolean
        sync_ms:
          description: sync (ms)
          type: integer
        file:
          description: file
          type: string
    
    trace_wrap:
      description: Trace wrap buffer
      type: object
      properties:
        size:
          description: Stream buffer size
          type: integer
        fmt_on_exit:
          description: format on exit
          type: boolean
        file:
          description: file
          type: string
    
    new_cluster:
      description: New cluster json
      properties:
        clustername:
          type: string
        device-include:
          type: string
        device-exclude:
          type: string
    
    certs_request:
      required:
        - server_cert
        - server_key
      type: object
      properties:
        server_cert:
          description: "Server certificate"
          type: string
        server_key:
          description: "Server certificate public key"
          type: string
    
    bios_version:
      required:
        - version
      type: object
      properties:
        version:
          description: "Bios Version"
          type: string
    
    bmcfw_version:
      required:
        - version
      type: object
      properties:
        version:
          description: "Bmcfw Version"
          type: string
    
    bios_config:
      required:
        - version
      type: object
      properties:
        version:
          description: "BIOS Config"
          type: string
    
    fru_version:
      required:
        - version
      type: object
      properties:
        version:
          description: "Fru Version"
          type: string
    
    sensor_update:
      description: Sensor threshold config
      type: object
      properties:
        activation:
          description: "Sensor Activation: neither, either, decreasing, incresing"
          type: string
        limit:
          description: "Threshold Limit: lower, upper"
          type: string
        type:
          description: "Threshold Type: warning, critical, fatal"
          type: string
        value:
          description: "Threshold Value"
          type: integer
    
    kvcl_test_request:
      required:
        - async
        - keygen
        - ignore-errors
        - cpu
        - cleanup
        - iterations
        - key-group-size
        - unique-keys
        - key-at-start
        - key-length
        - key-prefix
        - read
        - random-key
        - value-range
        - threads
        - time-limit
        - no-lock
        - write
        - tenant
        - subtenant
        - dataset
      type: object
      properties:
        async:
          description: "asynchronous mode"
          type: boolean
        keygen:
          description: "generate binary keys"
          type: boolean
        ignore-errors:
          description: "Continue after an error"
          type: boolean
        cpu:
          description: "CPUs to use by worker threads (e.g. 3-5,9,10)"
          type: string
        cleanup:
          description: "Delete keys before exit (clean-up)"
          type: boolean
        iterations:
          description: "Number of iterations over key space per thread, default: 1"
          type: number
          example: 1
        key-group-size:
          description: "Size of a key group, default: no groups"
          type: number
        unique-keys:
          description: "Number of different keys, default: 1000"
          type: number
          example: 1000
        key-at-start:
          description: "Pad key names at beginning, to maximize comparison overhead"
          type: boolean
        key-length:
          description: "Set a fixed key length or a range of key lengths, default: 0-452"
          type: string
          example: "0-324"
        key-prefix:
          description: "Prefix for the keys, default: no prefix"
          type: string
        read:
          description: "Do reads (key lookups)"
          type: boolean
        random-key:
          description: "Generate random key identifiers (default: sequential)"
          type: string
          example: "sequential"
        value-range:
          description: "Set a fixed value length or a range of value lengths, default: 0-4096"
          type: string
          example: "0-1024"
        threads:
          description: "Number of threads, default: 1"
          type: number
          example: 1
        time-limit:
          description: "Time limit in seconds for the run (default: no limit)"
          type: number
        no-lock:
          description: "No lock-step between threads (per-thread output)"
          type: boolean
        write:
          description: "Do writes (key assigns)"
          type: boolean
        tenant:
          description: "Tenant name"
          type: string
          example: "red"
        subtenant:
          description: "Subtenant name"
          type: string
          example: "red"
        dataset:
          description: "Dataset name"
          type: string
          example: "red"
    
    io_test_request:
      required:
        - size
        - count
        - depth
        - seconds
        - sequential
        - write
      type: object
      properties:
        size:
          description: "IO Size"
          type: number
          example: 4096
        count:
          description: "Maximum commands"
          type: number
          example: 100000000
        depth:
          description: "depth"
          type: number
          example: 16
        seconds:
          description: "Seconds to run the IO test"
          type: number
          example: 1
        sequential:
          description: "Sequential IO"
          type: boolean
          example: false
        write:
          description: "Write"
          type: boolean
          example: true
    
    nettest_config:
      required:
        - config
      type: string
      description: "Nettest configuration data"
    
    volume_request:
      required:
        - volumeName
        - nblocks
        - block_size
      type: object
      properties:
        volumeName:
          description: "Name of volume to add"
          type: string
        nblocks:
          description: "Total number of volume blocks"
          type: number
        block_size:
          description: "Size of volume blocks in bytes"
          type: number
        nvmfTarget:
          description: Nvmf target flag
          type: boolean
        nvmfProp:
          description: "Properties required to expose volume as a NVMF device"
          type: object
        xattrs:
          description: "JSON object of key-value attributes"
          type: object
    
    volume_update_request:
      type: object
      properties:
        nvmf:
          description: "Properties required to expose volume as a NVMF device"
          type: object
        xattrs:
          description: "JSON object of key-value attributes"
          type: object
    
    volume_resize_request:
      type: object
      properties:
        nvmf:
          description: "Properties required to resize volume"
          type: object
        xattrs:
          description: "JSON object of number of blocks"
          type: object
    
    volume_clone_request:
      required:
        - srcVol
        - sizeInBytes
      type: object
      properties:
        srcVol:
          description: "Name of master/source volume using which other volumes can be clone"
          type: string
        sizeInBytes:
          description: "Size of master/source volume which can be useful for volume clone operation"
          type: number
        srcVolMd5:
          description: "MD5 of master/source volume to validate the clone operation"
          type: string
    
    subsystem_create_request:
      type: object
      properties:
        transport:
          description: "NVMEoF transport (TCP|RDMA)"
          type: string
        reqInstances:
          description: "array of instance numbers to expose, should be 3 instances if provided"
          type: array
          items:
            type: integer
    
    vhost_request:
      required:
        - name
      type: object
      properties:
        name:
          description: "Name of vhost controller to add"
          type: string
    
    stats_config:
      description: Set Stats config
      type: object
      properties:
        target:
          description: "target name"
          type: string
        max:
          description: "Max queue length"
          type: number
        freq:
          description: "collection frequency in seconds"
          type: number
    
    dataset_request:
      required:
        - name
        - nstripes
        - pool
        - ltid
        - type
        - xattrs
      type: object
      properties:
        name:
          description: "Name of dataset"
          type: string
        nstripes:
          description: "Number of stripes"
          type: number
        pool:
          description: "Pool"
          type: number
        ltid:
          description: "LTID"
          type: number
        type:
          description: "Type of dataset"
          type: string
        bulk_quota:
          description: "Bulk quota"
          type: number
        xattrs:
          description: "xattrs of dataset"
          type: object
    
    tenantsub_request:
      required:
        - name
        - xattrs
      type: object
      properties:
        name:
          description: "Name"
          type: string
        weight:
          description: "QoS weight"
          type: number
        bulk_quota:
          description: "Bulk quota"
          type: number
        primary_admin:
          description: "Primary admin"
          type: string
        primary_password:
          description: "Primary admin password"
          type: string
        xattrs:
          description: "xattrs"
          type: object
    
    service_request:
      required:
        - name
        - servicetype
        - protocol
      type: object
      properties:
        name:
          type: string
        servicetype:
          type: string
        protocol:
          type: string
        dpprofile:
          type: string
        dataset:
          type: string
        datasetsize:
          type: number
        admins:
          type: string
        viewers:
          type: string
        serviceuser:
          type: string
        networktag:
          type: string
        vhost:
          description: "vhost config"
          type: string
        hostheader:
          description: "host-header"
          type: string
    
    forwarding_config:
      description: Add/Remove forwarding target
      type: object
      properties:
        name:
          description: "target name"
          type: string
        target:
          description: "target type"
          type: string
        args:
          description: "argument json"
          type: string
    
    hmi_resource_id:
      required:
        - name
      type: object
      properties:
        name:
          description: "HMI Resource Name/ID. Example Server Sensor ID: 1, Drive Sensor ID: 51bc2b5e-855c-4044-9e4d-7da8b1d2d9aa/sensors/1"
          type: string
    
    tsdb_raw:
      required:
        - query
      type: object
      properties:
        query:
          description: Raw TSDB query
          type: string
    
    forwarding_metrics_level:
      description: Add/Remove forwarding metrics level
      type: object
      properties:
        target:
          description: Target ID
          type: string
        level:
          description: Metric Level
          type: string
    
    forwarding_metrics_list:
      description: Add/Remove forwarding metrics list
      type: object
      properties:
        target:
          description: Target name
          type: string
        list:
          description: Metric List
          type: string
    
    audit_email_type:
      description: Email address to notify for each connection to support session, empty string for no notification
      default: ""
      example: admin@example.com
      type: string
      format: email
      pattern: (?:^$|(?:^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$))
    
    lifetime_type:
      description: Support session duration, e.g. 10h59m59s, or 'infinite'
      default: "4h"
      example: "2h30m"
      oneOf:
        - type: string
          pattern: ^(?:(?:\d+h)|(?:\d+m)|(?:\d+s)|(?:\d+h\d+m)|(?:\d+h\d+s)|(?:\d+m\d+s)|(?:\d+h\d+m\d+s))$
        - type: string
          enum: [infinite, infinity]
    
    session_properties:
      description: Modify support session JSON
      type: object
      properties:
        lifetime:
          $ref: "#/components/schemas/lifetime_type"
        audit_email:
          $ref: "#/components/schemas/audit_email_type"
      required:
        - lifetime
        - audit_email
    
    telemetry_export:
      description: telemetry export target
      type: object
      properties:
        name:
          description: "target name"
          type: string
        type:
          description: "target type"
          type: string
        protocol:
          description: "export protocol"
          type: string
        endpoint:
          description: "destination URL"
          type: string
        username:
          description: "optional username"
          type: string
        password:
          description: "optional password"
          type: string

    config_validate_request:
      description: Config to validate data
      type: object
      properties:
        path:
          description: Config path
          type: string
          example: "rsm/clusters/red01/configs/test_config/"
        tree:
          $ref: "#/components/schemas/config_tree"
    
    config_tree:
      description: Config tree
      type: object
      properties:
        cluster_uuid:
          description: Cluster uuid
          type: string
          example: "1060943c-b347-4075-bee8-4c2633ce4d0a"
        config:
          description: Config name
          type: string
          example: "test_config"
        networks:
          $ref: "#/components/schemas/config_tree_networks"
        clients:
          $ref: "#/components/schemas/config_tree_clients"
        tunables:
          $ref: "#/components/schemas/config_tree_tunables"
        notes:
          $ref: "#/components/schemas/config_tree_notes"
        dp_profiles:
          $ref: "#/components/schemas/config_tree_dp_profiles"
        policies:
          $ref: "#/components/schemas/config_tree_policies"
        master_key:
          description: Config master key
          type: integer
          example: 7172409527061549000
        signing_key:
          description: Config signing key
          type: string
          example: "7xms6VxFb6Vg9JTKliQ1nA=="
        timestamp:
          description: Config timestamp
          type: string
          example: "2024-05-08_09:32:19.386136"
        comment:
          description: Config comment
          type: string
          example: "2024-05-08_09:32:19.386136"
        instances:
          $ref: "#/components/schemas/config_tree_instances"
        pools:
          $ref: "#/components/schemas/config_tree_pools"
    
    config_tree_pools:
      description: Config tree pools
      type: object
      additionalProperties:
        $ref: '#/components/schemas/config_tree_pools_prop'
    
    config_tree_pools_prop:
      description: Config tree pool
      type: object
      properties:
        pool_id:
          description: Pool ID
          type: integer
          example: 1
        name:
          description: Pool name
          type: string
          example: "SYSTEM"
        bulk_size:
          description: Bulk size
          type: integer
          example: 262144
        obj_size:
          description: Object size
          type: integer
          example: 0
        fanout:
          description: fanout
          type: integer
          example: 0
        sys_meta:
          description: sys meta
          type: boolean
          example: true
        user_meta:
          description: user meta
          type: boolean
          example: true
        user_data:
          description: user data
          type: boolean
          example: true
        device_open_retries:
          description: device open retries
          type: integer
          example: 4
        device_replacement:
          description: device replacement
          type: boolean
          example: false
        cat_map:
          $ref: "#/components/schemas/config_tree_pools_prop_cat_map"
        tables:
          $ref: "#/components/schemas/config_tree_pools_prop_tables"
    
    config_tree_pools_prop_tables:
      description: Config tree pool tables
      type: object
      additionalProperties:
        $ref: '#/components/schemas/tree_pool_table'
    
    tree_pool_table:
      description: Config tree pool table
      type: object
      properties:
        fd_rank:
          $ref: '#/components/schemas/tree_pool_table_fd_rank'
        type:
          description: table type
          type: integer
          example: 3
        data_protect:
          description: table data protect
          type: integer
          example: 4
    
    tree_pool_table_fd_rank:
      description: Config tree pool cat map
      type: object
      properties:
        "board:*":
          type: integer
          example: 6
        "center:*":
          type: integer
          example: 2
        "chassis:*":
          type: integer
          example: 5
        "device:*":
          type: integer
          example: 9
        "host:*":
          type: integer
          example: 7
        "instance:*":
          type: integer
          example: 8
        "rack:*":
          type: integer
          example: 3
        "site:*":
          type: integer
          example: 1
        "subrack:*":
          type: integer
          example: 4
    
    config_tree_pools_prop_cat_map:
      description: Config tree pool cat map
      type: object
      additionalProperties:
        $ref: '#/components/schemas/cat_map_prop'
    
    cat_map_prop:
      description: Config tree pool cat map
      type: object
      properties:
        udid:
          description: CAT udid
          type: string
          example: "silyin-redvm-3:/dev/sdc                                     "
        capacity:
          description: capacity
          type: integer
          example: 129879769088
        layout_weight:
          description: layout weight
          type: integer
          example: 1
        bept_fanout:
          description: bept fanout
          type: integer
          example: 28
        obj_size:
          description: object size
          type: integer
          example: 65536
        bulk_size:
          description: bulk size
          type: integer
          example: 262144
        intlg_size:
          description: intlg size
          type: integer
          example: 1073741824
        heap_size:
          description: heap size
          type: integer
          example: 0
        bulk_cachesz:
          description: bulk cache size
          type: integer
          example: 107374182
        bept_cachesz:
          description: bept cache size
          type: integer
          example: 214748364
        bept_dirtythd:
          description: bept dirtythd
          type: integer
          example: 75
        bept_qcachesz:
          description: bept qcache size
          type: integer
          example: 0
        reinit:
          description: reinit
          type: integer
          example: 1
        blocksize:
          description: block size
          type: integer
          example: 4096
        res_space_pct:
          description: res space pct
          type: integer
          example: 4
        encr_mode:
          description: encr mode
          type: integer
          example: 1
        csum_alg:
          description: csum alg
          type: integer
          example: 5
        num_cores:
          description: num cores
          type: integer
          example: 0
        open_retries:
          description: open retries
          type: integer
          example: 0
        dev_replacement:
          description: device replacement
          type: boolean
          example: false
        location:
          description: CAT location
          type: string
          example: "silyin-redvm-3:/dev/sdc"
        failure_domains:
          description: CAT failure domains
          type: array
          items:
            type: string
            example: "chassis:QEMU-"
        devnodes:
          description: CAT devnodes
          type: object
          additionalProperties:
            $ref: '#/components/schemas/cat_devnode'
        instpref:
          description: instpref
          type: array
          items:
            type: string
            example: "ad0207e1-857b-4fa2-b5fe-61f5b7fb0d80"
        cat_id:
          description: CAT id
          type: integer
          example: 10
    
    config_tree_instances:
      description: Config tree instances
      type: object
      additionalProperties:
        $ref: '#/components/schemas/config_tree_instance_prop'
    
    config_tree_instance_prop:
      description: Config tree instance
      type: object
      properties:
        instance_id:
          description: Instance id
          type: integer
          example: 3
        hostuuid:
          description: Instance host uuid
          type: string
          example: "f5715954-d7ea-4154-9858-324a4bfdeddf"
        hostname:
          description: hostname
          type: string
          example: "silyin-redvm-3"
        cat_cpuset:
          description: cat cpuset
          type: string
          example: "0x2"
        handler_cpuset:
          description: Handler cpu set
          type: string
          example: "0x2"
        net_cpuset:
          description: Net cpu set
          type: string
          example: "0x2"
        nvmf_cpuset:
          description: Nvmf cpu set
          type: string
          example: "0x2"
        auxiliary_cpuset:
          description: Auxiliary cpu set
          type: string
          example: "0x2"
        posix_cpuset:
          description: Posix cpu set
          type: string
          example: "0x1"
        spdk_main_cpuset:
          description: Spdk main cpu set
          type: string
          example: "0x2"
        spdk_memory:
          description: Spdk memory
          type: integer
          example: 0
        spdk_legacy_mem:
          description: Spdk legacy memory
          type: boolean
          example: false
        spdk_huge:
          description: Spdk huge
          type: boolean
          example: true
        jrpc_settings:
          $ref: '#/components/schemas/config_tree_instance_jrpc'
        non_affine_mem_fatal:
          description: Non affine memory fatal
          type: boolean
          example: true
        rpc_s2s_timeout_sec:
          description: Rpc s2s timeout sec
          type: integer
          example: 0
        rpc_c2s_timeout_sec:
          description: Rpc c2s timeout sec
          type: integer
          example: 0
        interfaces:
          description: Config tree instance interfaces
          type: object
          additionalProperties:
            $ref: '#/components/schemas/config_tree_interface'
        nvme_qualified_name:
          description: Nvme qualified name
          type: string
          example: "nqn.2024-05.com.ddn:nvme.red-ad0207e1-857b-4fa2-b5fe-61f5b7fb0d80"
    
    config_tree_interface:
      description: Config tree interface
      type: object
      properties:
        numanode:
          description: Numa node
          type: integer
          example: 4294967295
        enabled:
          description: Node enabled
          type: boolean
          example: true
        nameinfo:
          description: Node name info
          type: string
          example: "silyin-redvm-3"
        rpc:
          $ref: '#/components/schemas/config_node_interface_rpc'
        jrpc:
          $ref: '#/components/schemas/config_node_interface_jrpc'
    
    config_tree_instance_jrpc:
      description: Jrpc settings
      type: object
      properties:
        base:
          description: Jrpc base
          type: integer
          example: 3102
        count:
          description: Jrpc count
          type: integer
          example: 1
        worker_count:
          description: Jrpc worker count
          type: integer
          example: 12
    
    config_tree_policies:
      description: Config tree policies
      type: object
      additionalProperties:
        $ref: '#/components/schemas/config_tree_policy'
    
    config_tree_policy:
      description: Config tree policy
      type: object
      properties:
        id:
          description: Policy id
          type: integer
          example: 1
        name:
          description: Policy name
          type: string
          example: "SYS"
        type:
          description: Policy type
          type: integer
          example: 3
        protection:
          description: Protection
          type: integer
          example: 4
        min_stripe:
          description: Min stripe
          type: integer
          example: 0
        max_stripe:
          description: Max stripe
          type: integer
          example: 65536
        efficiency:
          description: Efficiency
          type: integer
          example: 0
        pool_id:
          description: Pool ID
          type: integer
          example: 1
        pref_avail:
          description: Pref avail
          type: integer
          example: 9
        pref_avail_str:
          description: Pref avail
          type: string
          example: "instance"
        t_read_max:
          description: T read max
          type: integer
          example: 0
        t_write_max:
          description: T write max
          type: integer
          example: 0
        n_write_later:
          description: N write later
          type: integer
          example: 0
        spare_count:
          description: Spare count
          type: integer
          example: 0
    
    config_tree_dp_profiles:
      description: Config tree dp profiles
      type: object
      additionalProperties:
        $ref: '#/components/schemas/config_tree_dp_profile'
    
    config_tree_dp_profile:
      description: Config tree dp profile
      type: object
      properties:
        id:
          description: Profile id
          type: integer
          example: 1
        name:
          description: Profile name
          type: string
          example: "SYSTEM_DATA_1"
        meta_poolid:
          description: Meta pool id
          type: integer
          example: 1
        meta_ltid:
          description: Meta lt id
          type: integer
          example: 2
        data_poolid:
          description: Data pool id
          type: integer
          example: 1
        data_ltid:
          description: Data lt id
          type: integer
          example: 3
        policy_id:
          description: Policy id
          type: integer
          example: 3
        efficiency:
          description: Efficiency
          type: integer
          example: 87
        protection:
          description: Protection
          type: integer
          example: 11
        availability:
          description: Availability
          type: integer
          example: 9
        min_stripe:
          description: Min stripe
          type: integer
          example: 16384
        max_stripe:
          description: Max stripe
          type: integer
          example: 262144
        t_read_max:
          description: T read max
          type: integer
          example: 14000
        t_write_max:
          description: T write max
          type: integer
          example: 9000
        n_write_later:
          description: N write later
          type: integer
          example: 1
        spare_count:
          description: Spare count
          type: integer
          example: 0
    
    config_tree_notes:
      description: Config tree notes
      type: object
      additionalProperties:
        $ref: '#/components/schemas/config_tree_note'
    
    config_tree_note:
      description: Config tree note
      type: object
      properties:
        tod:
          description: tod
          type: integer
          example: 1715160718
        sev:
          description: sev
          type: integer
          example: 5
        source:
          description: sev
          type: string
          example: "0"
        fid:
          description: fid
          type: string
          example: "588bbb2a25e5b4a0"
        args:
          description: args
          items:
            type: string
            example: "auto_config"
    
    config_tree_tunables:
      description: Config tree tunables
      type: object
      properties:
        agent_max_respawn:
          description: Agent max respawn
          type: integer
          example: 600
        liveness_timeout:
          description: Liveness timeout
          type: integer
          example: 8
        replan_timeout:
          description: Replan timeout
          type: integer
          example: 180
        cm_lease_timeout:
          description: Cm lease timeout
          type: integer
          example: 5
        gossip_us_per_tick:
          description: Gossip us per tick
          type: integer
          example: 250000
        cap_gossip_us_per_tick:
          description: Cap gossip us per tick
          type: integer
          example: 250000
        capacity_limit_wrt_reject_pcnt:
          description: Capacity limit write reject percent
          type: integer
          example: 90
        capacity_limit_del_reject_pcnt:
          description: Capacity limit delete reject percent
          type: integer
          example: 95
        capacity_limit_stall_pcnt:
          description: Capacity limit stall percent
          type: integer
          example: 85
        etc_vector_size:
          description: Etc vector size
          type: integer
          example: 32
        c2s_credit_high:
          description: c2s credit high
          type: integer
          example: 64
        c2s_credit_low:
          description: c2s credit low
          type: integer
          example: 32
        s2s_credit_high:
          description: s2s credit high
          type: integer
          example: 4294967295
        s2s_credit_low:
          description: s2s credit low
          type: integer
          example: 4294967295
        dlm_credit_high:
          description: dlm credit hight
          type: integer
          example: 4294967295
        dlm_credit_low:
          description: dlm credit low
          type: integer
          example: 4294967295
        scr_evict_ping_tout_ms:
          description: scr evict ping tout ms
          type: integer
          example: 20000
        scr_evict_ccce_tout_ms:
          description: scr evict ccce tout ms
          type: integer
          example: 100000
        scr_evict_lkrply_tout_ms:
          description: scr evict lkrply tout ms
          type: integer
          example: 300000
        sched_task_quantum_us:
          description: sched task quantum us
          type: integer
          example: 200
        rpc_rdma_pool_sz:
          description: rpc rdma pool size
          type: integer
          example: 256
        rpc_s2s_credits:
          description: rpc s2s credits
          type: integer
          example: 128
        rpc_big_cluster_sz:
          description: rpc big cluster size
          type: integer
          example: 10
        rpc_max_core_cons:
          description: rpc max core cons
          type: integer
          example: 4000
        rpc_workers:
          description: rpc workers
          type: integer
          example: 3
        rpc_recon_time:
          description: rpc reconnection time
          type: integer
          example: 2
        rpc_recon_attempts:
          description: rpc reconnection attempts
          type: integer
          example: 2
        rpc_connecting_timeout:
          description: rpc connecting timeout
          type: integer
          example: 5
        rpc_deep_freeze_timeout:
          description: rpc deep freeze timeout
          type: integer
          example: 300
        rpc_daemoninfo_expiration:
          description: rpc daemoninfo expiration
          type: integer
          example: 5
        rpc_tcp_zerocopy_size:
          description: rpc tcp zerocopy size
          type: integer
          example: 16384
        rpc_tcp_io_uring:
          description: rpc tcp io uring
          type: boolean
          example: false
        rpc_relaxed_ordering:
          description: rpc relaxed ordering
          type: boolean
          example: true
        rpc_addr_validation:
          description: rpc addr validation
          type: boolean
          example: false
        rpc_allow_sys_sys:
          description: rpc allow sys sys
          type: boolean
          example: true
        rpc_sec_alg:
          description: rpc security algorithm
          type: string
          example: "aes-128-gcm"
        rpc_cq_batch_sz:
          description: rpc cq batch size
          type: integer
          example: 100
        rpc_use_localhost:
          description: rpc use localhost
          type: boolean
          example: false
        rpc_conn_audit_idle_sec:
          description: rpc connection audit idle sec
          type: integer
          example: 2
        rpc_conn_audit_act_sec:
          description: rpc connection audit act sec
          type: integer
          example: 2
        jrpc_auth_enforce:
          description: jrpc auth enforce
          type: boolean
          example: false
        jrpc_debug_enable:
          description: jrpc debug enable
          type: boolean
          example: true
        jrpc_trace_all:
          description: jrpc trace all
          type: boolean
          example: false
        jrpc_timeout_auth:
          description: jrpc timeout auth
          type: integer
          example: 0
        jrpc_timeout_idle:
          description: jrpc timeout idle
          type: integer
          example: 0
        jrpc_client_keepalive:
          description: jrpc client keepalive
          type: integer
          example: 120
        jrpc_timeout_token:
          description: jrpc timeout token
          type: integer
          example: 900
        ring_max_ninflight:
          description: ring max ninflight
          type: integer
          example: 16
        ring_max_dequeue_size:
          description: ring max dequeue size
          type: integer
          example: 16
        enable_proc_info:
          description: enable proc info
          type: boolean
          example: false
        runtime_backup_history:
          description: runtime backup history
          type: integer
          example: 3
        spdk_vhost_socket_path:
          description: spdk vhost socket path
          type: string
          example: "/var/tmp"
        auto_upgrade:
          description: auto upgrade
          type: boolean
          example: false
        encryption:
          description: encryption
          type: string
          example: "on"
        encrypt_alg:
          description: encryption algorithm
          type: string
          example: "aes-256-xts"
        compression:
          description: compression
          type: string
          example: "FASTCOMPRESS"
        fastcompress:
          description: fastcompress
          type: string
          example: "LZ4"
        highcompress:
          description: highcompress
          type: string
          example: "ZSTD"
        compress_min_gain:
          description: compress min gain
          type: integer
          example: 12
        spare_min_eff:
          description: spare min eff
          type: integer
          example: 60
        runtime_debug_halt:
          description: runtime debug halt
          type: boolean
          example: false
        checksum_alg:
          description: checksum algorithm
          type: string
          example: "crc64"
        blocksize:
          description: blocksize
          type: integer
          example: 4096
        max_heap_size:
          description: max heap size
          type: integer
          example: 0
        intentlog_unmap:
          description: intentlog unmap
          type: boolean
          example: false
        eb_scrubber_interval:
          description: eb scrubber interval
          type: integer
          example: 43200
        eb_catcleaner_interval:
          description: eb catcleaner interval
          type: integer
          example: 72000
        eb_grace_period_ms:
          description: eb tablet selection policy
          type: integer
          example: 10000
        eb_large_grace_period_ms:
          description: eb tablet selection policy
          type: integer
          example: 86400000
        eb_tablet_sel_policy:
          description: eb tablet selection policy
          type: integer
          example: 3
        eb_tablet_search_max:
          description: eb tablet selection tunable
          type: integer
          example: 5
        eb_tablet_cache_max:
          description: eb tablet cache tunable
          type: integer
          example: 10
        ec_startup_test_enabled:
          description: enable ec_startup_test
          type: boolean
          example: true
        ec_startup_test_panic:
          description: panic on ec_startup_test error
          type: boolean
          example: false
        ec_bandwidth_test_desc:
          description: ec_bandwidth_test geometries
          type: string
          example: "64M:4+3,72M:9+3,64M:16+3"
        catchup_inflight:
          description: catchup inflight
          type: integer
          example: 2
        client_interrupts:
          description: client interrupts
          type: boolean
          example: true
        client_rdma_pool_sz:
          description: client rdma pool size
          type: integer
          example: 256
        nvme_hotplug:
          description: nvme hotplug
          type: boolean
          example: true
        rac_evict_task_poll_usec:
          description: rac evict task poll usec
          type: integer
          example: 10000000
        rac_evict_start_nentries:
          description: rac evict start nentries
          type: integer
          example: 100
        rac_evict_start_main_task:
          description: rac evict start main task
          type: integer
          example: 400
        gc_ticker_disabled:
          description: gc ticker disabled
          type: boolean
          example: false
        gc_boot_time:
          description: gc boot time
          type: integer
          example: 0
        gc_horizon_time:
          description: gc horizon time
          type: integer
          example: 600
        reclaim_gc_enabled:
          description: reclaim gc enabled
          type: boolean
          example: true
        snapshot_resolution_ticks:
          description: snapshot resolution ticks
          type: integer
          example: 268435456
        volume_max_segment_size:
          description: volume max segment size
          type: integer
          example: 1048576
        volume_max_num_segments:
          description: volume max num segments
          type: integer
          example: 256
        volume_num_net_buffers:
          description: volume num net buffers
          type: integer
          example: 2
        volume_io_cache_size:
          description: volume io cache size
          type: integer
          example: 256
        volume_io_pool_size:
          description: volume io pool size
          type: integer
          example: 65535
        iobuf_small_bufsize:
          description: iobuf small bufsize
          type: integer
          example: 8192
        iobuf_large_bufsize:
          description: iobuf large bufsize
          type: integer
          example: 135168
        iobuf_small_pool_count:
          description: iobuf small pool count
          type: integer
          example: 8192
        iobuf_large_pool_count:
          description: iobuf large pool count
          type: integer
          example: 1024
        nvmf_max_qpairs_ctrlr:
          description: nvmf max qpairs ctrlr
          type: integer
          example: 128
        nvmf_in_capsule_data_size:
          description: nvmf in capsule data size
          type: integer
          example: 4096
        nvmf_io_unit_size_tcp:
          description: nvmf io unit size tcp
          type: integer
          example: 131072
        nvmf_io_unit_size_rdma:
          description: nvmf io unit size rdma
          type: integer
          example: 8192
        nvmf_max_io_size:
          description: nvmf max io size
          type: integer
          example: 1048576
        nvmf_num_shared_buffers:
          description: nvmf num shared buffers
          type: integer
          example: 4096
        nvmf_buf_cache_size:
          description: nvmf buf cache size
          type: integer
          example: 4294967295
        nvmf_tcp_max_queue_depth:
          description: nvmf tcp max queue depth
          type: integer
          example: 128
        nvmf_tcp_max_aq_depth:
          description: nvmf tcp max aq depth
          type: integer
          example: 128
        nvmf_rdma_max_queue_depth:
          description: nvmf rdma max queue depth
          type: integer
          example: 128
        nvmf_rdma_max_aq_depth:
          description: nvmf rdma max aq depth
          type: integer
          example: 128
        nvmf_zcopy:
          description: nvmf zcopy
          type: boolean
          example: false
        dlm_cache_max:
          description: dlm cache max
          type: integer
          example: 65536
        dlm_cacheref_max:
          description: dlm cacheref max
          type: integer
          example: 8192
    
    config_tree_clients:
      description: Config tree clients
      type: object
      properties:
        default:
          description: Config tree default client
          type: object
          properties:
            rpc_credits:
              description: rpc credits
              type: integer
              example: 32
            netrules:
              $ref: "#/components/schemas/config_tree_client_netrules"
            interfaces:
              $ref: "#/components/schemas/config_tree_client_interfaces"
    
    config_tree_client_netrules:
      description: Config tree client netrules
      type: object
      additionalProperties:
        $ref: '#/components/schemas/client_netrule'
    
    client_netrule:
      description: Config tree client netrule
      type: object
      properties:
        tcp:
          description: Config tree client tcp rules
          type: object
          properties:
            allow:
              description: Config tree client tcp allow rules
              type: array
              items:
                type: string
                example: "speed]10-ANY]"
    
    config_tree_client_interfaces:
      description: Config tree client interfaces
      type: array
      items:
        $ref: "#/components/schemas/config_tree_client_interface"
    
    config_tree_client_interface:
      description: Config tree client interface
      type: object
      properties:
        device_name:
          description: Client interface device name pattern
          type: string
          example: "eth*"
        networks:
          description: Client interface networks
          type: array
          items:
            type: string
            example: "b5bd6adf-7975-4249-9376-4e3b8c090813"
    
    config_tree_networks:
      description: Config tree networks
      type: object
      additionalProperties:
        $ref: '#/components/schemas/networks_prop'
    
    configs_produce_resp:
      description: Initial config response data
      nullable: true
      oneOf:
        - type: object
          properties:
            result:
              $ref: "#/components/schemas/configs_produce_result"
            notes:
              $ref: "#/components/schemas/configs_produce_notes"
    
    configs_produce_create_resp:
      description: Create config response data
      nullable: true
      oneOf:
        - type: object
          properties:
            Create:
              $ref: "#/components/schemas/configs_produce_create_result"
            Notes:
              $ref: "#/components/schemas/configs_produce_create_notes"
    
    configs_produce_create_result:
      description: Create config response result
      type: object
      properties:
        new_config:
          description: New config name
          type: string
          example: "test_config"
    
    configs_produce_result:
      description: Initial config response result
      type: object
      properties:
        cluster_name:
          description: Cluster name
          type: string
          example: "red01"
        config_name:
          description: Config name
          type: string
          example: "test_config"
        configs:
          description: Configs
          type: object
          additionalProperties:
            $ref: '#/components/schemas/configs_prop'
        networks:
          description: Networks
          type: object
          additionalProperties:
            $ref: '#/components/schemas/networks_prop'
    
    networks_prop:
      description: Networks response property
      type: object
      properties:
        type:
          description: Network type
          type: string
          example: "tcp"
        name:
          description: Network name
          type: string
          example: "tcp-auto"
        tags:
          description: Network tags
          type: array
          items:
            type: string
            example: "NVMF_DATA_SERVICE"
        policy:
          $ref: "#/components/schemas/network_policy"
        subnet:
          description: Network subnet
          type: string
          example: ""
    
    network_policy:
      description: Network policy
      type: object
      properties:
        backup:
          description: backup
          type: boolean
          example: true
        encryption:
          description: encryption
          type: boolean
          example: false
        cq_nentries:
          description: cq nentries
          type: integer
          example: 16384
        max_cq_count:
          description: Max cq count
          type: integer
          example: 64
        eq_nentries:
          description: eq nentries
          type: integer
          example: 100
        weight:
          description: weight
          type: integer
          example: 0
    
    configs_prop:
      description: Config response property
      type: object
      properties:
        tunables:
          $ref: '#/components/schemas/configs_tunables'
        nodes:
          description: Config nodes
          type: array
          items:
            $ref: "#/components/schemas/config_node"
    
    config_node:
      description: Config node
      type: object
      additionalProperties:
        $ref: '#/components/schemas/config_node_prop'
    
    config_node_prop:
      description: Config node prop
      type: object
      properties:
        devices:
          description: Config node devices
          type: object
          additionalProperties:
            $ref: '#/components/schemas/config_node_device'
        interfaces:
          description: Config node interfaces
          type: object
          additionalProperties:
            $ref: '#/components/schemas/config_node_interface'
        instance:
          $ref: '#/components/schemas/config_node_interface_instance'
    
    config_node_interface_instance:
      description: Config node interface instance
      type: object
      properties:
        cat_cpuset:
          description: Cat cpu set
          type: string
          example: "0x2"
        handler_cpuset:
          description: Handler cpu set
          type: string
          example: "0x2"
        net_cpuset:
          description: Net cpu set
          type: string
          example: "0x2"
        nvmf_cpuset:
          description: Nvmf cpu set
          type: string
          example: "0x2"
        auxiliary_cpuset:
          description: Auxiliary cpu set
          type: string
          example: "0x2"
        posix_cpuset:
          description: Posix cpu set
          type: string
          example: "0x1"
        spdk_main_cpuset:
          description: Spdk main cpu set
          type: string
          example: "0x2"
    
    config_node_interface:
      description: Config node interface
      type: object
      properties:
        numanode:
          description: Numa node
          type: integer
          example: 4294967295
        enabled:
          description: Node enabled
          type: boolean
          example: true
        sriov:
          $ref: '#/components/schemas/config_node_interface_sriov'
        rpc:
          $ref: '#/components/schemas/config_node_interface_rpc'
        jrpc:
          $ref: '#/components/schemas/config_node_interface_jrpc'
    
    config_node_interface_jrpc:
      description: Config node interface jrpc
      type: object
      properties:
        encrypt:
          description: Jrpc encryption
          type: boolean
          example: false
    
    config_node_interface_rpc:
      description: Config node interface rpc
      type: object
      properties:
        networks:
          description: Config node interface rpc networks
          type: array
          items:
            description: Config node interface rpc network id
            type: string
            example: "4eaf50a9-0248-4c24-bdb0-9b374948fd52"
        server_port:
          $ref: '#/components/schemas/config_node_interface_rpc_port'
        client_port:
          $ref: '#/components/schemas/config_node_interface_rpc_port'
    
    config_node_interface_rpc_port:
      description: Config node interface rpc port
      type: object
      properties:
        base:
          description: Base port
          type: integer
          example: 3201
        count:
          description: count
          type: integer
          example: 100
    
    config_node_interface_sriov:
      description: Config node interface sriov
      type: object
      properties:
        function:
          description: Config node interface sriov function
          type: string
          example: "none"
        parent_device:
          description: Config node interface sriov parent device
          type: string
          example: ""
        vf_index:
          description: Config node interface sriov vf index
          type: integer
          example: 0
    
    config_node_device:
      description: Config node device
      type: object
      properties:
        bulk_cachesz:
          description: Bulk cache size
          type: integer
          example: 107374182
        bept_cachesz:
          description: Dept cache size
          type: integer
          example: 214748364
    
    configs_tunables:
      description: Config tunables
      type: object
      properties:
        c2s_credit_high:
          description: c2s credit high
          type: integer
          example: 64
        c2s_credit_low:
          description: c2s credit high
          type: integer
          example: 32
        rpc_rdma_pool_sz:
          description: rpc rdma pool size
          type: integer
          example: 256
        rpc_s2s_credits:
          description: rpc s2s credits
          type: integer
          example: 128
        ring_max_ninflight:
          description: ring max ninflight
          type: integer
          example: 16
        ring_max_dequeue_size:
          description: ring max dequeue size
          type: integer
          example: 16
        client_rdma_pool_sz:
          description: client rdma pool size
          type: integer
          example: 256
    
    configs_produce_notes:
      description: Initial config response notes
      type: array
      items:
        type: string
        example: "Generated using runtime and inventory"
    
    configs_produce_create_notes:
      description: Create config response notes
      type: array
      items:
        type: string
        example: "Config test_config created."

    realm_resp:
      description: Realm response data
      nullable: true
      oneOf:
        - type: object
          properties:
            version:
              description: Realm version
              type: string
            realm:
              $ref: "#/components/schemas/realm_detail"
            nodes:
              description: Realm nodes
              type: array
              items:
                $ref: "#/components/schemas/realm_node"
    
    realm_status_resp:
      description: Realm status
      nullable: true
      oneOf:
        - type: object
    
    realm_node_status_resp:
      description: Node status
      nullable: true
      oneOf:
        - type: object
    
    realm_detail:
      description: Realm details
      type: object
      properties:
        name:
          description: Realm name
          type: string
          example: "red_realm_001"
        sites:
          description: Realm sites
          type: array
          items:
            type: string
          example: [
            "site1"
          ]
        etcd_addresses:
          description: Realm etcd IP addresses and ports
          type: array
          items:
            type: string
          example: [
            "250.58.109.193:2379",
            "250.58.195.148:2379",
            "250.58.95.246:2379"
          ]
        realm_keyspace_name:
          description: Identifier for ETCD keyspace for use at this realm
          type: string
          example: "storage_001"
        admin_user:
          description: Realm admin user name
          type: string
          example: "realm_admin"
        etcd_user:
          description: Realm etcd admin user name
          type: string
          example: "etcd_admin"
        etcd_unsecured:
          description: Set true to disable etcd security
          type: boolean
          example: false
        jrpc_unsecured:
          description: Set true to disable jrpc security
          type: boolean
          example: false
        release_version:
          description: Release version
          type: string
          example: "1.0.4-beta.14077"
        ext_registries:
          description: Realm external registries
          type: array
          items:
            type: string
          example: [
            "https://quay.io:443"
          ]
        add_cert_dns:
          description: Realm certificate DNS
          type: array
          items:
            type: string
        add_cert_ips:
          description: Realm certificate IPs
          type: array
          items:
            type: string
        call_home_disable:
          description: Disable call home
          type: boolean
          example: false
        call_home_max_uploads:
          description: Call home maximum upload number
          type: string
          example: "2"
        call_home_backend:
          description: Call home backend
          type: string
        proxy_settings:
          $ref: "#/components/schemas/realm_proxy"
    
    realm_node:
      description: Realm node
      type: object
      properties:
        address:
          description: IP address
          type: string
          example: "250.58.109.193"
        annotations:
          description: Annotations
          type: object
          properties:
            hw-model:
              description: Model
              type: string
              example: "Virtual Machine"
            rack:
              description: Rack
              type: string
              example: "default_rack"
            sitename:
              description: Site
              type: string
              example: "site1"
            subrack:
              description: Sub rack
              type: string
              example: "default_subrack"
            system-product-name:
              description: System product name
              type: string
              example: "KVM_Virtual_Machine"
        hostname:
          description: Hostname
          type: string
          example: "silyin-redvm-1"
        hugemem:
          description: "Memory, in MB, to allocate in hugepages for RED daemon. If no
                        value is passed, 2GB per device, plus 2GB addiitional will be allocated by
                        default, limited to 70% of system memory.  This can be modifie after initial
                        configuration is complete."
          type: integer
          example: 5120
        total_limit:
          description: Total limit
          type: integer
        total_reserv:
          description: Total reserv
          type: integer
        total_cpus:
          description: Total cpus
          type: string
        client_net_cpulist:
          description: "Integer list, including ranges, specifying CPU codes allocated to the
                        client network pollers."
          type: string
        spdk_allowed:
          description: "List of device pci addresses to use for RED storage.
                        If no value is passed, all unused, unpartitioned devices will be used by
                        default.  This can be modified after initial configuration is complete."
          type: array
          items:
            type: string
          example: '["0000:08:00.0", "0000:09:00.0", "0000:0a:00.0", "0000:0b:00.0"]'
        roles:
          description: Node roles
          type: object
          properties:
            etcd:
              $ref: "#/components/schemas/container"
            hmi:
              $ref: "#/components/schemas/container"
            loki:
              $ref: "#/components/schemas/container"
            redagent:
              $ref: "#/components/schemas/container"
            redapi:
              $ref: "#/components/schemas/container"
            redclient:
              $ref: "#/components/schemas/container"
            reds3:
              $ref: "#/components/schemas/container"
            redsupport:
              $ref: "#/components/schemas/container"
            redui:
              $ref: "#/components/schemas/container"
            tsdb:
              $ref: "#/components/schemas/container"
    
    container:
      description: Container
      type: object
      properties:
        container_uuid:
          description: Container UUID
          type: string
          example: "cb24afc8-d6c7-42ea-b6ae-762b00432614"
        mem_limit:
          description: Container memory limit
          type: integer
          example: 5320
        mem_reservation:
          description: Container memory reservation
          type: integer
          example: 2560
        cpus:
          description: Container CPU limit
          type: integer
          example: 1
        cpuset:
          description: Container CPU set
          type: string
          example: "0,1"
        environment:
          description: Container environment vars
          type: object
    
    realm_update_new_req:
      required:
        - version
      type: object
      properties:
        version:
          description: Realm version
          type: string
        realm:
          $ref: "#/components/schemas/realm_detail"
        nodes:
          description: Realm nodes
          type: array
          items:
            $ref: "#/components/schemas/realm_node"
        fdstats:
          $ref: "#/components/schemas/fdstats"
    
    realm_patch_release_req:
      type: object
      properties:
        images:
          description: Patch each image
          type: object
    
    dmgr_state_req:
      type: object
      properties:
        enable:
          description: desired DMGR' state
          type: boolean
        reconcile_enabled:
          description: enable/disable reconcile or do not change
          type: boolean
        dns_monitor_enabled:
          description: enable/disable dns monitor or do not change
          type: boolean
        force_clear:
          description: disable DMGR and clear internal configuration
          type: boolean
        
    
    fdstats:
      description: fdstats
      type: object
      properties:
        distributed:
          description: distributed
          type: integer
          example: 3
        rebalanced:
          description: rebalanced
          type: integer
          example: 2
        fdnodes:
          description: fdnodes
          type: array
          items:
            type: string
          example: [
            "site1/default_rack/default_subrack/silyin-redvm-1",
            "site1/default_rack/default_subrack/silyin-redvm-3",
            "site1/default_rack/default_subrack/silyin-redvm-4"
          ]
    
    realm_upgrade_apply_req:
      required:
        - release_version
      type: object
      properties:
        release_version:
          description: The release version to upgrade to
          type: string
        services:
          description: List of components that need to be upgraded. By default all components included into the given release will be upgraded
          type: array
          items:
            type: string
        fast_upgrade:
          description: Use parallel upgrade strategy instead of rolling upgrade strategy
          type: boolean
    
    realm_upgrade_download_req:
      required:
        - release_version
      type: object
      properties:
        release_version:
          description: The release version to download
          type: string
    
    realm_upgrade_enable_req:
      required:
      - release_version
      type: object
      properties:
        release_version:
          description: The release version to enable
          type: string
        cluster:
          description: The cluster to enable
          type: string
        force:
          description: Force must be true of downgrade is being asked
          type: boolean
    
    realm_upgrade_metadata_update_req:
      type: object
      properties:
        release_metadata:
          description: The JSON encoded release metadata
          type: string
    
    realm_upgrade_channels:
      type: array
      items:
        type: string
    
    realm_upgrade_releases:
      type: array
      items:
        type: object
        properties:
          version:
            type: string
          channel:
            type: string
          date:
            type: string
            format: date-time
          notes:
            type: string
          services:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                version:
                  type: string
    
    realm_proxy:
      type: object
      properties:
        httpProxy:
          type: string
        httpsProxy:
          type: string
        noProxy:
          type: array
          items:
            type: string

    stats_config_resp:
      description: RED stats config response data
      nullable: true
      oneOf:
        - type: array
          items:
            $ref: '#/components/schemas/stats_config_item'
    
    stats_config_item:
      description: RED stats config measurement
      type: object
      properties:
        CollectFreq:
          description: Stat measurement frequency
          type: integer
          example: 10
        CurrentQlen:
          description: Current queue length
          type: integer
          example: 10
        LatestTS:
          description: Latest timestamp
          type: integer
          example: 1714137398
        MaxQLen:
          description: Max queue length
          type: integer
          example: 10
        MemoryInUse:
          description: Memory in use
          type: integer
          example: 7740
        Name:
          description: Stat measurement name
          type: string
          example: "spdkstat"
        State:
          description: State
          type: integer
          example: 0
        TargetType:
          description: Target type
          type: integer
          example: 4
    
    stats_resp:
      description: RED stats response data
      nullable: true
      oneOf:
        - type: object
          properties:
            hostname:
              description: Hostname stats reported
              type: string
              example: "silyin-redvm-1"
            result:
              description: Stat results
              type: array
              items:
                $ref: '#/components/schemas/stats_results'
    
    stats_results:
      description: RED stats result
      type: object
      properties:
        measurements:
          description: Stat measurements
          type: array
          items:
            $ref: '#/components/schemas/stats_measurement'
        timestamp:
          description: Timestamp
          type: integer
          example: 1714137298
    
    stats_measurement:
      description: Stats measurement
      type: object
      properties:
        measurement:
          description: Measurement name
          type: string
          example: "perf"
        fields:
          $ref: '#/components/schemas/stats_measurement_fields'
        tags:
          $ref: '#/components/schemas/stats_measurement_tags'
    
    stats_measurement_tags:
      description: Measurement tags
      type: object
      properties:
        Hostname:
          description: Measurement hostname
          type: string
          example: "silyin-redvm-1"
        cluster:
          description: Measurement cluster
          type: string
          example: "red01"
        instance:
          description: Measurement instance
          type: string
          example: "1"
        instanceUUID:
          description: Measurement instance UUID
          type: string
          example: "ec02ace0-14bf-4d98-9fdd-169b896f0658"
        subsystem:
          description: Measurement subsystem
          type: string
          example: "rpc"
        tag_0:
          description: Measurement tag 0
          type: string
          example: "network"
        tag_1:
          description: Measurement tag 1
          type: string
          example: "client[0][10000]"
    
    stats_measurement_fields:
      description: Measurement fields
      type: object
      properties:
        msg_bytes_recv:
          description: Bytes recv
          type: integer
          example: 62619376
        msg_bytes_sent:
          description: Bytes sent
          type: integer
          example: 8386920
        msg_dropped:
          description: Bytes dropped
          type: integer
          example: 0
        rdma_bytes:
          description: Rdma bytes
          type: integer
          example: 5236588544
        rdma_ops:
          description: Rdma ops
          type: integer
          example: 4994
        req_recv:
          description: Req recv
          type: integer
          example: 55176
        req_sent:
          description: Req sent
          type: integer
          example: 0
        rsp_recv:
          description: Rsp recv
          type: integer
          example: 0
        rsp_sent:
          description: Rsp sent
          type: integer
          example: 55176

    # new endpoint for redcli bfb upgrade list
    system_bfb_list_req:
      type: object
      properties:
        channel:
          description: BFB channel to list (e.g., stable, beta)
          type: string
        update_metadata:
          description: Update BFB metadata from remote registry
          type: boolean
        metadata_file:
          description: File containing BFB metadata for update
          type: string
        all:
          description: Show all available BFB images (by default only shows compatible images)
          type: boolean
    
    # BFB related schemas
    bfb_metadata_update_req:
      type: object
      properties:
        bfb_metadata:
          type: string
          description: BFB metadata content (optional, if updating from file)
    
    bfb_list_resp:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              version:
                type: string
                description: BFB version
              created:
                type: string
                format: date-time
                description: Creation timestamp
              image_name:
                type: string
                description: Docker image name
              channel:
                type: string
                description: Release channel (e.g., stable, beta)
              compatible:
                type: boolean
                description: Whether the image is compatible with current system

    verify_network_resp:
      description: Verify network connectivity response data
      nullable: true
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/verify_network_connectivity_res'
    
    verify_network_connectivity_res:
      description: Verify network connectivity results
      type: array
      items:
        $ref: "#/components/schemas/verify_network_result"
    
    io_test_status_resp:
      description: Io test status result
      nullable: true
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/io_test_status_results'
    
    io_test_status_results:
      description: Io test results
      type: object
      additionalProperties:
        $ref: '#/components/schemas/io_test_status_res'
    
    io_test_status_res:
      description: Io test status
      type: object
      properties:
        volume:
          description: Volume
          type: string
          example: "silyin-redvm-1:/dev/sdb"
        params:
          $ref: '#/components/schemas/io_test_params'
        state:
          description: Test state
          type: string
          example: "completed"
        date:
          description: Test date
          type: string
          example: "2024-05-23 13:32:17"
        ios_done:
          description: Ios done
          type: integer
          example: 736
        bytes_done:
          description: Bytes done
          type: integer
          example: 3014656
        cot_ios_issued:
          description: Cot ios done
          type: integer
          example: 736
        cot_obj_blk_msk:
          description: Cot obj blk msk
          type: integer
          example: 15
        cot_start_lba:
          description: Cot start lba
          type: integer
          example: 16
        cot_end_lba:
          description: Cot end lba
          type: integer
          example: 31708911
        cot_next_lba:
          description: Cot end lba
          type: integer
          example: 16
        iops:
          description: Iops
          type: integer
          example: 721
        mbs:
          description: mbs
          type: integer
          example: 2
        latency_min:
          description: Latency min
          type: integer
          example: 18164
        latency_ave:
          description: Latency ave
          type: integer
          example: 22055
        latency_max:
          description: Latency max
          type: integer
          example: 30075
        status:
          description: Test status
          type: string
          example: "Success"
    
    io_test_params:
      description: Io test parameters
      type: object
      properties:
        sequential:
          description: sequential
          type: boolean
          example: false
        write:
          description: write
          type: boolean
          example: true
        io_size:
          description: Io size
          type: integer
          example: 4096
        max_cmds:
          description: Max cmds
          type: integer
          example: 16
        test_cycles:
          description: Test cycles
          type: integer
          example: 100000000
        seconds:
          description: Seconds
          type: integer
          example: 1
    
    start_io_test_resp:
      description: Start io test results
      nullable: true
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/start_io_test_results'
    
    start_io_test_results:
      description: Start io test results
      type: object
      additionalProperties:
        $ref: '#/components/schemas/start_io_test_res'
    
    start_io_test_res:
      description: Start io test result
      type: object
      properties:
        status:
          description: Test start status
          type: string
          example: "Cat iotest started"
    
    start_redkvcl_test_rpc_resp:
      description: Start redkvcl_test_rpc test result
      type: string
      example: "Successfully started redkvcl_test_rpc"
    
    redkvcl_test_rpc_resp:
      description: Status of started redkvcl_test_rpc test result
      type: object
      properties:
        error:
          description: Error message
          type: string
          example: "red client library is not yet ready for I/O. Retry with timeout of 1 secs !\n3000 ops executed, 0 of them failed\n\n"
        output:
          description: Test output
          type: string
          example: "T*  I --- Completing all iterations: 1231 assign ops/sec; 16713 lookup ops/sec;  ---\n"
        status:
          description: Test status
          type: string
          example: "Complete"
    
    verify_network_result:
      description: Verify network connectivity result
      type: object
      properties:
        type:
          description: Network connection type
          type: string
          example: "redagent"
        hostname:
          description: Network connection hostname
          type: string
          example: "silyin-redvm-2"
        ip:
          description: Network connection ip
          type: string
          example: "250.58.174.230"
        result:
          description: Result
          type: boolean
          example: true
    
    network_test_get_agent_groups_resp:
      description: Network test agent groups response data
      nullable: true
      oneOf:
        - type: object
          properties:
            groups:
              description: Network test agent groups
              type: array
              items:
                $ref: '#/components/schemas/network_test_agent_groups_results'
    
    network_test_agent_groups_results:
      description: Network test agent groups results
      type: object
      properties:
        reds3:
          description: Red S3 groups
          type: object
          properties:
            enum:
              description: Groups list
              type: object
    
    network_test_start_resp:
      description: Network test start response data
      nullable: true
      oneOf:
        - type: string
          description: Network test ID
          example: "a3e16984-5e73-4362-99c4-33430659a762"
    
    network_test_status_resp:
      description: Network test status response data
      nullable: true
      oneOf:
        - type: object
          properties:
            status:
              description: Network test status
              type: string
              example: "done"
            result:
              description: Network test results
              type: array
              items:
                $ref: '#/components/schemas/network_test_results'
    
    network_test_results:
      description: Network test results
      type: object
      properties:
        test:
          description: Test name
          type: string
          example: "self single-threaded 0k RPC"
        total:
            $ref: '#/components/schemas/network_test_total'
        bottom15:
          description: Bottom 15 test results
          type: array
          items:
            $ref: '#/components/schemas/network_test_bottom15'
        top15:
          description: Top 15 test results
          type: array
          items:
            $ref: '#/components/schemas/network_test_top15'
        results:
          description: Test results
          type: array
          items:
            $ref: '#/components/schemas/network_test_result'
    
    network_test_result:
      description: Network test results
      type: object
      properties:
        bw:
          description: bw
          type: number
          example: 0
        bw_ext:
          $ref: '#/components/schemas/network_test_result_bw_ext'
        endpoint:
          description: Network test endpoint
          type: string
          example: "1_instance"
        hostname:
          description: Network test endpoint hostname
          type: string
          example: "silyin-redvm-1"
        iops:
          description: iops
          type: number
          example: 109958.9670123099
        iops_ext:
          $ref: '#/components/schemas/network_test_result_iops_ext'
        latency:
          $ref: '#/components/schemas/network_test_result_latency'
    
    network_test_result_latency:
      description: Network test latency
      type: object
      properties:
        avg:
          description: avg
          type: number
          example: 9.094301512381888
        max:
          description: max
          type: number
          example: 9.094301512381888
        min:
          description: min
          type: number
          example: 9.094301512381888
    
    network_test_bottom15:
      description: Network test bottom 15 results
      type: object
      properties:
        endpoint:
          description: Network test endpoint
          type: string
          example: "2_instance"
        hostname:
          description: Network test endpoint hostname
          type: string
          example: "silyin-redvm-2"
        iops:
          description: iops
          type: number
          example: 109669.15613233754
    
    network_test_top15:
      description: Network test top 15 results
      type: object
      properties:
        endpoint:
          description: Network test endpoint
          type: string
          example: "3_instance"
        hostname:
          description: Network test endpoint hostname
          type: string
          example: "silyin-redvm-3"
        iops:
          description: iops
          type: number
          example: 110120.5779758844
    
    network_test_total:
      description: Network test total results
      type: object
      properties:
        bw:
          description: bw
          type: number
          example: 0
        bw_ext:
          $ref: '#/components/schemas/network_test_result_bw_ext'
        iops:
          description: iops
          type: number
          example: 329748.7011205319
        iops_ext:
          $ref: '#/components/schemas/network_test_result_iops_ext'
    
    network_test_result_bw_ext:
      description: Network test bw ext
      type: object
      properties:
        avg:
          description: avg
          type: number
          example: 0
        max:
          description: max
          type: number
          example: 0
        min:
          description: min
          type: number
          example: 0
    
    network_test_result_iops_ext:
      description: Network test iops ext
      type: object
      properties:
        avg:
          description: avg
          type: number
          example: 109916.23370684397
        max:
          description: max
          type: number
          example: 110120.5779758844
        min:
          description: min
          type: number
          example: 109669.15613233754

  examples:
    cat_example:
      description: CAT example
      value: {
        "affine_core": 1,
        "bept_cachesz": 214748364,
        "bept_dirtythd": 75,
        "bept_fanout": 28,
        "bept_qcachesz": 0,
        "blocksize": 4096,
        "bulk_cachesz": 107374182,
        "bulk_size": 262144,
        "capability": 2,
        "capacity": 129879769088,
        "cat_id": 8,
        "csum_alg": 5,
        "delete_pending": false,
        "dev_replacement": false,
        "devnodes": {
          "d2985825-f2a4-4b4f-99d1-70a0200bb187": {
            "numanode": 4294967295,
            "setup": "{\"name\": \"silyin-redvm-2:/dev/sde\", \"filename\": \"/dev/sde\", \"block_size\": 512, \"type\": \"file\"}"
          }
        },
        "encr_mode": 1,
        "evicted_epoch": 0,
        "evicted_time": 0,
        "eviction_catchup_epoch": 1,
        "eviction_opu": 0,
        "failure_domains": [
          "chassis:QEMU-",
          "device:silyin-redvm-2:/dev/sde",
          "subrack:default_subrack",
          "instance:silyin-redvm-2-",
          "rack:default_rack",
          "site:site1"
        ],
        "health": 1,
        "heap_size": 0,
        "instdata": {
          "e46f94f7-e8aa-4afc-95ce-768cf33ad3e9": {
            "cat_health": 1
          }
        },
        "instpref": [
          "e46f94f7-e8aa-4afc-95ce-768cf33ad3e9"
        ],
        "intlg_size": 1073741824,
        "join_uuid": "82795bda-6b9f-43d0-92a7-66d25bcaa8af",
        "joined_epoch": 7,
        "layout_weight": 1,
        "lcore": 1,
        "location": "silyin-redvm-2:/dev/sde",
        "num_cores": 0,
        "obj_size": 65536,
        "open_retries": 0,
        "owner": 2,
        "reinit": 1,
        "removed_epoch": 0,
        "runmode": 1,
        "udid": "silyin-redvm-2:/dev/sde                                     "
      }

    cats_example:
      description: CATs example
      value: {
        "0bdca466-a01d-4946-8671-69a179f62c59": "http://10.25.116.98/redapi/v1/clusters/red01/configs/auto_config/pools/19521219-d5fe-4319-b084-ec37ce3826e6/cats/0bdca466-a01d-4946-8671-69a179f62c59",
        "18269311-63a5-4d69-80df-f6aa43656110": "http://10.25.116.98/redapi/v1/clusters/red01/configs/auto_config/pools/19521219-d5fe-4319-b084-ec37ce3826e6/cats/18269311-63a5-4d69-80df-f6aa43656110",
        "33d6108a-812f-4fee-8b54-e3b364b256b2": "http://10.25.116.98/redapi/v1/clusters/red01/configs/auto_config/pools/19521219-d5fe-4319-b084-ec37ce3826e6/cats/33d6108a-812f-4fee-8b54-e3b364b256b2",
        "344b4918-75a7-475e-995d-9078221b826c": "http://10.25.116.98/redapi/v1/clusters/red01/configs/auto_config/pools/19521219-d5fe-4319-b084-ec37ce3826e6/cats/344b4918-75a7-475e-995d-9078221b826c",
        "514e41b0-563f-42f4-87c7-189fbc3a2d82": "http://10.25.116.98/redapi/v1/clusters/red01/configs/auto_config/pools/19521219-d5fe-4319-b084-ec37ce3826e6/cats/514e41b0-563f-42f4-87c7-189fbc3a2d82",
        "58e5d097-2d2b-42d2-85d2-2fa074254077": "http://10.25.116.98/redapi/v1/clusters/red01/configs/auto_config/pools/19521219-d5fe-4319-b084-ec37ce3826e6/cats/58e5d097-2d2b-42d2-85d2-2fa074254077",
        "6edc9c43-eab1-4d26-92a6-aac5f1de430c": "http://10.25.116.98/redapi/v1/clusters/red01/configs/auto_config/pools/19521219-d5fe-4319-b084-ec37ce3826e6/cats/6edc9c43-eab1-4d26-92a6-aac5f1de430c",
        "f71624c3-8fd5-4e38-ba52-1adbfd949da7": "http://10.25.116.98/redapi/v1/clusters/red01/configs/auto_config/pools/19521219-d5fe-4319-b084-ec37ce3826e6/cats/f71624c3-8fd5-4e38-ba52-1adbfd949da7"
      }

    cluster_example:
      description: Get cluster by name
      value: {
        "cmelect": {
          "": {
            "f68e2e7839e779": {
              "candidate_election_stime": 1710176624641,
              "candidate_instance_id": 2,
              "candidate_uuid": "8e5ec3e6-f321-49b1-a2b2-17ddfdbae152"
            },
            "f68e2e7839e78f": {
              "candidate_election_stime": 1710176625284,
              "candidate_instance_id": 1,
              "candidate_uuid": "3806135f-5894-483e-84a5-b159de53f28c"
            }
          }
        },
        "configs": {
          "auto_config": {
            "clients": {
              "default": {
                "interfaces": [
                  {
                    "device_name": "eth*",
                    "networks": [
                      "0784b796-6cbc-4ff9-ae5f-7cfa44f08d98"
                    ]
                  },
                  {
                    "device_name": "en*",
                    "networks": [
                      "0784b796-6cbc-4ff9-ae5f-7cfa44f08d98"
                    ]
                  },
                  {
                    "device_name": "oob*",
                    "networks": [
                      "0784b796-6cbc-4ff9-ae5f-7cfa44f08d98"
                    ]
                  },
                  {
                    "device_name": "p*",
                    "networks": [
                      "0784b796-6cbc-4ff9-ae5f-7cfa44f08d98"
                    ]
                  },
                  {
                    "device_name": "lo*",
                    "networks": [
                      "da76d313-c9da-4bc5-891a-7576fa498ab6"
                    ]
                  },
                  {
                    "device_name": "roce*",
                    "networks": [
                      "6039feb7-bf92-4865-92f0-1f98c93e47f7"
                    ]
                  }
                ],
                "netrules": {
                  "*": {
                    "tcp": {
                      "allow": [
                        "speed]10-ANY]"
                      ]
                    }
                  }
                },
                "rpc_credits": 32
              }
            },
            "cluster_uuid": "3d2ca431-e2dd-49c1-9b14-72a4b928961a",
            "config": "auto_config",
            "dp_profiles": {
              "6b2ef245-1c07-4d54-98ea-49832706476d": {
                "availability": 0,
                "data_ltid": 3,
                "data_poolid": 1,
                "efficiency": 0,
                "id": 1,
                "max_stripe": 0,
                "meta_ltid": 2,
                "meta_poolid": 1,
                "min_stripe": 0,
                "n_write_later": 0,
                "name": "SYSTEM_DATA_1",
                "policy_id": 3,
                "protection": 0,
                "spare_count": 0,
                "t_read_max": 0,
                "t_write_max": 0
              }
            },
            "instances": {
              "7a00b256-09ef-4572-87d1-91ac32a60630": {
                "auxiliary_cpuset": "0x2",
                "cat_cpuset": "0x2",
                "handler_cpuset": "0x2",
                "hostname": "silyin-redvm-1",
                "hostuuid": "43391329-3609-4ba4-9d3b-e50cf083d669",
                "instance_id": 1,
                "interfaces": {
                  "dontuseme0": {
                    "enabled": false,
                    "nameinfo": "silyin-redvm-1.vms.virts.svc.dev1.local",
                    "numanode": -1
                  },
                  "eth1": {
                    "enabled": true,
                    "jrpc": {
                      "encrypt": false
                    },
                    "nameinfo": "silyin-redvm-1",
                    "numanode": -1,
                    "rpc": {
                      "client_port": {
                        "base": 3301,
                        "count": 100
                      },
                      "networks": [
                        "0784b796-6cbc-4ff9-ae5f-7cfa44f08d98"
                      ],
                      "server_port": {
                        "base": 3201,
                        "count": 100
                      }
                    }
                  },
                  "lo": {
                    "enabled": true,
                    "nameinfo": "localhost",
                    "numanode": -1,
                    "rpc": {
                      "client_port": {
                        "base": 3301,
                        "count": 100
                      },
                      "networks": [
                        "da76d313-c9da-4bc5-891a-7576fa498ab6"
                      ],
                      "server_port": {
                        "base": 3201,
                        "count": 100
                      }
                    }
                  },
                  "rocep6s0": {
                    "enabled": true,
                    "nameinfo": "",
                    "numanode": -1,
                    "rpc": {
                      "client_port": {
                        "base": 3301,
                        "count": 100
                      },
                      "networks": [
                        "6039feb7-bf92-4865-92f0-1f98c93e47f7"
                      ],
                      "server_port": {
                        "base": 3201,
                        "count": 100
                      }
                    }
                  }
                },
                "jrpc_settings": {
                  "base": 3102,
                  "count": 1,
                  "worker_count": 12
                },
                "net_cpuset": "0x2",
                "nvme_qualified_name": "nqn.2024-03.com.ddn:nvme.red-7a00b256-09ef-4572-87d1-91ac32a60630",
                "nvmf_cpuset": "0x2",
                "posix_cpuset": "0x1",
                "spdk_legacy_mem": false,
                "spdk_main_cpuset": "0x2",
                "spdk_memory": 0
              },
              "e2fa121b-be97-4b1c-a154-45daa78a778b": {
                "auxiliary_cpuset": "0x2",
                "cat_cpuset": "0x2",
                "handler_cpuset": "0x2",
                "hostname": "silyin-redvm-2",
                "hostuuid": "8b07f70d-5f6b-4269-a328-fae4e661ebbb",
                "instance_id": 2,
                "interfaces": {
                  "dontuseme0": {
                    "enabled": false,
                    "nameinfo": "250-58-174-230.silyin-redvm-2.virts.svc.dev1.local",
                    "numanode": -1
                  },
                  "eth1": {
                    "enabled": true,
                    "jrpc": {
                      "encrypt": false
                    },
                    "nameinfo": "silyin-redvm-2",
                    "numanode": -1,
                    "rpc": {
                      "client_port": {
                        "base": 3301,
                        "count": 100
                      },
                      "networks": [
                        "0784b796-6cbc-4ff9-ae5f-7cfa44f08d98"
                      ],
                      "server_port": {
                        "base": 3201,
                        "count": 100
                      }
                    }
                  },
                  "lo": {
                    "enabled": true,
                    "nameinfo": "localhost",
                    "numanode": -1,
                    "rpc": {
                      "client_port": {
                        "base": 3301,
                        "count": 100
                      },
                      "networks": [
                        "da76d313-c9da-4bc5-891a-7576fa498ab6"
                      ],
                      "server_port": {
                        "base": 3201,
                        "count": 100
                      }
                    }
                  },
                  "rocep6s0": {
                    "enabled": true,
                    "nameinfo": "",
                    "numanode": -1,
                    "rpc": {
                      "client_port": {
                        "base": 3301,
                        "count": 100
                      },
                      "networks": [
                        "6039feb7-bf92-4865-92f0-1f98c93e47f7"
                      ],
                      "server_port": {
                        "base": 3201,
                        "count": 100
                      }
                    }
                  }
                },
                "jrpc_settings": {
                  "base": 3102,
                  "count": 1,
                  "worker_count": 12
                },
                "net_cpuset": "0x2",
                "nvme_qualified_name": "nqn.2024-03.com.ddn:nvme.red-e2fa121b-be97-4b1c-a154-45daa78a778b",
                "nvmf_cpuset": "0x2",
                "posix_cpuset": "0x1",
                "spdk_legacy_mem": false,
                "spdk_main_cpuset": "0x2",
                "spdk_memory": 0
              }
            },
            "master_key": -9217911636692407000,
            "networks": {
              "0784b796-6cbc-4ff9-ae5f-7cfa44f08d98": {
                "name": "tcp-auto",
                "policy": {
                  "backup": true,
                  "cq_nentries": 16384,
                  "encryption": false,
                  "eq_nentries": 100,
                  "max_cq_count": 64,
                  "weight": 0
                },
                "subnet": "",
                "tags": [
                  "NVMF_DATA_SERVICE",
                  "NFS_DATA_SERVICE",
                  "SQL_DATA_SERVICE",
                  "SMB_DATA_SERVICE",
                  "REDFS_DATA_SERVICE"
                ],
                "type": "tcp"
              },
              "6039feb7-bf92-4865-92f0-1f98c93e47f7": {
                "name": "roce-auto",
                "policy": {
                  "backup": false,
                  "cq_nentries": 16384,
                  "encryption": false,
                  "eq_nentries": 100,
                  "max_cq_count": 64,
                  "weight": 100
                },
                "subnet": "",
                "tags": [
                  "NVMF_DATA_SERVICE",
                  "NFS_DATA_SERVICE",
                  "SQL_DATA_SERVICE",
                  "SMB_DATA_SERVICE",
                  "REDFS_DATA_SERVICE"
                ],
                "type": "roce"
              },
              "da76d313-c9da-4bc5-891a-7576fa498ab6": {
                "name": "lo-auto",
                "policy": {
                  "backup": false,
                  "cq_nentries": 16384,
                  "encryption": false,
                  "eq_nentries": 100,
                  "max_cq_count": 64,
                  "weight": 100
                },
                "subnet": "",
                "tags": [
                  "NVMF_DATA_SERVICE",
                  "NFS_DATA_SERVICE",
                  "SQL_DATA_SERVICE",
                  "SMB_DATA_SERVICE",
                  "REDFS_DATA_SERVICE",
                  "RPC_LOOPBACK"
                ],
                "type": "tcp"
              }
            },
            "notes": {
              "00": {
                "fid": "bce3326224112c4d",
                "sev": 5,
                "source": "43391329-3609-4ba4-9d3b-e50cf083d669",
                "tod": 1710176621
              }
            },
            "policies": {
              "2283aac4-8823-4a34-85ab-cc534402ba78": {
                "efficiency": 0,
                "id": 2,
                "max_stripe": 262144,
                "min_stripe": 0,
                "n_write_later": 0,
                "name": "USER_1",
                "pool_id": 1,
                "pref_avail": 0,
                "pref_avail_str": "none",
                "protection": 3,
                "t_read_max": 0,
                "t_write_max": 0,
                "type": 1
              },
              "c7dc1f43-e765-45b1-bed1-f40958034f51": {
                "efficiency": 87,
                "id": 3,
                "max_stripe": 262144,
                "min_stripe": 16384,
                "n_write_later": 1,
                "name": "DATA_1",
                "pool_id": 1,
                "pref_avail": 0,
                "pref_avail_str": "none",
                "protection": 11,
                "t_read_max": 6000,
                "t_write_max": 3000,
                "type": 2
              },
              "c8c74582-6002-41f0-b50b-76146b682184": {
                "efficiency": 0,
                "id": 1,
                "max_stripe": 65536,
                "min_stripe": 0,
                "n_write_later": 0,
                "name": "SYS",
                "pool_id": 1,
                "pref_avail": 0,
                "pref_avail_str": "none",
                "protection": 4,
                "t_read_max": 0,
                "t_write_max": 0,
                "type": 3
              }
            },
            "pools": {
              "d4d31fc8-7266-43d5-8f15-4cdee72786f3": {
                "bulk_size": 262144,
                "cat_map": {
                  "31917fd1-a036-401b-b71d-55732ae17728": {
                    "bept_cachesz": 214748364,
                    "bept_dirtythd": 75,
                    "bept_fanout": 28,
                    "bept_qcachesz": 0,
                    "blocksize": -1,
                    "bulk_cachesz": 107374182,
                    "bulk_size": 262144,
                    "capacity": 129879769088,
                    "cat_id": 2,
                    "csum_alg": 5,
                    "dev_replacement": false,
                    "devnodes": {
                      "43391329-3609-4ba4-9d3b-e50cf083d669": {
                        "numanode": -1,
                        "setup": "{\"name\": \"silyin-redvm-1:/dev/sdc\", \"filename\": \"/dev/sdc\", \"block_size\": 512, \"type\": \"file\"}"
                      }
                    },
                    "encr_mode": 3,
                    "failure_domains": [
                      "site:site1",
                      "rack:default_rack",
                      "subrack:default_subrack",
                      "chassis:QEMU-",
                      "instance:silyin-redvm-1-",
                      "device:silyin-redvm-1:/dev/sdc"
                    ],
                    "heap_size": 0,
                    "instpref": [
                      "7a00b256-09ef-4572-87d1-91ac32a60630"
                    ],
                    "intlg_size": 1073741824,
                    "layout_weight": 1,
                    "location": "silyin-redvm-1:/dev/sdc",
                    "num_cores": 0,
                    "obj_size": 65536,
                    "open_retries": 0,
                    "reinit": 1,
                    "udid": "silyin-redvm-1:/dev/sdc                                     "
                  },
                  "4b7ba4e7-60b0-4057-a4ed-38d9a7fa15dc": {
                    "bept_cachesz": 214748364,
                    "bept_dirtythd": 75,
                    "bept_fanout": 28,
                    "bept_qcachesz": 0,
                    "blocksize": -1,
                    "bulk_cachesz": 107374182,
                    "bulk_size": 262144,
                    "capacity": 129879769088,
                    "cat_id": 5,
                    "csum_alg": 5,
                    "dev_replacement": false,
                    "devnodes": {
                      "8b07f70d-5f6b-4269-a328-fae4e661ebbb": {
                        "numanode": -1,
                        "setup": "{\"name\": \"silyin-redvm-2:/dev/sdb\", \"filename\": \"/dev/sdb\", \"block_size\": 512, \"type\": \"file\"}"
                      }
                    },
                    "encr_mode": 3,
                    "failure_domains": [
                      "site:site1",
                      "rack:default_rack",
                      "subrack:default_subrack",
                      "chassis:QEMU-",
                      "instance:silyin-redvm-2-",
                      "device:silyin-redvm-2:/dev/sdb"
                    ],
                    "heap_size": 0,
                    "instpref": [
                      "e2fa121b-be97-4b1c-a154-45daa78a778b"
                    ],
                    "intlg_size": 1073741824,
                    "layout_weight": 1,
                    "location": "silyin-redvm-2:/dev/sdb",
                    "num_cores": 0,
                    "obj_size": 65536,
                    "open_retries": 0,
                    "reinit": 1,
                    "udid": "silyin-redvm-2:/dev/sdb                                     "
                  },
                  "532f8358-b5c3-4590-ac73-d65080ddd0e9": {
                    "bept_cachesz": 214748364,
                    "bept_dirtythd": 75,
                    "bept_fanout": 28,
                    "bept_qcachesz": 0,
                    "blocksize": -1,
                    "bulk_cachesz": 107374182,
                    "bulk_size": 262144,
                    "capacity": 129879769088,
                    "cat_id": 4,
                    "csum_alg": 5,
                    "dev_replacement": false,
                    "devnodes": {
                      "43391329-3609-4ba4-9d3b-e50cf083d669": {
                        "numanode": -1,
                        "setup": "{\"name\": \"silyin-redvm-1:/dev/sde\", \"filename\": \"/dev/sde\", \"block_size\": 512, \"type\": \"file\"}"
                      }
                    },
                    "encr_mode": 3,
                    "failure_domains": [
                      "site:site1",
                      "rack:default_rack",
                      "subrack:default_subrack",
                      "chassis:QEMU-",
                      "instance:silyin-redvm-1-",
                      "device:silyin-redvm-1:/dev/sde"
                    ],
                    "heap_size": 0,
                    "instpref": [
                      "7a00b256-09ef-4572-87d1-91ac32a60630"
                    ],
                    "intlg_size": 1073741824,
                    "layout_weight": 1,
                    "location": "silyin-redvm-1:/dev/sde",
                    "num_cores": 0,
                    "obj_size": 65536,
                    "open_retries": 0,
                    "reinit": 1,
                    "udid": "silyin-redvm-1:/dev/sde                                     "
                  },
                  "75eeeddc-0a22-4d50-b1a9-cc561c7aef60": {
                    "bept_cachesz": 214748364,
                    "bept_dirtythd": 75,
                    "bept_fanout": 28,
                    "bept_qcachesz": 0,
                    "blocksize": -1,
                    "bulk_cachesz": 107374182,
                    "bulk_size": 262144,
                    "capacity": 129879769088,
                    "cat_id": 6,
                    "csum_alg": 5,
                    "dev_replacement": false,
                    "devnodes": {
                      "8b07f70d-5f6b-4269-a328-fae4e661ebbb": {
                        "numanode": -1,
                        "setup": "{\"name\": \"silyin-redvm-2:/dev/sdc\", \"filename\": \"/dev/sdc\", \"block_size\": 512, \"type\": \"file\"}"
                      }
                    },
                    "encr_mode": 3,
                    "failure_domains": [
                      "site:site1",
                      "rack:default_rack",
                      "subrack:default_subrack",
                      "chassis:QEMU-",
                      "instance:silyin-redvm-2-",
                      "device:silyin-redvm-2:/dev/sdc"
                    ],
                    "heap_size": 0,
                    "instpref": [
                      "e2fa121b-be97-4b1c-a154-45daa78a778b"
                    ],
                    "intlg_size": 1073741824,
                    "layout_weight": 1,
                    "location": "silyin-redvm-2:/dev/sdc",
                    "num_cores": 0,
                    "obj_size": 65536,
                    "open_retries": 0,
                    "reinit": 1,
                    "udid": "silyin-redvm-2:/dev/sdc                                     "
                  },
                  "808f9cbd-15a8-4659-b714-c2527d8655be": {
                    "bept_cachesz": 214748364,
                    "bept_dirtythd": 75,
                    "bept_fanout": 28,
                    "bept_qcachesz": 0,
                    "blocksize": -1,
                    "bulk_cachesz": 107374182,
                    "bulk_size": 262144,
                    "capacity": 129879769088,
                    "cat_id": 1,
                    "csum_alg": 5,
                    "dev_replacement": false,
                    "devnodes": {
                      "43391329-3609-4ba4-9d3b-e50cf083d669": {
                        "numanode": -1,
                        "setup": "{\"name\": \"silyin-redvm-1:/dev/sdb\", \"filename\": \"/dev/sdb\", \"block_size\": 512, \"type\": \"file\"}"
                      }
                    },
                    "encr_mode": 3,
                    "failure_domains": [
                      "site:site1",
                      "rack:default_rack",
                      "subrack:default_subrack",
                      "chassis:QEMU-",
                      "instance:silyin-redvm-1-",
                      "device:silyin-redvm-1:/dev/sdb"
                    ],
                    "heap_size": 0,
                    "instpref": [
                      "7a00b256-09ef-4572-87d1-91ac32a60630"
                    ],
                    "intlg_size": 1073741824,
                    "layout_weight": 1,
                    "location": "silyin-redvm-1:/dev/sdb",
                    "num_cores": 0,
                    "obj_size": 65536,
                    "open_retries": 0,
                    "reinit": 1,
                    "udid": "silyin-redvm-1:/dev/sdb                                     "
                  },
                  "98ebe85d-7f97-4119-8a89-ebc130be07aa": {
                    "bept_cachesz": 214748364,
                    "bept_dirtythd": 75,
                    "bept_fanout": 28,
                    "bept_qcachesz": 0,
                    "blocksize": -1,
                    "bulk_cachesz": 107374182,
                    "bulk_size": 262144,
                    "capacity": 129879769088,
                    "cat_id": 3,
                    "csum_alg": 5,
                    "dev_replacement": false,
                    "devnodes": {
                      "43391329-3609-4ba4-9d3b-e50cf083d669": {
                        "numanode": -1,
                        "setup": "{\"name\": \"silyin-redvm-1:/dev/sdd\", \"filename\": \"/dev/sdd\", \"block_size\": 512, \"type\": \"file\"}"
                      }
                    },
                    "encr_mode": 3,
                    "failure_domains": [
                      "site:site1",
                      "rack:default_rack",
                      "subrack:default_subrack",
                      "chassis:QEMU-",
                      "instance:silyin-redvm-1-",
                      "device:silyin-redvm-1:/dev/sdd"
                    ],
                    "heap_size": 0,
                    "instpref": [
                      "7a00b256-09ef-4572-87d1-91ac32a60630"
                    ],
                    "intlg_size": 1073741824,
                    "layout_weight": 1,
                    "location": "silyin-redvm-1:/dev/sdd",
                    "num_cores": 0,
                    "obj_size": 65536,
                    "open_retries": 0,
                    "reinit": 1,
                    "udid": "silyin-redvm-1:/dev/sdd                                     "
                  },
                  "c2f74632-179f-4799-a3af-6a8b28d38bc5": {
                    "bept_cachesz": 214748364,
                    "bept_dirtythd": 75,
                    "bept_fanout": 28,
                    "bept_qcachesz": 0,
                    "blocksize": -1,
                    "bulk_cachesz": 107374182,
                    "bulk_size": 262144,
                    "capacity": 129879769088,
                    "cat_id": 7,
                    "csum_alg": 5,
                    "dev_replacement": false,
                    "devnodes": {
                      "8b07f70d-5f6b-4269-a328-fae4e661ebbb": {
                        "numanode": -1,
                        "setup": "{\"name\": \"silyin-redvm-2:/dev/sdd\", \"filename\": \"/dev/sdd\", \"block_size\": 512, \"type\": \"file\"}"
                      }
                    },
                    "encr_mode": 3,
                    "failure_domains": [
                      "site:site1",
                      "rack:default_rack",
                      "subrack:default_subrack",
                      "chassis:QEMU-",
                      "instance:silyin-redvm-2-",
                      "device:silyin-redvm-2:/dev/sdd"
                    ],
                    "heap_size": 0,
                    "instpref": [
                      "e2fa121b-be97-4b1c-a154-45daa78a778b"
                    ],
                    "intlg_size": 1073741824,
                    "layout_weight": 1,
                    "location": "silyin-redvm-2:/dev/sdd",
                    "num_cores": 0,
                    "obj_size": 65536,
                    "open_retries": 0,
                    "reinit": 1,
                    "udid": "silyin-redvm-2:/dev/sdd                                     "
                  },
                  "fa6714af-7ebe-4b26-b310-24929808d365": {
                    "bept_cachesz": 214748364,
                    "bept_dirtythd": 75,
                    "bept_fanout": 28,
                    "bept_qcachesz": 0,
                    "blocksize": -1,
                    "bulk_cachesz": 107374182,
                    "bulk_size": 262144,
                    "capacity": 129879769088,
                    "cat_id": 8,
                    "csum_alg": 5,
                    "dev_replacement": false,
                    "devnodes": {
                      "8b07f70d-5f6b-4269-a328-fae4e661ebbb": {
                        "numanode": -1,
                        "setup": "{\"name\": \"silyin-redvm-2:/dev/sde\", \"filename\": \"/dev/sde\", \"block_size\": 512, \"type\": \"file\"}"
                      }
                    },
                    "encr_mode": 3,
                    "failure_domains": [
                      "site:site1",
                      "rack:default_rack",
                      "subrack:default_subrack",
                      "chassis:QEMU-",
                      "instance:silyin-redvm-2-",
                      "device:silyin-redvm-2:/dev/sde"
                    ],
                    "heap_size": 0,
                    "instpref": [
                      "e2fa121b-be97-4b1c-a154-45daa78a778b"
                    ],
                    "intlg_size": 1073741824,
                    "layout_weight": 1,
                    "location": "silyin-redvm-2:/dev/sde",
                    "num_cores": 0,
                    "obj_size": 65536,
                    "open_retries": 0,
                    "reinit": 1,
                    "udid": "silyin-redvm-2:/dev/sde                                     "
                  }
                },
                "device_open_retries": 4,
                "device_replacement": false,
                "fanout": 0,
                "name": "SYSTEM",
                "obj_size": 0,
                "pool_id": 1,
                "sys_meta": true,
                "tables": {
                  "1": {
                    "data_protect": 4,
                    "fd_rank": {
                      "board:*": 6,
                      "center:*": 2,
                      "chassis:*": 5,
                      "device:*": 9,
                      "host:*": 7,
                      "instance:*": 8,
                      "rack:*": 3,
                      "site:*": 1,
                      "subrack:*": 4
                    },
                    "lrevict": 0,
                    "type": 3
                  },
                  "2": {
                    "data_protect": 3,
                    "fd_rank": {
                      "board:*": 6,
                      "center:*": 2,
                      "chassis:*": 5,
                      "device:*": 9,
                      "host:*": 7,
                      "instance:*": 8,
                      "rack:*": 3,
                      "site:*": 1,
                      "subrack:*": 4
                    },
                    "lrevict": 0,
                    "type": 1
                  },
                  "3": {
                    "data_protect": 11,
                    "fd_rank": {
                      "board:*": 6,
                      "center:*": 2,
                      "chassis:*": 5,
                      "device:*": 9,
                      "host:*": 7,
                      "instance:*": 8,
                      "rack:*": 3,
                      "site:*": 1,
                      "subrack:*": 4
                    },
                    "lrevict": 1,
                    "type": 2
                  }
                },
                "user_data": true,
                "user_meta": true
              }
            },
            "signing_key": "A2V8rhD7nJgQ4tnqf4Odog==",
            "timestamp": "2024-03-11_17:03:41.382655",
            "tunables": {
              "agent_max_respawn": 600,
              "auto_upgrade": false,
              "blocksize": 4096,
              "c2s_credit_high": 64,
              "c2s_credit_low": 64,
              "cap_gossip_us_per_tick": 2500000,
              "capacity_limit_del_reject_pcnt": 95,
              "capacity_limit_stall_pcnt": 85,
              "capacity_limit_wrt_reject_pcnt": 90,
              "checksum_alg": "crc64",
              "client_interrupts": true,
              "client_rdma_pool_sz": 256,
              "cm_lease_timeout": 5,
              "compress_min_gain": 12,
              "compression": "FASTCOMPRESS",
              "dlm_cache_max": 65536,
              "dlm_cacheref_max": 8192,
              "dlm_credit_high": 4294967295,
              "dlm_credit_low": 4294967295,
              "eb_catcleaner_interval": 72000,
              "eb_scrubber_interval": 43200,
              "eb_grace_period_ms": 10000,
              "eb_large_grace_period_ms": 86400000,
              "eb_tablet_sel_policy": 3,
              "eb_tablet_search_max": 5,
              "eb_tablet_cache_max": 10,
              "enable_proc_info": false,
              "encrypt_alg": "aes-256-xts",
              "encryption": "on",
              "etc_vector_size": 32,
              "fastcompress": "LZ4",
              "gc_boot_time": 0,
              "gc_horizon_time": 600,
              "gc_ticker_disabled": false,
              "gossip_us_per_tick": 250000,
              "highcompress": "ZSTD",
              "intentlog_unmap": false,
              "iobuf_large_bufsize": 135168,
              "iobuf_large_pool_count": 1024,
              "iobuf_small_bufsize": 8192,
              "iobuf_small_pool_count": 8192,
              "jrpc_auth_enforce": false,
              "jrpc_client_keepalive": 120,
              "jrpc_debug_enable": true,
              "jrpc_timeout_auth": 0,
              "jrpc_timeout_idle": 0,
              "jrpc_timeout_token": 900,
              "jrpc_trace_all": false,
              "liveness_timeout": 8,
              "max_heap_size": 0,
              "nvme_hotplug": true,
              "nvmf_buf_cache_size": 4294967295,
              "nvmf_in_capsule_data_size": 4096,
              "nvmf_io_unit_size_rdma": 8192,
              "nvmf_io_unit_size_tcp": 131072,
              "nvmf_max_io_size": 1048576,
              "nvmf_max_qpairs_ctrlr": 128,
              "nvmf_num_shared_buffers": 4096,
              "nvmf_rdma_max_aq_depth": 128,
              "nvmf_rdma_max_queue_depth": 128,
              "nvmf_tcp_max_aq_depth": 128,
              "nvmf_tcp_max_queue_depth": 128,
              "nvmf_zcopy": false,
              "rac_evict_start_main_task": 400,
              "rac_evict_start_nentries": 100,
              "rac_evict_task_poll_usec": 10000000,
              "replan_timeout": 180,
              "ring_max_dequeue_size": 16,
              "ring_max_ninflight": 16,
              "rpc_addr_validation": false,
              "rpc_allow_sys_sys": true,
              "rpc_big_cluster_sz": 10,
              "rpc_connecting_timeout": 5,
              "rpc_cq_batch_sz": 100,
              "rpc_daemoninfo_expiration": 5,
              "rpc_deep_freeze_timeout": 300,
              "rpc_max_core_cons": 4000,
              "rpc_rdma_pool_sz": 256,
              "rpc_recon_attempts": 2,
              "rpc_recon_time": 2,
              "rpc_relaxed_ordering": true,
              "rpc_s2s_credits": 64,
              "rpc_sec_alg": "aes-128-gcm",
              "rpc_tcp_io_uring": false,
              "rpc_tcp_zerocopy_size": 16384,
              "rpc_use_localhost": false,
              "rpc_workers": 3,
              "runtime_backup_history": 3,
              "runtime_debug_halt": false,
              "s2s_credit_high": 4294967295,
              "s2s_credit_low": 4294967295,
              "sched_task_quantum_us": 200,
              "scr_evict_ccce_tout_ms": 100000,
              "scr_evict_lkrply_tout_ms": 300000,
              "scr_evict_ping_tout_ms": 20000,
              "snapshot_resolution_ticks": 268435456,
              "spare_min_eff": 60,
              "spdk_vhost_socket_path": "/var/tmp",
              "volume_io_cache_size": 256,
              "volume_io_pool_size": 65535,
              "volume_max_num_segments": 256,
              "volume_max_segment_size": 1048576
            }
          }
        },
        "configsenum": {
          "enum": {
            "auto_config": null
          }
        },
        "runtime": {
          "clients": {
            "default": {
              "interfaces": [
                {
                  "device_name": "eth*",
                  "networks": [
                    "0784b796-6cbc-4ff9-ae5f-7cfa44f08d98"
                  ]
                },
                {
                  "device_name": "en*",
                  "networks": [
                    "0784b796-6cbc-4ff9-ae5f-7cfa44f08d98"
                  ]
                },
                {
                  "device_name": "oob*",
                  "networks": [
                    "0784b796-6cbc-4ff9-ae5f-7cfa44f08d98"
                  ]
                },
                {
                  "device_name": "p*",
                  "networks": [
                    "0784b796-6cbc-4ff9-ae5f-7cfa44f08d98"
                  ]
                },
                {
                  "device_name": "lo*",
                  "networks": [
                    "da76d313-c9da-4bc5-891a-7576fa498ab6"
                  ]
                },
                {
                  "device_name": "roce*",
                  "networks": [
                    "6039feb7-bf92-4865-92f0-1f98c93e47f7"
                  ]
                }
              ],
              "netrules": {
                "*": {
                  "tcp": {
                    "allow": [
                      "speed]10-ANY]"
                    ]
                  }
                }
              },
              "rpc_credits": 32
            }
          },
          "cluster_attrs": {
            "boot_epoch": 2,
            "boot_gtx": 0,
            "boot_opu": 0,
            "boot_time": 0,
            "cluster_create_tod": 1710176621950,
            "cluster_state": 5,
            "cluster_state_epoch": 13,
            "config_frozen": false,
            "dlm_init_epoch": 10,
            "erasure_done_epoch": 0,
            "feature_version": "1.0.5-beta.14722",
            "leader_epoch": 2,
            "leader_id": 2,
            "replay_done_epoch": 10,
            "reserved_space": 129879769088
          },
          "cluster_uuid": "3d2ca431-e2dd-49c1-9b14-72a4b928961a",
          "comment": "",
          "config": "auto_config",
          "dp_profiles": {
            "6b2ef245-1c07-4d54-98ea-49832706476d": {
              "availability": 9,
              "data_ltid": 3,
              "data_poolid": 1,
              "efficiency": 87,
              "id": 1,
              "max_stripe": 262144,
              "meta_ltid": 2,
              "meta_poolid": 1,
              "min_stripe": 16384,
              "n_write_later": 1,
              "name": "SYSTEM_DATA_1",
              "policy_id": 3,
              "protection": 11,
              "spare_count": 0,
              "t_read_max": 6000,
              "t_write_max": 3000
            }
          },
          "instances": {
            "7a00b256-09ef-4572-87d1-91ac32a60630": {
              "auxiliary_cpuset": "0x2",
              "cat_cpuset": "0x2",
              "evicted_epoch": 0,
              "handler_cpuset": "0x2",
              "hostname": "silyin-redvm-1",
              "hostuuid": "43391329-3609-4ba4-9d3b-e50cf083d669",
              "instance_id": 1,
              "interfaces": {
                "dontuseme0": {
                  "enabled": false,
                  "numanode": 4294967295,
                  "sriov": {
                    "function": "none",
                    "parent_device": "",
                    "vf_index": 0
                  }
                },
                "eth1": {
                  "enabled": true,
                  "jrpc": {
                    "encrypt": false
                  },
                  "numanode": 4294967295,
                  "rpc": {
                    "client_port": {
                      "base": 3301,
                      "count": 100
                    },
                    "networks": [
                      "0784b796-6cbc-4ff9-ae5f-7cfa44f08d98"
                    ],
                    "server_port": {
                      "base": 3201,
                      "count": 100
                    }
                  },
                  "sriov": {
                    "function": "none",
                    "parent_device": "",
                    "vf_index": 0
                  }
                },
                "lo": {
                  "enabled": true,
                  "numanode": 4294967295,
                  "rpc": {
                    "client_port": {
                      "base": 3301,
                      "count": 100
                    },
                    "networks": [
                      "da76d313-c9da-4bc5-891a-7576fa498ab6"
                    ],
                    "server_port": {
                      "base": 3201,
                      "count": 100
                    }
                  },
                  "sriov": {
                    "function": "none",
                    "parent_device": "",
                    "vf_index": 0
                  }
                },
                "rocep6s0": {
                  "enabled": true,
                  "numanode": 4294967295,
                  "rpc": {
                    "client_port": {
                      "base": 3301,
                      "count": 100
                    },
                    "networks": [
                      "6039feb7-bf92-4865-92f0-1f98c93e47f7"
                    ],
                    "server_port": {
                      "base": 3201,
                      "count": 100
                    }
                  },
                  "sriov": {
                    "function": "none",
                    "parent_device": "",
                    "vf_index": 0
                  }
                }
              },
              "join_gtx": 0,
              "join_opu": 0,
              "join_uuid": "e5b133b6-6468-4c76-a446-51c5f1c54cf7",
              "joined_epoch": 5,
              "jrpc_settings": {
                "base": 3102,
                "count": 1,
                "worker_count": 12
              },
              "net_cpuset": "0x2",
              "non_affine_mem_fatal": false,
              "nvme_qualified_name": "nqn.2024-03.com.ddn:nvme.red-7a00b256-09ef-4572-87d1-91ac32a60630",
              "nvmf_cpuset": "0x2",
              "posix_cpuset": "0x1",
              "quorum_weight": 1,
              "replay_epoch": 5,
              "rpc_c2s_timeout_sec": 0,
              "rpc_s2s_timeout_sec": 0,
              "runmode": 1,
              "spdk_legacy_mem": false,
              "spdk_main_cpuset": "0x2",
              "spdk_memory": 0,
              "sw_version": "1.0.5-beta.14722"
            },
            "e2fa121b-be97-4b1c-a154-45daa78a778b": {
              "auxiliary_cpuset": "0x2",
              "cat_cpuset": "0x2",
              "evicted_epoch": 0,
              "handler_cpuset": "0x2",
              "hostname": "silyin-redvm-2",
              "hostuuid": "8b07f70d-5f6b-4269-a328-fae4e661ebbb",
              "instance_id": 2,
              "interfaces": {
                "dontuseme0": {
                  "enabled": false,
                  "numanode": 4294967295,
                  "sriov": {
                    "function": "none",
                    "parent_device": "",
                    "vf_index": 0
                  }
                },
                "eth1": {
                  "enabled": true,
                  "jrpc": {
                    "encrypt": false
                  },
                  "numanode": 4294967295,
                  "rpc": {
                    "client_port": {
                      "base": 3301,
                      "count": 100
                    },
                    "networks": [
                      "0784b796-6cbc-4ff9-ae5f-7cfa44f08d98"
                    ],
                    "server_port": {
                      "base": 3201,
                      "count": 100
                    }
                  },
                  "sriov": {
                    "function": "none",
                    "parent_device": "",
                    "vf_index": 0
                  }
                },
                "lo": {
                  "enabled": true,
                  "numanode": 4294967295,
                  "rpc": {
                    "client_port": {
                      "base": 3301,
                      "count": 100
                    },
                    "networks": [
                      "da76d313-c9da-4bc5-891a-7576fa498ab6"
                    ],
                    "server_port": {
                      "base": 3201,
                      "count": 100
                    }
                  },
                  "sriov": {
                    "function": "none",
                    "parent_device": "",
                    "vf_index": 0
                  }
                },
                "rocep6s0": {
                  "enabled": true,
                  "numanode": 4294967295,
                  "rpc": {
                    "client_port": {
                      "base": 3301,
                      "count": 100
                    },
                    "networks": [
                      "6039feb7-bf92-4865-92f0-1f98c93e47f7"
                    ],
                    "server_port": {
                      "base": 3201,
                      "count": 100
                    }
                  },
                  "sriov": {
                    "function": "none",
                    "parent_device": "",
                    "vf_index": 0
                  }
                }
              },
              "join_gtx": 0,
              "join_opu": 0,
              "join_uuid": "8cd36507-a3a9-4e56-b12d-db7525633f3d",
              "joined_epoch": 3,
              "jrpc_settings": {
                "base": 3102,
                "count": 1,
                "worker_count": 12
              },
              "net_cpuset": "0x2",
              "non_affine_mem_fatal": false,
              "nvme_qualified_name": "nqn.2024-03.com.ddn:nvme.red-e2fa121b-be97-4b1c-a154-45daa78a778b",
              "nvmf_cpuset": "0x2",
              "posix_cpuset": "0x1",
              "quorum_weight": 1,
              "replay_epoch": 3,
              "rpc_c2s_timeout_sec": 0,
              "rpc_s2s_timeout_sec": 0,
              "runmode": 1,
              "spdk_legacy_mem": false,
              "spdk_main_cpuset": "0x2",
              "spdk_memory": 0,
              "sw_version": "1.0.5-beta.14722"
            }
          },
          "master_key": -9217911636692407000,
          "networks": {
            "0784b796-6cbc-4ff9-ae5f-7cfa44f08d98": {
              "name": "tcp-auto",
              "policy": {
                "backup": true,
                "cq_nentries": 16384,
                "encryption": false,
                "eq_nentries": 100,
                "max_cq_count": 64,
                "weight": 0
              },
              "subnet": "",
              "tags": [
                "NVMF_DATA_SERVICE",
                "NFS_DATA_SERVICE",
                "SQL_DATA_SERVICE",
                "SMB_DATA_SERVICE",
                "REDFS_DATA_SERVICE"
              ],
              "type": "tcp"
            },
            "6039feb7-bf92-4865-92f0-1f98c93e47f7": {
              "name": "roce-auto",
              "policy": {
                "backup": false,
                "cq_nentries": 16384,
                "encryption": false,
                "eq_nentries": 100,
                "max_cq_count": 64,
                "weight": 100
              },
              "subnet": "",
              "tags": [
                "NVMF_DATA_SERVICE",
                "NFS_DATA_SERVICE",
                "SQL_DATA_SERVICE",
                "SMB_DATA_SERVICE",
                "REDFS_DATA_SERVICE"
              ],
              "type": "roce"
            },
            "da76d313-c9da-4bc5-891a-7576fa498ab6": {
              "name": "lo-auto",
              "policy": {
                "backup": false,
                "cq_nentries": 16384,
                "encryption": false,
                "eq_nentries": 100,
                "max_cq_count": 64,
                "weight": 100
              },
              "subnet": "",
              "tags": [
                "NVMF_DATA_SERVICE",
                "NFS_DATA_SERVICE",
                "SQL_DATA_SERVICE",
                "SMB_DATA_SERVICE",
                "REDFS_DATA_SERVICE",
                "RPC_LOOPBACK"
              ],
              "type": "tcp"
            }
          },
          "notes": {
            "00": {
              "fid": "bce3326224112c4d",
              "sev": 5,
              "source": "0",
              "tod": 1710176621
            },
            "01": {
              "args": [
                "auto_config",
                "red01"
              ],
              "fid": "588bbb2a25e5b4a0",
              "sev": 5,
              "source": "0",
              "tod": 1710176622
            }
          },
          "policies": {
            "2283aac4-8823-4a34-85ab-cc534402ba78": {
              "efficiency": 0,
              "id": 2,
              "max_stripe": 262144,
              "min_stripe": 0,
              "n_write_later": 0,
              "name": "USER_1",
              "pool_id": 1,
              "pref_avail": 9,
              "pref_avail_str": "instance",
              "protection": 3,
              "t_read_max": 0,
              "t_write_max": 0,
              "type": 1
            },
            "c7dc1f43-e765-45b1-bed1-f40958034f51": {
              "efficiency": 87,
              "id": 3,
              "max_stripe": 262144,
              "min_stripe": 16384,
              "n_write_later": 1,
              "name": "DATA_1",
              "pool_id": 1,
              "pref_avail": 9,
              "pref_avail_str": "instance",
              "protection": 11,
              "t_read_max": 6000,
              "t_write_max": 3000,
              "type": 2
            },
            "c8c74582-6002-41f0-b50b-76146b682184": {
              "efficiency": 0,
              "id": 1,
              "max_stripe": 65536,
              "min_stripe": 0,
              "n_write_later": 0,
              "name": "SYS",
              "pool_id": 1,
              "pref_avail": 9,
              "pref_avail_str": "instance",
              "protection": 4,
              "t_read_max": 0,
              "t_write_max": 0,
              "type": 3
            }
          },
          "pools": {
            "d4d31fc8-7266-43d5-8f15-4cdee72786f3": {
              "bulk_size": 262144,
              "cat_map": {
                "31917fd1-a036-401b-b71d-55732ae17728": {
                  "affine_core": 1,
                  "bept_cachesz": 214748364,
                  "bept_dirtythd": 75,
                  "bept_fanout": 28,
                  "bept_qcachesz": 0,
                  "blocksize": 4096,
                  "bulk_cachesz": 107374182,
                  "bulk_size": 262144,
                  "capability": 2,
                  "capacity": 129879769088,
                  "cat_id": 2,
                  "csum_alg": 5,
                  "dev_replacement": false,
                  "devnodes": {
                    "43391329-3609-4ba4-9d3b-e50cf083d669": {
                      "numanode": 4294967295,
                      "setup": "{\"name\": \"silyin-redvm-1:/dev/sdc\", \"filename\": \"/dev/sdc\", \"block_size\": 512, \"type\": \"file\"}"
                    }
                  },
                  "encr_mode": 1,
                  "evicted_epoch": 0,
                  "evicted_time": 0,
                  "eviction_catchup_epoch": 1,
                  "eviction_opu": 0,
                  "failure_domains": [
                    "device:silyin-redvm-1:/dev/sdc",
                    "instance:silyin-redvm-1-",
                    "chassis:QEMU-",
                    "subrack:default_subrack",
                    "rack:default_rack",
                    "site:site1"
                  ],
                  "health": 1,
                  "heap_size": 0,
                  "instdata": {
                    "7a00b256-09ef-4572-87d1-91ac32a60630": {
                      "cat_health": 1
                    }
                  },
                  "instpref": [
                    "7a00b256-09ef-4572-87d1-91ac32a60630"
                  ],
                  "intlg_size": 1073741824,
                  "join_uuid": "e5b133b6-6468-4c76-a446-51c5f1c54cf7",
                  "joined_epoch": 7,
                  "layout_weight": 1,
                  "lcore": 1,
                  "location": "silyin-redvm-1:/dev/sdc",
                  "num_cores": 0,
                  "obj_size": 65536,
                  "open_retries": 0,
                  "owner": 1,
                  "reinit": 1,
                  "removed_epoch": 0,
                  "runmode": 1,
                  "udid": "silyin-redvm-1:/dev/sdc                                     "
                },
                "4b7ba4e7-60b0-4057-a4ed-38d9a7fa15dc": {
                  "affine_core": 1,
                  "bept_cachesz": 214748364,
                  "bept_dirtythd": 75,
                  "bept_fanout": 28,
                  "bept_qcachesz": 0,
                  "blocksize": 4096,
                  "bulk_cachesz": 107374182,
                  "bulk_size": 262144,
                  "capability": 2,
                  "capacity": 129879769088,
                  "cat_id": 5,
                  "csum_alg": 5,
                  "dev_replacement": false,
                  "devnodes": {
                    "8b07f70d-5f6b-4269-a328-fae4e661ebbb": {
                      "numanode": 4294967295,
                      "setup": "{\"name\": \"silyin-redvm-2:/dev/sdb\", \"filename\": \"/dev/sdb\", \"block_size\": 512, \"type\": \"file\"}"
                    }
                  },
                  "encr_mode": 1,
                  "evicted_epoch": 0,
                  "evicted_time": 0,
                  "eviction_catchup_epoch": 1,
                  "eviction_opu": 0,
                  "failure_domains": [
                    "device:silyin-redvm-2:/dev/sdb",
                    "chassis:QEMU-",
                    "subrack:default_subrack",
                    "instance:silyin-redvm-2-",
                    "rack:default_rack",
                    "site:site1"
                  ],
                  "health": 1,
                  "heap_size": 0,
                  "instdata": {
                    "e2fa121b-be97-4b1c-a154-45daa78a778b": {
                      "cat_health": 1
                    }
                  },
                  "instpref": [
                    "e2fa121b-be97-4b1c-a154-45daa78a778b"
                  ],
                  "intlg_size": 1073741824,
                  "join_uuid": "8cd36507-a3a9-4e56-b12d-db7525633f3d",
                  "joined_epoch": 7,
                  "layout_weight": 1,
                  "lcore": 1,
                  "location": "silyin-redvm-2:/dev/sdb",
                  "num_cores": 0,
                  "obj_size": 65536,
                  "open_retries": 0,
                  "owner": 2,
                  "reinit": 1,
                  "removed_epoch": 0,
                  "runmode": 1,
                  "udid": "silyin-redvm-2:/dev/sdb                                     "
                },
                "532f8358-b5c3-4590-ac73-d65080ddd0e9": {
                  "affine_core": 1,
                  "bept_cachesz": 214748364,
                  "bept_dirtythd": 75,
                  "bept_fanout": 28,
                  "bept_qcachesz": 0,
                  "blocksize": 4096,
                  "bulk_cachesz": 107374182,
                  "bulk_size": 262144,
                  "capability": 2,
                  "capacity": 129879769088,
                  "cat_id": 4,
                  "csum_alg": 5,
                  "dev_replacement": false,
                  "devnodes": {
                    "43391329-3609-4ba4-9d3b-e50cf083d669": {
                      "numanode": 4294967295,
                      "setup": "{\"name\": \"silyin-redvm-1:/dev/sde\", \"filename\": \"/dev/sde\", \"block_size\": 512, \"type\": \"file\"}"
                    }
                  },
                  "encr_mode": 1,
                  "evicted_epoch": 0,
                  "evicted_time": 0,
                  "eviction_catchup_epoch": 1,
                  "eviction_opu": 0,
                  "failure_domains": [
                    "device:silyin-redvm-1:/dev/sde",
                    "instance:silyin-redvm-1-",
                    "chassis:QEMU-",
                    "subrack:default_subrack",
                    "rack:default_rack",
                    "site:site1"
                  ],
                  "health": 1,
                  "heap_size": 0,
                  "instdata": {
                    "7a00b256-09ef-4572-87d1-91ac32a60630": {
                      "cat_health": 1
                    }
                  },
                  "instpref": [
                    "7a00b256-09ef-4572-87d1-91ac32a60630"
                  ],
                  "intlg_size": 1073741824,
                  "join_uuid": "e5b133b6-6468-4c76-a446-51c5f1c54cf7",
                  "joined_epoch": 7,
                  "layout_weight": 1,
                  "lcore": 1,
                  "location": "silyin-redvm-1:/dev/sde",
                  "num_cores": 0,
                  "obj_size": 65536,
                  "open_retries": 0,
                  "owner": 1,
                  "reinit": 1,
                  "removed_epoch": 0,
                  "runmode": 1,
                  "udid": "silyin-redvm-1:/dev/sde                                     "
                },
                "75eeeddc-0a22-4d50-b1a9-cc561c7aef60": {
                  "affine_core": 1,
                  "bept_cachesz": 214748364,
                  "bept_dirtythd": 75,
                  "bept_fanout": 28,
                  "bept_qcachesz": 0,
                  "blocksize": 4096,
                  "bulk_cachesz": 107374182,
                  "bulk_size": 262144,
                  "capability": 2,
                  "capacity": 129879769088,
                  "cat_id": 6,
                  "csum_alg": 5,
                  "dev_replacement": false,
                  "devnodes": {
                    "8b07f70d-5f6b-4269-a328-fae4e661ebbb": {
                      "numanode": 4294967295,
                      "setup": "{\"name\": \"silyin-redvm-2:/dev/sdc\", \"filename\": \"/dev/sdc\", \"block_size\": 512, \"type\": \"file\"}"
                    }
                  },
                  "encr_mode": 1,
                  "evicted_epoch": 0,
                  "evicted_time": 0,
                  "eviction_catchup_epoch": 1,
                  "eviction_opu": 0,
                  "failure_domains": [
                    "chassis:QEMU-",
                    "subrack:default_subrack",
                    "instance:silyin-redvm-2-",
                    "rack:default_rack",
                    "device:silyin-redvm-2:/dev/sdc",
                    "site:site1"
                  ],
                  "health": 1,
                  "heap_size": 0,
                  "instdata": {
                    "e2fa121b-be97-4b1c-a154-45daa78a778b": {
                      "cat_health": 1
                    }
                  },
                  "instpref": [
                    "e2fa121b-be97-4b1c-a154-45daa78a778b"
                  ],
                  "intlg_size": 1073741824,
                  "join_uuid": "8cd36507-a3a9-4e56-b12d-db7525633f3d",
                  "joined_epoch": 7,
                  "layout_weight": 1,
                  "lcore": 1,
                  "location": "silyin-redvm-2:/dev/sdc",
                  "num_cores": 0,
                  "obj_size": 65536,
                  "open_retries": 0,
                  "owner": 2,
                  "reinit": 1,
                  "removed_epoch": 0,
                  "runmode": 1,
                  "udid": "silyin-redvm-2:/dev/sdc                                     "
                },
                "808f9cbd-15a8-4659-b714-c2527d8655be": {
                  "affine_core": 1,
                  "bept_cachesz": 214748364,
                  "bept_dirtythd": 75,
                  "bept_fanout": 28,
                  "bept_qcachesz": 0,
                  "blocksize": 4096,
                  "bulk_cachesz": 107374182,
                  "bulk_size": 262144,
                  "capability": 2,
                  "capacity": 129879769088,
                  "cat_id": 1,
                  "csum_alg": 5,
                  "dev_replacement": false,
                  "devnodes": {
                    "43391329-3609-4ba4-9d3b-e50cf083d669": {
                      "numanode": 4294967295,
                      "setup": "{\"name\": \"silyin-redvm-1:/dev/sdb\", \"filename\": \"/dev/sdb\", \"block_size\": 512, \"type\": \"file\"}"
                    }
                  },
                  "encr_mode": 1,
                  "evicted_epoch": 0,
                  "evicted_time": 0,
                  "eviction_catchup_epoch": 1,
                  "eviction_opu": 0,
                  "failure_domains": [
                    "device:silyin-redvm-1:/dev/sdb",
                    "instance:silyin-redvm-1-",
                    "chassis:QEMU-",
                    "subrack:default_subrack",
                    "rack:default_rack",
                    "site:site1"
                  ],
                  "health": 1,
                  "heap_size": 0,
                  "instdata": {
                    "7a00b256-09ef-4572-87d1-91ac32a60630": {
                      "cat_health": 1
                    }
                  },
                  "instpref": [
                    "7a00b256-09ef-4572-87d1-91ac32a60630"
                  ],
                  "intlg_size": 1073741824,
                  "join_uuid": "e5b133b6-6468-4c76-a446-51c5f1c54cf7",
                  "joined_epoch": 7,
                  "layout_weight": 1,
                  "lcore": 1,
                  "location": "silyin-redvm-1:/dev/sdb",
                  "num_cores": 0,
                  "obj_size": 65536,
                  "open_retries": 0,
                  "owner": 1,
                  "reinit": 1,
                  "removed_epoch": 0,
                  "runmode": 1,
                  "udid": "silyin-redvm-1:/dev/sdb                                     "
                },
                "98ebe85d-7f97-4119-8a89-ebc130be07aa": {
                  "affine_core": 1,
                  "bept_cachesz": 214748364,
                  "bept_dirtythd": 75,
                  "bept_fanout": 28,
                  "bept_qcachesz": 0,
                  "blocksize": 4096,
                  "bulk_cachesz": 107374182,
                  "bulk_size": 262144,
                  "capability": 2,
                  "capacity": 129879769088,
                  "cat_id": 3,
                  "csum_alg": 5,
                  "dev_replacement": false,
                  "devnodes": {
                    "43391329-3609-4ba4-9d3b-e50cf083d669": {
                      "numanode": 4294967295,
                      "setup": "{\"name\": \"silyin-redvm-1:/dev/sdd\", \"filename\": \"/dev/sdd\", \"block_size\": 512, \"type\": \"file\"}"
                    }
                  },
                  "encr_mode": 1,
                  "evicted_epoch": 0,
                  "evicted_time": 0,
                  "eviction_catchup_epoch": 1,
                  "eviction_opu": 0,
                  "failure_domains": [
                    "instance:silyin-redvm-1-",
                    "device:silyin-redvm-1:/dev/sdd",
                    "chassis:QEMU-",
                    "subrack:default_subrack",
                    "rack:default_rack",
                    "site:site1"
                  ],
                  "health": 1,
                  "heap_size": 0,
                  "instdata": {
                    "7a00b256-09ef-4572-87d1-91ac32a60630": {
                      "cat_health": 1
                    }
                  },
                  "instpref": [
                    "7a00b256-09ef-4572-87d1-91ac32a60630"
                  ],
                  "intlg_size": 1073741824,
                  "join_uuid": "e5b133b6-6468-4c76-a446-51c5f1c54cf7",
                  "joined_epoch": 7,
                  "layout_weight": 1,
                  "lcore": 1,
                  "location": "silyin-redvm-1:/dev/sdd",
                  "num_cores": 0,
                  "obj_size": 65536,
                  "open_retries": 0,
                  "owner": 1,
                  "reinit": 1,
                  "removed_epoch": 0,
                  "runmode": 1,
                  "udid": "silyin-redvm-1:/dev/sdd                                     "
                },
                "c2f74632-179f-4799-a3af-6a8b28d38bc5": {
                  "affine_core": 1,
                  "bept_cachesz": 214748364,
                  "bept_dirtythd": 75,
                  "bept_fanout": 28,
                  "bept_qcachesz": 0,
                  "blocksize": 4096,
                  "bulk_cachesz": 107374182,
                  "bulk_size": 262144,
                  "capability": 2,
                  "capacity": 129879769088,
                  "cat_id": 7,
                  "csum_alg": 5,
                  "dev_replacement": false,
                  "devnodes": {
                    "8b07f70d-5f6b-4269-a328-fae4e661ebbb": {
                      "numanode": 4294967295,
                      "setup": "{\"name\": \"silyin-redvm-2:/dev/sdd\", \"filename\": \"/dev/sdd\", \"block_size\": 512, \"type\": \"file\"}"
                    }
                  },
                  "encr_mode": 1,
                  "evicted_epoch": 0,
                  "evicted_time": 0,
                  "eviction_catchup_epoch": 1,
                  "eviction_opu": 0,
                  "failure_domains": [
                    "device:silyin-redvm-2:/dev/sdd",
                    "chassis:QEMU-",
                    "subrack:default_subrack",
                    "instance:silyin-redvm-2-",
                    "rack:default_rack",
                    "site:site1"
                  ],
                  "health": 1,
                  "heap_size": 0,
                  "instdata": {
                    "e2fa121b-be97-4b1c-a154-45daa78a778b": {
                      "cat_health": 1
                    }
                  },
                  "instpref": [
                    "e2fa121b-be97-4b1c-a154-45daa78a778b"
                  ],
                  "intlg_size": 1073741824,
                  "join_uuid": "8cd36507-a3a9-4e56-b12d-db7525633f3d",
                  "joined_epoch": 7,
                  "layout_weight": 1,
                  "lcore": 1,
                  "location": "silyin-redvm-2:/dev/sdd",
                  "num_cores": 0,
                  "obj_size": 65536,
                  "open_retries": 0,
                  "owner": 2,
                  "reinit": 1,
                  "removed_epoch": 0,
                  "runmode": 1,
                  "udid": "silyin-redvm-2:/dev/sdd                                     "
                },
                "fa6714af-7ebe-4b26-b310-24929808d365": {
                  "affine_core": 1,
                  "bept_cachesz": 214748364,
                  "bept_dirtythd": 75,
                  "bept_fanout": 28,
                  "bept_qcachesz": 0,
                  "blocksize": 4096,
                  "bulk_cachesz": 107374182,
                  "bulk_size": 262144,
                  "capability": 2,
                  "capacity": 129879769088,
                  "cat_id": 8,
                  "csum_alg": 5,
                  "dev_replacement": false,
                  "devnodes": {
                    "8b07f70d-5f6b-4269-a328-fae4e661ebbb": {
                      "numanode": 4294967295,
                      "setup": "{\"name\": \"silyin-redvm-2:/dev/sde\", \"filename\": \"/dev/sde\", \"block_size\": 512, \"type\": \"file\"}"
                    }
                  },
                  "encr_mode": 1,
                  "evicted_epoch": 0,
                  "evicted_time": 0,
                  "eviction_catchup_epoch": 1,
                  "eviction_opu": 0,
                  "failure_domains": [
                    "chassis:QEMU-",
                    "device:silyin-redvm-2:/dev/sde",
                    "subrack:default_subrack",
                    "instance:silyin-redvm-2-",
                    "rack:default_rack",
                    "site:site1"
                  ],
                  "health": 1,
                  "heap_size": 0,
                  "instdata": {
                    "e2fa121b-be97-4b1c-a154-45daa78a778b": {
                      "cat_health": 1
                    }
                  },
                  "instpref": [
                    "e2fa121b-be97-4b1c-a154-45daa78a778b"
                  ],
                  "intlg_size": 1073741824,
                  "join_uuid": "8cd36507-a3a9-4e56-b12d-db7525633f3d",
                  "joined_epoch": 7,
                  "layout_weight": 1,
                  "lcore": 1,
                  "location": "silyin-redvm-2:/dev/sde",
                  "num_cores": 0,
                  "obj_size": 65536,
                  "open_retries": 0,
                  "owner": 2,
                  "reinit": 1,
                  "removed_epoch": 0,
                  "runmode": 1,
                  "udid": "silyin-redvm-2:/dev/sde                                     "
                }
              },
              "device_open_retries": 4,
              "device_replacement": false,
              "fanout": 0,
              "name": "SYSTEM",
              "obj_size": 0,
              "pool_id": 1,
              "sys_meta": true,
              "tables": {
                "1": {
                  "base_uuid": "7f0a5cf8-f0db-43f9-9819-cf138357f46f",
                  "data_protect": 4,
                  "fd_rank": {
                    "board:*": 6,
                    "center:*": 2,
                    "chassis:*": 5,
                    "device:*": 9,
                    "host:*": 7,
                    "instance:*": 8,
                    "rack:*": 3,
                    "site:*": 1,
                    "subrack:*": 4
                  },
                  "prime_uuid": "0759f8fb-8136-4f2d-9c0e-5fdfd6237567",
                  "type": 3
                },
                "2": {
                  "base_uuid": "f46c4335-83c4-420b-b18f-b913531e0a63",
                  "data_protect": 3,
                  "fd_rank": {
                    "board:*": 6,
                    "center:*": 2,
                    "chassis:*": 5,
                    "device:*": 9,
                    "host:*": 7,
                    "instance:*": 8,
                    "rack:*": 3,
                    "site:*": 1,
                    "subrack:*": 4
                  },
                  "prime_uuid": "cf04683e-68ae-48d2-ab70-16b5adf9a470",
                  "type": 1
                },
                "3": {
                  "base_uuid": "17d8e0a1-9be1-46c8-b977-719712673df4",
                  "data_protect": 11,
                  "fd_rank": {
                    "board:*": 6,
                    "center:*": 2,
                    "chassis:*": 5,
                    "device:*": 9,
                    "host:*": 7,
                    "instance:*": 8,
                    "rack:*": 3,
                    "site:*": 1,
                    "subrack:*": 4
                  },
                  "type": 2
                }
              },
              "user_data": true,
              "user_meta": true
            }
          },
          "signing_key": "A2V8rhD7nJgQ4tnqf4Odog==",
          "system_config_epoch": 13,
          "timestamp": "2024-03-11_17:04:01.410794",
          "tunables": {
            "agent_max_respawn": 600,
            "auto_upgrade": false,
            "blocksize": 4096,
            "c2s_credit_high": 64,
            "c2s_credit_low": 64,
            "cap_gossip_us_per_tick": 2500000,
            "capacity_limit_del_reject_pcnt": 95,
            "capacity_limit_stall_pcnt": 85,
            "capacity_limit_wrt_reject_pcnt": 90,
            "checksum_alg": "crc64",
            "client_interrupts": true,
            "client_rdma_pool_sz": 256,
            "cm_lease_timeout": 5,
            "compress_min_gain": 12,
            "compression": "FASTCOMPRESS",
            "dlm_cache_max": 65536,
            "dlm_cacheref_max": 8192,
            "dlm_credit_high": 4294967295,
            "dlm_credit_low": 4294967295,
            "eb_catcleaner_interval": 72000,
            "eb_scrubber_interval": 43200,
            "eb_grace_period_ms": 10000,
            "eb_large_grace_period_ms": 86400000,
            "eb_tablet_sel_policy": 3,
            "eb_tablet_search_max": 5,
            "eb_tablet_cache_max": 10,
            "enable_proc_info": false,
            "encrypt_alg": "aes-256-xts",
            "encryption": "on",
            "etc_vector_size": 32,
            "fastcompress": "LZ4",
            "gc_boot_time": 0,
            "gc_horizon_time": 600,
            "gc_ticker_disabled": false,
            "gossip_us_per_tick": 250000,
            "highcompress": "ZSTD",
            "intentlog_unmap": false,
            "iobuf_large_bufsize": 135168,
            "iobuf_large_pool_count": 1024,
            "iobuf_small_bufsize": 8192,
            "iobuf_small_pool_count": 8192,
            "jrpc_auth_enforce": false,
            "jrpc_client_keepalive": 120,
            "jrpc_debug_enable": true,
            "jrpc_timeout_auth": 0,
            "jrpc_timeout_idle": 0,
            "jrpc_timeout_token": 900,
            "jrpc_trace_all": false,
            "liveness_timeout": 8,
            "max_heap_size": 0,
            "nvme_hotplug": true,
            "nvmf_buf_cache_size": 4294967295,
            "nvmf_in_capsule_data_size": 4096,
            "nvmf_io_unit_size_rdma": 8192,
            "nvmf_io_unit_size_tcp": 131072,
            "nvmf_max_io_size": 1048576,
            "nvmf_max_qpairs_ctrlr": 128,
            "nvmf_num_shared_buffers": 4096,
            "nvmf_rdma_max_aq_depth": 128,
            "nvmf_rdma_max_queue_depth": 128,
            "nvmf_tcp_max_aq_depth": 128,
            "nvmf_tcp_max_queue_depth": 128,
            "nvmf_zcopy": false,
            "rac_evict_start_main_task": 400,
            "rac_evict_start_nentries": 100,
            "rac_evict_task_poll_usec": 10000000,
            "replan_timeout": 180,
            "ring_max_dequeue_size": 16,
            "ring_max_ninflight": 16,
            "rpc_addr_validation": false,
            "rpc_allow_sys_sys": true,
            "rpc_big_cluster_sz": 10,
            "rpc_connecting_timeout": 5,
            "rpc_cq_batch_sz": 100,
            "rpc_daemoninfo_expiration": 5,
            "rpc_deep_freeze_timeout": 300,
            "rpc_max_core_cons": 4000,
            "rpc_rdma_pool_sz": 256,
            "rpc_recon_attempts": 2,
            "rpc_recon_time": 2,
            "rpc_relaxed_ordering": true,
            "rpc_s2s_credits": 64,
            "rpc_sec_alg": "aes-128-gcm",
            "rpc_tcp_io_uring": false,
            "rpc_tcp_zerocopy_size": 16384,
            "rpc_use_localhost": false,
            "rpc_workers": 3,
            "runtime_backup_history": 3,
            "runtime_debug_halt": false,
            "s2s_credit_high": 4294967295,
            "s2s_credit_low": 4294967295,
            "sched_task_quantum_us": 200,
            "scr_evict_ccce_tout_ms": 100000,
            "scr_evict_lkrply_tout_ms": 300000,
            "scr_evict_ping_tout_ms": 20000,
            "snapshot_resolution_ticks": 268435456,
            "spare_min_eff": 60,
            "spdk_vhost_socket_path": "/var/tmp",
            "volume_io_cache_size": 256,
            "volume_io_pool_size": 65535,
            "volume_max_num_segments": 256,
            "volume_max_segment_size": 1048576
          }
        },
        "syseventq": {
          "args": [
            "red01",
            "running"
          ],
          "dropped": 0,
          "fid": "4523726493a917f3",
          "sev": 6,
          "source": "7a00b256-09ef-4572-87d1-91ac32a60630",
          "tod": 1710176642,
          "tod_usec": 311196
        },
        "uuid": "3d2ca431-e2dd-49c1-9b14-72a4b928961a"
      }

    cluster_config_example:
      description: Cluster config example
      value: {
        "config": {
          "cluster_uuid": "5f652d90-1658-40e1-8efe-7be658242f76",
          "config": "auto_config",
          "networks": {
            "0c7d91e5-f740-43f3-84c9-0a030d6f8867": {
              "type": "roce",
              "name": "roce-auto",
              "tags": [
                "NVMF_DATA_SERVICE",
                "NFS_DATA_SERVICE",
                "SQL_DATA_SERVICE",
                "SMB_DATA_SERVICE",
                "REDFS_DATA_SERVICE"
              ],
              "policy": {
                "backup": false,
                "encryption": false,
                "cq_nentries": 16384,
                "max_cq_count": 64,
                "eq_nentries": 100,
                "weight": 100
              },
              "subnet": ""
            },
            "dbfdfab3-38c6-420e-8f19-149f49932934": {
              "type": "tcp",
              "name": "tcp-auto",
              "tags": [
                "NVMF_DATA_SERVICE",
                "NFS_DATA_SERVICE",
                "SQL_DATA_SERVICE",
                "SMB_DATA_SERVICE",
                "REDFS_DATA_SERVICE"
              ],
              "policy": {
                "backup": true,
                "encryption": false,
                "cq_nentries": 16384,
                "max_cq_count": 64,
                "eq_nentries": 100,
                "weight": 0
              },
              "subnet": ""
            },
            "fb474626-d61a-4a1b-a43d-ed79cf03f69b": {
              "type": "tcp",
              "name": "lo-auto",
              "tags": [
                "NVMF_DATA_SERVICE",
                "NFS_DATA_SERVICE",
                "SQL_DATA_SERVICE",
                "SMB_DATA_SERVICE",
                "REDFS_DATA_SERVICE",
                "RPC_LOOPBACK"
              ],
              "policy": {
                "backup": false,
                "encryption": false,
                "cq_nentries": 16384,
                "max_cq_count": 64,
                "eq_nentries": 100,
                "weight": 100
              },
              "subnet": ""
            }
          },
          "clients": {
            "default": {
              "rpc_credits": 32,
              "netrules": {
                "*": {
                  "tcp": {
                    "allow": [
                      "speed]10-ANY]"
                    ]
                  }
                }
              },
              "interfaces": [
                {
                  "device_name": "eth*",
                  "networks": [
                    "dbfdfab3-38c6-420e-8f19-149f49932934"
                  ]
                },
                {
                  "device_name": "en*",
                  "networks": [
                    "dbfdfab3-38c6-420e-8f19-149f49932934"
                  ]
                },
                {
                  "device_name": "oob*",
                  "networks": [
                    "dbfdfab3-38c6-420e-8f19-149f49932934"
                  ]
                },
                {
                  "device_name": "p*",
                  "networks": [
                    "dbfdfab3-38c6-420e-8f19-149f49932934"
                  ]
                },
                {
                  "device_name": "lo*",
                  "networks": [
                    "fb474626-d61a-4a1b-a43d-ed79cf03f69b"
                  ]
                },
                {
                  "device_name": "roce*",
                  "networks": [
                    "0c7d91e5-f740-43f3-84c9-0a030d6f8867"
                  ]
                }
              ]
            }
          },
          "tunables": {
            "agent_max_respawn": 600,
            "liveness_timeout": 8,
            "replan_timeout": 180,
            "cm_lease_timeout": 5,
            "gossip_us_per_tick": 250000,
            "cap_gossip_us_per_tick": 2500000,
            "capacity_limit_wrt_reject_pcnt": 90,
            "capacity_limit_del_reject_pcnt": 95,
            "capacity_limit_stall_pcnt": 85,
            "etc_vector_size": 32,
            "c2s_credit_high": 64,
            "c2s_credit_low": 64,
            "s2s_credit_high": 4294967295,
            "s2s_credit_low": 4294967295,
            "dlm_credit_high": 4294967295,
            "dlm_credit_low": 4294967295,
            "scr_evict_ping_tout_ms": 20000,
            "scr_evict_ccce_tout_ms": 100000,
            "scr_evict_lkrply_tout_ms": 300000,
            "sched_task_quantum_us": 200,
            "rpc_rdma_pool_sz": 256,
            "rpc_s2s_credits": 64,
            "rpc_big_cluster_sz": 10,
            "rpc_max_core_cons": 4000,
            "rpc_workers": 3,
            "rpc_recon_time": 2,
            "rpc_recon_attempts": 2,
            "rpc_connecting_timeout": 5,
            "rpc_deep_freeze_timeout": 300,
            "rpc_daemoninfo_expiration": 5,
            "rpc_tcp_zerocopy_size": 16384,
            "rpc_tcp_io_uring": false,
            "rpc_relaxed_ordering": true,
            "rpc_addr_validation": false,
            "rpc_allow_sys_sys": true,
            "rpc_sec_alg": "aes-128-gcm",
            "rpc_cq_batch_sz": 100,
            "rpc_use_localhost": false,
            "jrpc_auth_enforce": false,
            "jrpc_debug_enable": true,
            "jrpc_trace_all": false,
            "jrpc_timeout_auth": 0,
            "jrpc_timeout_idle": 0,
            "jrpc_client_keepalive": 120,
            "jrpc_timeout_token": 900,
            "ring_max_ninflight": 16,
            "ring_max_dequeue_size": 16,
            "enable_proc_info": false,
            "runtime_backup_history": 3,
            "spdk_vhost_socket_path": "/var/tmp",
            "auto_upgrade": false,
            "encryption": "on",
            "encrypt_alg": "aes-256-xts",
            "compression": "FASTCOMPRESS",
            "fastcompress": "LZ4",
            "highcompress": "ZSTD",
            "compress_min_gain": 12,
            "spare_min_eff": 60,
            "runtime_debug_halt": false,
            "checksum_alg": "crc64",
            "blocksize": 4096,
            "max_heap_size": 0,
            "intentlog_unmap": false,
            "eb_scrubber_interval": 43200,
            "eb_catcleaner_interval": 72000,
            "eb_grace_period_ms": 10000,
            "eb_large_grace_period_ms": 86400000,
            "eb_tablet_sel_policy": 3,
            "eb_tablet_search_max": 5,
            "eb_tablet_cache_max": 10,
            "client_interrupts": true,
            "client_rdma_pool_sz": 256,
            "nvme_hotplug": true,
            "rac_evict_task_poll_usec": 10000000,
            "rac_evict_start_nentries": 100,
            "rac_evict_start_main_task": 400,
            "gc_ticker_disabled": false,
            "gc_boot_time": 0,
            "gc_horizon_time": 600,
            "snapshot_resolution_ticks": 268435456,
            "volume_max_segment_size": 1048576,
            "volume_max_num_segments": 256,
            "volume_io_cache_size": 256,
            "volume_io_pool_size": 65535,
            "iobuf_small_bufsize": 8192,
            "iobuf_large_bufsize": 135168,
            "iobuf_small_pool_count": 8192,
            "iobuf_large_pool_count": 1024,
            "nvmf_max_qpairs_ctrlr": 128,
            "nvmf_in_capsule_data_size": 4096,
            "nvmf_io_unit_size_tcp": 131072,
            "nvmf_io_unit_size_rdma": 8192,
            "nvmf_max_io_size": 1048576,
            "nvmf_num_shared_buffers": 4096,
            "nvmf_buf_cache_size": 4294967295,
            "nvmf_tcp_max_queue_depth": 128,
            "nvmf_tcp_max_aq_depth": 128,
            "nvmf_rdma_max_queue_depth": 128,
            "nvmf_rdma_max_aq_depth": 128,
            "nvmf_zcopy": false,
            "dlm_cache_max": 65536,
            "dlm_cacheref_max": 8192
          },
          "notes": {
            "00": {
              "tod": 1710240507,
              "sev": 5,
              "source": "baa80cbd-ff83-4909-a034-f03f3e9e9920",
              "fid": "bce3326224112c4d"
            }
          },
          "dp_profiles": {
            "7bb03d83-2253-41d6-bf08-68b22d83249a": {
              "id": 1,
              "name": "SYSTEM_DATA_1",
              "meta_poolid": 1,
              "meta_ltid": 2,
              "data_poolid": 1,
              "data_ltid": 3,
              "policy_id": 3,
              "efficiency": 0,
              "protection": 0,
              "availability": 0,
              "min_stripe": 0,
              "max_stripe": 0,
              "t_read_max": 0,
              "t_write_max": 0,
              "n_write_later": 0,
              "spare_count": 0
            }
          },
          "policies": {
            "0fe722a8-b253-4f02-ac0f-8fb881af4672": {
              "id": 2,
              "name": "USER_1",
              "type": 1,
              "protection": 3,
              "min_stripe": 0,
              "max_stripe": 262144,
              "efficiency": 0,
              "pool_id": 1,
              "pref_avail": 0,
              "pref_avail_str": "none",
              "t_read_max": 0,
              "t_write_max": 0,
              "n_write_later": 0
            },
            "5ce31e2f-d718-426c-a4a5-bf5c654e8994": {
              "id": 3,
              "name": "DATA_1",
              "type": 2,
              "protection": 11,
              "min_stripe": 16384,
              "max_stripe": 262144,
              "efficiency": 87,
              "pool_id": 1,
              "pref_avail": 0,
              "pref_avail_str": "none",
              "t_read_max": 6000,
              "t_write_max": 3000,
              "n_write_later": 1
            },
            "8496a7d1-8801-4c9c-80e0-9af2a1b8ec21": {
              "id": 1,
              "name": "SYS",
              "type": 3,
              "protection": 4,
              "min_stripe": 0,
              "max_stripe": 65536,
              "efficiency": 0,
              "pool_id": 1,
              "pref_avail": 0,
              "pref_avail_str": "none",
              "t_read_max": 0,
              "t_write_max": 0,
              "n_write_later": 0
            }
          },
          "master_key": 4681511067219645000,
          "signing_key": "BG6opMiSLhIeV9VUUlqpDQ==",
          "timestamp": "2024-03-12_10:48:27.994948",
          "instances": {
            "abdf4aab-620a-416f-9827-e4438f58d0c4": {
              "instance_id": 1,
              "hostuuid": "baa80cbd-ff83-4909-a034-f03f3e9e9920",
              "hostname": "silyin-redvm-1",
              "cat_cpuset": "0x2",
              "handler_cpuset": "0x2",
              "net_cpuset": "0x2",
              "nvmf_cpuset": "0x2",
              "auxiliary_cpuset": "0x2",
              "posix_cpuset": "0x1",
              "spdk_main_cpuset": "0x2",
              "spdk_memory": 0,
              "spdk_legacy_mem": false,
              "jrpc_settings": {
                "base": 3102,
                "count": 1,
                "worker_count": 12
              },
              "interfaces": {
                "dontuseme0": {
                  "numanode": -1,
                  "enabled": false,
                  "nameinfo": "250-58-174-246.silyin-redvm-1.virts.svc.dev1.local"
                },
                "eth1": {
                  "numanode": -1,
                  "enabled": true,
                  "rpc": {
                    "networks": [
                      "dbfdfab3-38c6-420e-8f19-149f49932934"
                    ],
                    "server_port": {
                      "base": 3201,
                      "count": 100
                    },
                    "client_port": {
                      "base": 3301,
                      "count": 100
                    }
                  },
                  "jrpc": {
                    "encrypt": false
                  },
                  "nameinfo": "silyin-redvm-1"
                },
                "lo": {
                  "numanode": -1,
                  "enabled": true,
                  "rpc": {
                    "networks": [
                      "fb474626-d61a-4a1b-a43d-ed79cf03f69b"
                    ],
                    "server_port": {
                      "base": 3201,
                      "count": 100
                    },
                    "client_port": {
                      "base": 3301,
                      "count": 100
                    }
                  },
                  "nameinfo": "localhost"
                },
                "rocep6s0": {
                  "numanode": -1,
                  "enabled": true,
                  "rpc": {
                    "networks": [
                      "0c7d91e5-f740-43f3-84c9-0a030d6f8867"
                    ],
                    "server_port": {
                      "base": 3201,
                      "count": 100
                    },
                    "client_port": {
                      "base": 3301,
                      "count": 100
                    }
                  },
                  "nameinfo": ""
                }
              },
              "nvme_qualified_name": "nqn.2024-03.com.ddn:nvme.red-abdf4aab-620a-416f-9827-e4438f58d0c4"
            },
            "c1536789-da98-4dbc-96fd-b17d4db8eeba": {
              "instance_id": 2,
              "hostuuid": "a503f8e2-f77d-44e5-a00c-72ceaf5e0daa",
              "hostname": "silyin-redvm-2",
              "cat_cpuset": "0x2",
              "handler_cpuset": "0x2",
              "net_cpuset": "0x2",
              "nvmf_cpuset": "0x2",
              "auxiliary_cpuset": "0x2",
              "posix_cpuset": "0x1",
              "spdk_main_cpuset": "0x2",
              "spdk_memory": 0,
              "spdk_legacy_mem": false,
              "jrpc_settings": {
                "base": 3102,
                "count": 1,
                "worker_count": 12
              },
              "interfaces": {
                "dontuseme0": {
                  "numanode": -1,
                  "enabled": false,
                  "nameinfo": "250-58-66-201.silyin-redvm-2.virts.svc.dev1.local"
                },
                "eth1": {
                  "numanode": -1,
                  "enabled": true,
                  "rpc": {
                    "networks": [
                      "dbfdfab3-38c6-420e-8f19-149f49932934"
                    ],
                    "server_port": {
                      "base": 3201,
                      "count": 100
                    },
                    "client_port": {
                      "base": 3301,
                      "count": 100
                    }
                  },
                  "jrpc": {
                    "encrypt": false
                  },
                  "nameinfo": "silyin-redvm-2"
                },
                "lo": {
                  "numanode": -1,
                  "enabled": true,
                  "rpc": {
                    "networks": [
                      "fb474626-d61a-4a1b-a43d-ed79cf03f69b"
                    ],
                    "server_port": {
                      "base": 3201,
                      "count": 100
                    },
                    "client_port": {
                      "base": 3301,
                      "count": 100
                    }
                  },
                  "nameinfo": "localhost"
                },
                "rocep6s0": {
                  "numanode": -1,
                  "enabled": true,
                  "rpc": {
                    "networks": [
                      "0c7d91e5-f740-43f3-84c9-0a030d6f8867"
                    ],
                    "server_port": {
                      "base": 3201,
                      "count": 100
                    },
                    "client_port": {
                      "base": 3301,
                      "count": 100
                    }
                  },
                  "nameinfo": ""
                }
              },
              "nvme_qualified_name": "nqn.2024-03.com.ddn:nvme.red-c1536789-da98-4dbc-96fd-b17d4db8eeba"
            }
          },
          "pools": {
            "996f02ad-8ab4-4c91-9699-f0c03a0509fc": {
              "pool_id": 1,
              "name": "SYSTEM",
              "bulk_size": 262144,
              "obj_size": 0,
              "fanout": 0,
              "sys_meta": true,
              "user_meta": true,
              "user_data": true,
              "device_open_retries": 4,
              "device_replacement": false,
              "cat_map": {
                "6d367981-9ed9-40c9-ac6b-510d11fcc425": {
                  "udid": "silyin-redvm-1:/dev/sdc                                     ",
                  "capacity": 129879769088,
                  "layout_weight": 1,
                  "bept_fanout": 28,
                  "obj_size": 65536,
                  "bulk_size": 262144,
                  "intlg_size": 1073741824,
                  "heap_size": 0,
                  "bulk_cachesz": 107374182,
                  "bept_cachesz": 214748364,
                  "bept_dirtythd": 75,
                  "bept_qcachesz": 0,
                  "reinit": 1,
                  "blocksize": -1,
                  "encr_mode": 3,
                  "csum_alg": 5,
                  "num_cores": 0,
                  "open_retries": 0,
                  "dev_replacement": false,
                  "location": "silyin-redvm-1:/dev/sdc",
                  "failure_domains": [
                    "site:site1",
                    "rack:default_rack",
                    "subrack:default_subrack",
                    "chassis:QEMU-",
                    "instance:silyin-redvm-1-",
                    "device:silyin-redvm-1:/dev/sdc"
                  ],
                  "devnodes": {
                    "baa80cbd-ff83-4909-a034-f03f3e9e9920": {
                      "setup": "{\"name\": \"silyin-redvm-1:/dev/sdc\", \"filename\": \"/dev/sdc\", \"block_size\": 512, \"type\": \"file\"}",
                      "numanode": -1
                    }
                  },
                  "instpref": [
                    "abdf4aab-620a-416f-9827-e4438f58d0c4"
                  ],
                  "cat_id": 2
                },
                "75af122e-d103-417d-91e6-b1b5bf73a0a9": {
                  "udid": "silyin-redvm-2:/dev/sdc                                     ",
                  "capacity": 129879769088,
                  "layout_weight": 1,
                  "bept_fanout": 28,
                  "obj_size": 65536,
                  "bulk_size": 262144,
                  "intlg_size": 1073741824,
                  "heap_size": 0,
                  "bulk_cachesz": 107374182,
                  "bept_cachesz": 214748364,
                  "bept_dirtythd": 75,
                  "bept_qcachesz": 0,
                  "reinit": 1,
                  "blocksize": -1,
                  "encr_mode": 3,
                  "csum_alg": 5,
                  "num_cores": 0,
                  "open_retries": 0,
                  "dev_replacement": false,
                  "location": "silyin-redvm-2:/dev/sdc",
                  "failure_domains": [
                    "site:site1",
                    "rack:default_rack",
                    "subrack:default_subrack",
                    "chassis:QEMU-",
                    "instance:silyin-redvm-2-",
                    "device:silyin-redvm-2:/dev/sdc"
                  ],
                  "devnodes": {
                    "a503f8e2-f77d-44e5-a00c-72ceaf5e0daa": {
                      "setup": "{\"name\": \"silyin-redvm-2:/dev/sdc\", \"filename\": \"/dev/sdc\", \"block_size\": 512, \"type\": \"file\"}",
                      "numanode": -1
                    }
                  },
                  "instpref": [
                    "c1536789-da98-4dbc-96fd-b17d4db8eeba"
                  ],
                  "cat_id": 6
                },
                "7e6a3d7b-699c-4fbd-80d2-756e8984908c": {
                  "udid": "silyin-redvm-2:/dev/sde                                     ",
                  "capacity": 129879769088,
                  "layout_weight": 1,
                  "bept_fanout": 28,
                  "obj_size": 65536,
                  "bulk_size": 262144,
                  "intlg_size": 1073741824,
                  "heap_size": 0,
                  "bulk_cachesz": 107374182,
                  "bept_cachesz": 214748364,
                  "bept_dirtythd": 75,
                  "bept_qcachesz": 0,
                  "reinit": 1,
                  "blocksize": -1,
                  "encr_mode": 3,
                  "csum_alg": 5,
                  "num_cores": 0,
                  "open_retries": 0,
                  "dev_replacement": false,
                  "location": "silyin-redvm-2:/dev/sde",
                  "failure_domains": [
                    "site:site1",
                    "rack:default_rack",
                    "subrack:default_subrack",
                    "chassis:QEMU-",
                    "instance:silyin-redvm-2-",
                    "device:silyin-redvm-2:/dev/sde"
                  ],
                  "devnodes": {
                    "a503f8e2-f77d-44e5-a00c-72ceaf5e0daa": {
                      "setup": "{\"name\": \"silyin-redvm-2:/dev/sde\", \"filename\": \"/dev/sde\", \"block_size\": 512, \"type\": \"file\"}",
                      "numanode": -1
                    }
                  },
                  "instpref": [
                    "c1536789-da98-4dbc-96fd-b17d4db8eeba"
                  ],
                  "cat_id": 8
                },
                "91e4a219-d230-4077-b61b-b135001f12c0": {
                  "udid": "silyin-redvm-1:/dev/sde                                     ",
                  "capacity": 129879769088,
                  "layout_weight": 1,
                  "bept_fanout": 28,
                  "obj_size": 65536,
                  "bulk_size": 262144,
                  "intlg_size": 1073741824,
                  "heap_size": 0,
                  "bulk_cachesz": 107374182,
                  "bept_cachesz": 214748364,
                  "bept_dirtythd": 75,
                  "bept_qcachesz": 0,
                  "reinit": 1,
                  "blocksize": -1,
                  "encr_mode": 3,
                  "csum_alg": 5,
                  "num_cores": 0,
                  "open_retries": 0,
                  "dev_replacement": false,
                  "location": "silyin-redvm-1:/dev/sde",
                  "failure_domains": [
                    "site:site1",
                    "rack:default_rack",
                    "subrack:default_subrack",
                    "chassis:QEMU-",
                    "instance:silyin-redvm-1-",
                    "device:silyin-redvm-1:/dev/sde"
                  ],
                  "devnodes": {
                    "baa80cbd-ff83-4909-a034-f03f3e9e9920": {
                      "setup": "{\"name\": \"silyin-redvm-1:/dev/sde\", \"filename\": \"/dev/sde\", \"block_size\": 512, \"type\": \"file\"}",
                      "numanode": -1
                    }
                  },
                  "instpref": [
                    "abdf4aab-620a-416f-9827-e4438f58d0c4"
                  ],
                  "cat_id": 4
                },
                "a02b1f8d-b243-450a-a19f-0d67819f9255": {
                  "udid": "silyin-redvm-2:/dev/sdb                                     ",
                  "capacity": 129879769088,
                  "layout_weight": 1,
                  "bept_fanout": 28,
                  "obj_size": 65536,
                  "bulk_size": 262144,
                  "intlg_size": 1073741824,
                  "heap_size": 0,
                  "bulk_cachesz": 107374182,
                  "bept_cachesz": 214748364,
                  "bept_dirtythd": 75,
                  "bept_qcachesz": 0,
                  "reinit": 1,
                  "blocksize": -1,
                  "encr_mode": 3,
                  "csum_alg": 5,
                  "num_cores": 0,
                  "open_retries": 0,
                  "dev_replacement": false,
                  "location": "silyin-redvm-2:/dev/sdb",
                  "failure_domains": [
                    "site:site1",
                    "rack:default_rack",
                    "subrack:default_subrack",
                    "chassis:QEMU-",
                    "instance:silyin-redvm-2-",
                    "device:silyin-redvm-2:/dev/sdb"
                  ],
                  "devnodes": {
                    "a503f8e2-f77d-44e5-a00c-72ceaf5e0daa": {
                      "setup": "{\"name\": \"silyin-redvm-2:/dev/sdb\", \"filename\": \"/dev/sdb\", \"block_size\": 512, \"type\": \"file\"}",
                      "numanode": -1
                    }
                  },
                  "instpref": [
                    "c1536789-da98-4dbc-96fd-b17d4db8eeba"
                  ],
                  "cat_id": 5
                },
                "b1178dae-8dd8-4d59-84b6-b8b0851ea4ae": {
                  "udid": "silyin-redvm-2:/dev/sdd                                     ",
                  "capacity": 129879769088,
                  "layout_weight": 1,
                  "bept_fanout": 28,
                  "obj_size": 65536,
                  "bulk_size": 262144,
                  "intlg_size": 1073741824,
                  "heap_size": 0,
                  "bulk_cachesz": 107374182,
                  "bept_cachesz": 214748364,
                  "bept_dirtythd": 75,
                  "bept_qcachesz": 0,
                  "reinit": 1,
                  "blocksize": -1,
                  "encr_mode": 3,
                  "csum_alg": 5,
                  "num_cores": 0,
                  "open_retries": 0,
                  "dev_replacement": false,
                  "location": "silyin-redvm-2:/dev/sdd",
                  "failure_domains": [
                    "site:site1",
                    "rack:default_rack",
                    "subrack:default_subrack",
                    "chassis:QEMU-",
                    "instance:silyin-redvm-2-",
                    "device:silyin-redvm-2:/dev/sdd"
                  ],
                  "devnodes": {
                    "a503f8e2-f77d-44e5-a00c-72ceaf5e0daa": {
                      "setup": "{\"name\": \"silyin-redvm-2:/dev/sdd\", \"filename\": \"/dev/sdd\", \"block_size\": 512, \"type\": \"file\"}",
                      "numanode": -1
                    }
                  },
                  "instpref": [
                    "c1536789-da98-4dbc-96fd-b17d4db8eeba"
                  ],
                  "cat_id": 7
                },
                "d23ce375-e1aa-4f25-bddf-93936f975e43": {
                  "udid": "silyin-redvm-1:/dev/sdb                                     ",
                  "capacity": 129879769088,
                  "layout_weight": 1,
                  "bept_fanout": 28,
                  "obj_size": 65536,
                  "bulk_size": 262144,
                  "intlg_size": 1073741824,
                  "heap_size": 0,
                  "bulk_cachesz": 107374182,
                  "bept_cachesz": 214748364,
                  "bept_dirtythd": 75,
                  "bept_qcachesz": 0,
                  "reinit": 1,
                  "blocksize": -1,
                  "encr_mode": 3,
                  "csum_alg": 5,
                  "num_cores": 0,
                  "open_retries": 0,
                  "dev_replacement": false,
                  "location": "silyin-redvm-1:/dev/sdb",
                  "failure_domains": [
                    "site:site1",
                    "rack:default_rack",
                    "subrack:default_subrack",
                    "chassis:QEMU-",
                    "instance:silyin-redvm-1-",
                    "device:silyin-redvm-1:/dev/sdb"
                  ],
                  "devnodes": {
                    "baa80cbd-ff83-4909-a034-f03f3e9e9920": {
                      "setup": "{\"name\": \"silyin-redvm-1:/dev/sdb\", \"filename\": \"/dev/sdb\", \"block_size\": 512, \"type\": \"file\"}",
                      "numanode": -1
                    }
                  },
                  "instpref": [
                    "abdf4aab-620a-416f-9827-e4438f58d0c4"
                  ],
                  "cat_id": 1
                },
                "e5a5381f-77b8-4c9c-b40a-b483808c3e36": {
                  "udid": "silyin-redvm-1:/dev/sdd                                     ",
                  "capacity": 129879769088,
                  "layout_weight": 1,
                  "bept_fanout": 28,
                  "obj_size": 65536,
                  "bulk_size": 262144,
                  "intlg_size": 1073741824,
                  "heap_size": 0,
                  "bulk_cachesz": 107374182,
                  "bept_cachesz": 214748364,
                  "bept_dirtythd": 75,
                  "bept_qcachesz": 0,
                  "reinit": 1,
                  "blocksize": -1,
                  "encr_mode": 3,
                  "csum_alg": 5,
                  "num_cores": 0,
                  "open_retries": 0,
                  "dev_replacement": false,
                  "location": "silyin-redvm-1:/dev/sdd",
                  "failure_domains": [
                    "site:site1",
                    "rack:default_rack",
                    "subrack:default_subrack",
                    "chassis:QEMU-",
                    "instance:silyin-redvm-1-",
                    "device:silyin-redvm-1:/dev/sdd"
                  ],
                  "devnodes": {
                    "baa80cbd-ff83-4909-a034-f03f3e9e9920": {
                      "setup": "{\"name\": \"silyin-redvm-1:/dev/sdd\", \"filename\": \"/dev/sdd\", \"block_size\": 512, \"type\": \"file\"}",
                      "numanode": -1
                    }
                  },
                  "instpref": [
                    "abdf4aab-620a-416f-9827-e4438f58d0c4"
                  ],
                  "cat_id": 3
                }
              },
              "tables": {
                "1": {
                  "fd_rank": {
                    "board:*": 6,
                    "center:*": 2,
                    "chassis:*": 5,
                    "device:*": 9,
                    "host:*": 7,
                    "instance:*": 8,
                    "rack:*": 3,
                    "site:*": 1,
                    "subrack:*": 4
                  },
                  "type": 3,
                  "data_protect": 4,
                  "lrevict": 0
                },
                "2": {
                  "fd_rank": {
                    "board:*": 6,
                    "center:*": 2,
                    "chassis:*": 5,
                    "device:*": 9,
                    "host:*": 7,
                    "instance:*": 8,
                    "rack:*": 3,
                    "site:*": 1,
                    "subrack:*": 4
                  },
                  "type": 1,
                  "data_protect": 3,
                  "lrevict": 0
                },
                "3": {
                  "fd_rank": {
                    "board:*": 6,
                    "center:*": 2,
                    "chassis:*": 5,
                    "device:*": 9,
                    "host:*": 7,
                    "instance:*": 8,
                    "rack:*": 3,
                    "site:*": 1,
                    "subrack:*": 4
                  },
                  "type": 2,
                  "data_protect": 11,
                  "lrevict": 1
                }
              }
            }
          }
        },
        "notes": [
          {
            "severity": "NOTIC",
            "timestamp": "2024-03_12_10:48:27.000000000",
            "fid": "bce3326224112c4d",
            "message": "Created"
          }
        ]
      }

    cluster_config_params_example:
      description: Cluster config params example
      value: {
        "auto_build_config": false,
        "tunables": {
          "agent_max_respawn": 600,
          "liveness_timeout": 8,
          "replan_timeout": 180,
          "cm_lease_timeout": 5,
          "gossip_us_per_tick": 250000,
          "cap_gossip_us_per_tick": 2500000,
          "capacity_limit_wrt_reject_pcnt": 90,
          "capacity_limit_del_reject_pcnt": 95,
          "capacity_limit_stall_pcnt": 85,
          "etc_vector_size": 32,
          "c2s_credit_high": 64,
          "c2s_credit_low": 64,
          "s2s_credit_high": 4294967295,
          "s2s_credit_low": 4294967295,
          "dlm_credit_high": 4294967295,
          "dlm_credit_low": 4294967295,
          "scr_evict_ping_tout_ms": 20000,
          "scr_evict_ccce_tout_ms": 100000,
          "scr_evict_lkrply_tout_ms": 300000,
          "sched_task_quantum_us": 200,
          "rpc_rdma_pool_sz": 1500,
          "rpc_s2s_credits": 32,
          "rpc_big_cluster_sz": 10,
          "rpc_max_core_cons": 4000,
          "rpc_workers": 3,
          "rpc_recon_time": 2,
          "rpc_recon_attempts": 2,
          "rpc_connecting_timeout": 5,
          "rpc_deep_freeze_timeout": 300,
          "rpc_daemoninfo_expiration": 5,
          "rpc_tcp_zerocopy_size": 16384,
          "rpc_tcp_io_uring": false,
          "rpc_relaxed_ordering": true,
          "rpc_addr_validation": false,
          "rpc_allow_sys_sys": true,
          "rpc_sec_alg": "aes-128-gcm",
          "rpc_cq_batch_sz": 100,
          "rpc_use_localhost": false,
          "jrpc_auth_enforce": false,
          "jrpc_debug_enable": true,
          "jrpc_trace_all": false,
          "jrpc_timeout_auth": 0,
          "jrpc_timeout_idle": 0,
          "jrpc_client_keepalive": 120,
          "jrpc_timeout_token": 900,
          "ring_max_ninflight": 4294967295,
          "ring_max_dequeue_size": 16,
          "enable_proc_info": false,
          "runtime_backup_history": 3,
          "spdk_vhost_socket_path": "/var/tmp",
          "auto_upgrade": false,
          "encryption": "on",
          "encrypt_alg": "aes-256-xts",
          "compression": "FASTCOMPRESS",
          "fastcompress": "LZ4",
          "highcompress": "ZSTD",
          "compress_min_gain": 12,
          "spare_min_eff": 60,
          "runtime_debug_halt": false,
          "checksum_alg": "crc64",
          "blocksize": 4096,
          "max_heap_size": 0,
          "intentlog_unmap": false,
          "eb_scrubber_interval": 43200,
          "eb_catcleaner_interval": 72000,
          "eb_grace_period_ms": 10000,
          "eb_large_grace_period_ms": 86400000,
          "eb_tablet_sel_policy": 3,
          "eb_tablet_search_max": 5,
          "eb_tablet_cache_max": 10,
          "client_interrupts": true,
          "client_rdma_pool_sz": 240,
          "nvme_hotplug": true,
          "rac_evict_task_poll_usec": 10000000,
          "rac_evict_start_nentries": 100,
          "rac_evict_start_main_task": 400,
          "gc_ticker_disabled": false,
          "gc_boot_time": 0,
          "gc_horizon_time": 600,
          "snapshot_resolution_ticks": 268435456,
          "volume_max_segment_size": 1048576,
          "volume_max_num_segments": 256,
          "volume_io_cache_size": 256,
          "volume_io_pool_size": 65535,
          "iobuf_small_bufsize": 8192,
          "iobuf_large_bufsize": 135168,
          "iobuf_small_pool_count": 8192,
          "iobuf_large_pool_count": 1024,
          "nvmf_max_qpairs_ctrlr": 128,
          "nvmf_in_capsule_data_size": 4096,
          "nvmf_io_unit_size_tcp": 131072,
          "nvmf_io_unit_size_rdma": 8192,
          "nvmf_max_io_size": 1048576,
          "nvmf_num_shared_buffers": 4096,
          "nvmf_buf_cache_size": 4294967295,
          "nvmf_tcp_max_queue_depth": 128,
          "nvmf_tcp_max_aq_depth": 128,
          "nvmf_rdma_max_queue_depth": 128,
          "nvmf_rdma_max_aq_depth": 128,
          "nvmf_zcopy": false,
          "dlm_cache_max": 65536,
          "dlm_cacheref_max": 8192
        },
        "num_pools": 1,
        "cats_per_instance_limit": -1,
        "cats_per_numa_limit": -1,
        "last_replica_eviction_policy": 0,
        "bulk_size": 262144,
        "object_size": 0,
        "fanout": 0,
        "pool_device_open_retries": 4,
        "pool_device_replacement": false,
        "meta_protection_level": "3way",
        "data_protection_level": "3parity",
        "min_stripe": 16384,
        "max_stripe": 262144,
        "efficiency": 0,
        "pref_avail": 8,
        "pref_avail_str": "host",
        "policy_max_read_time_ms": 6000,
        "policy_max_write_time_ms": 3000,
        "policy_number_write_later": 0,
        "erasure_bulk_metadata_pool_id": 1,
        "erasure_bulk_metadata_layout_table_id": 1,
        "erasure_bulk_content_pool_id": 1,
        "erasure_bulk_content_layout_table_id": 10,
        "layout_table_id_string": "2",
        "first_config_name": "config_1",
        "pool_name_prefix": "Pool-",
        "data_table_id": "3",
        "mgmt_network_max_speed_gbps": 10,
        "tcp_as_primary_network": false,
        "auto_create_networks": false,
        "meta_policy_auto": true,
        "data_policy_auto": true,
        "enforce_subnets": false,
        "include_cat_devices": [
          "nvme:*",
          "*:/dev/sd*",
          "*:/dev/vd*",
          "*:/dev/xvd*",
          "*:/var/lib/red/*.redcat"
        ]
      }

    cluster_config_pool_example:
      description: Cluster config pool example
      value: {
        "pool_id": 1,
        "name": "SYSTEM",
        "bulk_size": 262144,
        "obj_size": 0,
        "fanout": 0,
        "sys_meta": true,
        "user_meta": true,
        "user_data": true,
        "device_open_retries": 4,
        "device_replacement": false,
        "cat_map": {
          "0bdca466-a01d-4946-8671-69a179f62c59": {
            "udid": "silyin-redvm-2:/dev/sde                                     ",
            "capacity": 129879769088,
            "layout_weight": 1,
            "bept_fanout": 28,
            "obj_size": 65536,
            "bulk_size": 262144,
            "intlg_size": 1073741824,
            "heap_size": 0,
            "bulk_cachesz": 107374182,
            "bept_cachesz": 214748364,
            "bept_dirtythd": 75,
            "bept_qcachesz": 0,
            "reinit": 1,
            "blocksize": -1,
            "encr_mode": 3,
            "csum_alg": 5,
            "num_cores": 0,
            "open_retries": 0,
            "dev_replacement": false,
            "location": "silyin-redvm-2:/dev/sde",
            "failure_domains": [
              "site:site1",
              "rack:default_rack",
              "subrack:default_subrack",
              "chassis:QEMU-",
              "instance:silyin-redvm-2-",
              "device:silyin-redvm-2:/dev/sde"
            ],
            "devnodes": {
              "d2985825-f2a4-4b4f-99d1-70a0200bb187": {
                "setup": "{\"name\": \"silyin-redvm-2:/dev/sde\", \"filename\": \"/dev/sde\", \"block_size\": 512, \"type\": \"file\"}",
                "numanode": -1
              }
            },
            "instpref": [
              "e46f94f7-e8aa-4afc-95ce-768cf33ad3e9"
            ],
            "cat_id": 8
          },
          "18269311-63a5-4d69-80df-f6aa43656110": {
            "udid": "silyin-redvm-1:/dev/sdd                                     ",
            "capacity": 129879769088,
            "layout_weight": 1,
            "bept_fanout": 28,
            "obj_size": 65536,
            "bulk_size": 262144,
            "intlg_size": 1073741824,
            "heap_size": 0,
            "bulk_cachesz": 107374182,
            "bept_cachesz": 214748364,
            "bept_dirtythd": 75,
            "bept_qcachesz": 0,
            "reinit": 1,
            "blocksize": -1,
            "encr_mode": 3,
            "csum_alg": 5,
            "num_cores": 0,
            "open_retries": 0,
            "dev_replacement": false,
            "location": "silyin-redvm-1:/dev/sdd",
            "failure_domains": [
              "site:site1",
              "rack:default_rack",
              "subrack:default_subrack",
              "chassis:QEMU-",
              "instance:silyin-redvm-1-",
              "device:silyin-redvm-1:/dev/sdd"
            ],
            "devnodes": {
              "de490e38-5efb-4f0c-8e7d-7a6b6c2a4417": {
                "setup": "{\"name\": \"silyin-redvm-1:/dev/sdd\", \"filename\": \"/dev/sdd\", \"block_size\": 512, \"type\": \"file\"}",
                "numanode": -1
              }
            },
            "instpref": [
              "61faa9a2-b709-4405-b664-f73dfc6b2761"
            ],
            "cat_id": 3
          },
          "33d6108a-812f-4fee-8b54-e3b364b256b2": {
            "udid": "silyin-redvm-1:/dev/sdc                                     ",
            "capacity": 129879769088,
            "layout_weight": 1,
            "bept_fanout": 28,
            "obj_size": 65536,
            "bulk_size": 262144,
            "intlg_size": 1073741824,
            "heap_size": 0,
            "bulk_cachesz": 107374182,
            "bept_cachesz": 214748364,
            "bept_dirtythd": 75,
            "bept_qcachesz": 0,
            "reinit": 1,
            "blocksize": -1,
            "encr_mode": 3,
            "csum_alg": 5,
            "num_cores": 0,
            "open_retries": 0,
            "dev_replacement": false,
            "location": "silyin-redvm-1:/dev/sdc",
            "failure_domains": [
              "site:site1",
              "rack:default_rack",
              "subrack:default_subrack",
              "chassis:QEMU-",
              "instance:silyin-redvm-1-",
              "device:silyin-redvm-1:/dev/sdc"
            ],
            "devnodes": {
              "de490e38-5efb-4f0c-8e7d-7a6b6c2a4417": {
                "setup": "{\"name\": \"silyin-redvm-1:/dev/sdc\", \"filename\": \"/dev/sdc\", \"block_size\": 512, \"type\": \"file\"}",
                "numanode": -1
              }
            },
            "instpref": [
              "61faa9a2-b709-4405-b664-f73dfc6b2761"
            ],
            "cat_id": 2
          },
          "344b4918-75a7-475e-995d-9078221b826c": {
            "udid": "silyin-redvm-2:/dev/sdc                                     ",
            "capacity": 129879769088,
            "layout_weight": 1,
            "bept_fanout": 28,
            "obj_size": 65536,
            "bulk_size": 262144,
            "intlg_size": 1073741824,
            "heap_size": 0,
            "bulk_cachesz": 107374182,
            "bept_cachesz": 214748364,
            "bept_dirtythd": 75,
            "bept_qcachesz": 0,
            "reinit": 1,
            "blocksize": -1,
            "encr_mode": 3,
            "csum_alg": 5,
            "num_cores": 0,
            "open_retries": 0,
            "dev_replacement": false,
            "location": "silyin-redvm-2:/dev/sdc",
            "failure_domains": [
              "site:site1",
              "rack:default_rack",
              "subrack:default_subrack",
              "chassis:QEMU-",
              "instance:silyin-redvm-2-",
              "device:silyin-redvm-2:/dev/sdc"
            ],
            "devnodes": {
              "d2985825-f2a4-4b4f-99d1-70a0200bb187": {
                "setup": "{\"name\": \"silyin-redvm-2:/dev/sdc\", \"filename\": \"/dev/sdc\", \"block_size\": 512, \"type\": \"file\"}",
                "numanode": -1
              }
            },
            "instpref": [
              "e46f94f7-e8aa-4afc-95ce-768cf33ad3e9"
            ],
            "cat_id": 6
          },
          "514e41b0-563f-42f4-87c7-189fbc3a2d82": {
            "udid": "silyin-redvm-1:/dev/sde                                     ",
            "capacity": 129879769088,
            "layout_weight": 1,
            "bept_fanout": 28,
            "obj_size": 65536,
            "bulk_size": 262144,
            "intlg_size": 1073741824,
            "heap_size": 0,
            "bulk_cachesz": 107374182,
            "bept_cachesz": 214748364,
            "bept_dirtythd": 75,
            "bept_qcachesz": 0,
            "reinit": 1,
            "blocksize": -1,
            "encr_mode": 3,
            "csum_alg": 5,
            "num_cores": 0,
            "open_retries": 0,
            "dev_replacement": false,
            "location": "silyin-redvm-1:/dev/sde",
            "failure_domains": [
              "site:site1",
              "rack:default_rack",
              "subrack:default_subrack",
              "chassis:QEMU-",
              "instance:silyin-redvm-1-",
              "device:silyin-redvm-1:/dev/sde"
            ],
            "devnodes": {
              "de490e38-5efb-4f0c-8e7d-7a6b6c2a4417": {
                "setup": "{\"name\": \"silyin-redvm-1:/dev/sde\", \"filename\": \"/dev/sde\", \"block_size\": 512, \"type\": \"file\"}",
                "numanode": -1
              }
            },
            "instpref": [
              "61faa9a2-b709-4405-b664-f73dfc6b2761"
            ],
            "cat_id": 4
          },
          "58e5d097-2d2b-42d2-85d2-2fa074254077": {
            "udid": "silyin-redvm-2:/dev/sdb                                     ",
            "capacity": 129879769088,
            "layout_weight": 1,
            "bept_fanout": 28,
            "obj_size": 65536,
            "bulk_size": 262144,
            "intlg_size": 1073741824,
            "heap_size": 0,
            "bulk_cachesz": 107374182,
            "bept_cachesz": 214748364,
            "bept_dirtythd": 75,
            "bept_qcachesz": 0,
            "reinit": 1,
            "blocksize": -1,
            "encr_mode": 3,
            "csum_alg": 5,
            "num_cores": 0,
            "open_retries": 0,
            "dev_replacement": false,
            "location": "silyin-redvm-2:/dev/sdb",
            "failure_domains": [
              "site:site1",
              "rack:default_rack",
              "subrack:default_subrack",
              "chassis:QEMU-",
              "instance:silyin-redvm-2-",
              "device:silyin-redvm-2:/dev/sdb"
            ],
            "devnodes": {
              "d2985825-f2a4-4b4f-99d1-70a0200bb187": {
                "setup": "{\"name\": \"silyin-redvm-2:/dev/sdb\", \"filename\": \"/dev/sdb\", \"block_size\": 512, \"type\": \"file\"}",
                "numanode": -1
              }
            },
            "instpref": [
              "e46f94f7-e8aa-4afc-95ce-768cf33ad3e9"
            ],
            "cat_id": 5
          },
          "6edc9c43-eab1-4d26-92a6-aac5f1de430c": {
            "udid": "silyin-redvm-2:/dev/sdd                                     ",
            "capacity": 129879769088,
            "layout_weight": 1,
            "bept_fanout": 28,
            "obj_size": 65536,
            "bulk_size": 262144,
            "intlg_size": 1073741824,
            "heap_size": 0,
            "bulk_cachesz": 107374182,
            "bept_cachesz": 214748364,
            "bept_dirtythd": 75,
            "bept_qcachesz": 0,
            "reinit": 1,
            "blocksize": -1,
            "encr_mode": 3,
            "csum_alg": 5,
            "num_cores": 0,
            "open_retries": 0,
            "dev_replacement": false,
            "location": "silyin-redvm-2:/dev/sdd",
            "failure_domains": [
              "site:site1",
              "rack:default_rack",
              "subrack:default_subrack",
              "chassis:QEMU-",
              "instance:silyin-redvm-2-",
              "device:silyin-redvm-2:/dev/sdd"
            ],
            "devnodes": {
              "d2985825-f2a4-4b4f-99d1-70a0200bb187": {
                "setup": "{\"name\": \"silyin-redvm-2:/dev/sdd\", \"filename\": \"/dev/sdd\", \"block_size\": 512, \"type\": \"file\"}",
                "numanode": -1
              }
            },
            "instpref": [
              "e46f94f7-e8aa-4afc-95ce-768cf33ad3e9"
            ],
            "cat_id": 7
          },
          "f71624c3-8fd5-4e38-ba52-1adbfd949da7": {
            "udid": "silyin-redvm-1:/dev/sdb                                     ",
            "capacity": 129879769088,
            "layout_weight": 1,
            "bept_fanout": 28,
            "obj_size": 65536,
            "bulk_size": 262144,
            "intlg_size": 1073741824,
            "heap_size": 0,
            "bulk_cachesz": 107374182,
            "bept_cachesz": 214748364,
            "bept_dirtythd": 75,
            "bept_qcachesz": 0,
            "reinit": 1,
            "blocksize": -1,
            "encr_mode": 3,
            "csum_alg": 5,
            "num_cores": 0,
            "open_retries": 0,
            "dev_replacement": false,
            "location": "silyin-redvm-1:/dev/sdb",
            "failure_domains": [
              "site:site1",
              "rack:default_rack",
              "subrack:default_subrack",
              "chassis:QEMU-",
              "instance:silyin-redvm-1-",
              "device:silyin-redvm-1:/dev/sdb"
            ],
            "devnodes": {
              "de490e38-5efb-4f0c-8e7d-7a6b6c2a4417": {
                "setup": "{\"name\": \"silyin-redvm-1:/dev/sdb\", \"filename\": \"/dev/sdb\", \"block_size\": 512, \"type\": \"file\"}",
                "numanode": -1
              }
            },
            "instpref": [
              "61faa9a2-b709-4405-b664-f73dfc6b2761"
            ],
            "cat_id": 1
          }
        },
        "tables": {
          "1": {
            "fd_rank": {
              "board:*": 6,
              "center:*": 2,
              "chassis:*": 5,
              "device:*": 9,
              "host:*": 7,
              "instance:*": 8,
              "rack:*": 3,
              "site:*": 1,
              "subrack:*": 4
            },
            "type": 3,
            "data_protect": 4,
            "lrevict": 0
          },
          "2": {
            "fd_rank": {
              "board:*": 6,
              "center:*": 2,
              "chassis:*": 5,
              "device:*": 9,
              "host:*": 7,
              "instance:*": 8,
              "rack:*": 3,
              "site:*": 1,
              "subrack:*": 4
            },
            "type": 1,
            "data_protect": 3,
            "lrevict": 0
          },
          "3": {
            "fd_rank": {
              "board:*": 6,
              "center:*": 2,
              "chassis:*": 5,
              "device:*": 9,
              "host:*": 7,
              "instance:*": 8,
              "rack:*": 3,
              "site:*": 1,
              "subrack:*": 4
            },
            "type": 2,
            "data_protect": 11,
            "lrevict": 1
          }
        }
      }

    cluster_config_pools_example:
      description: Cluster config pools example
      value: {
        "19521219-d5fe-4319-b084-ec37ce3826e6": {
          "pool_id": 1,
          "name": "SYSTEM",
          "bulk_size": 262144,
          "obj_size": 0,
          "fanout": 0,
          "sys_meta": true,
          "user_meta": true,
          "user_data": true,
          "device_open_retries": 4,
          "device_replacement": false,
          "cat_map": {
            "0bdca466-a01d-4946-8671-69a179f62c59": {
              "udid": "silyin-redvm-2:/dev/sde                                     ",
              "capacity": 129879769088,
              "layout_weight": 1,
              "bept_fanout": 28,
              "obj_size": 65536,
              "bulk_size": 262144,
              "intlg_size": 1073741824,
              "heap_size": 0,
              "bulk_cachesz": 107374182,
              "bept_cachesz": 214748364,
              "bept_dirtythd": 75,
              "bept_qcachesz": 0,
              "reinit": 1,
              "blocksize": -1,
              "encr_mode": 3,
              "csum_alg": 5,
              "num_cores": 0,
              "open_retries": 0,
              "dev_replacement": false,
              "location": "silyin-redvm-2:/dev/sde",
              "failure_domains": [
                "site:site1",
                "rack:default_rack",
                "subrack:default_subrack",
                "chassis:QEMU-",
                "instance:silyin-redvm-2-",
                "device:silyin-redvm-2:/dev/sde"
              ],
              "devnodes": {
                "d2985825-f2a4-4b4f-99d1-70a0200bb187": {
                  "setup": "{\"name\": \"silyin-redvm-2:/dev/sde\", \"filename\": \"/dev/sde\", \"block_size\": 512, \"type\": \"file\"}",
                  "numanode": -1
                }
              },
              "instpref": [
                "e46f94f7-e8aa-4afc-95ce-768cf33ad3e9"
              ],
              "cat_id": 8
            },
            "18269311-63a5-4d69-80df-f6aa43656110": {
              "udid": "silyin-redvm-1:/dev/sdd                                     ",
              "capacity": 129879769088,
              "layout_weight": 1,
              "bept_fanout": 28,
              "obj_size": 65536,
              "bulk_size": 262144,
              "intlg_size": 1073741824,
              "heap_size": 0,
              "bulk_cachesz": 107374182,
              "bept_cachesz": 214748364,
              "bept_dirtythd": 75,
              "bept_qcachesz": 0,
              "reinit": 1,
              "blocksize": -1,
              "encr_mode": 3,
              "csum_alg": 5,
              "num_cores": 0,
              "open_retries": 0,
              "dev_replacement": false,
              "location": "silyin-redvm-1:/dev/sdd",
              "failure_domains": [
                "site:site1",
                "rack:default_rack",
                "subrack:default_subrack",
                "chassis:QEMU-",
                "instance:silyin-redvm-1-",
                "device:silyin-redvm-1:/dev/sdd"
              ],
              "devnodes": {
                "de490e38-5efb-4f0c-8e7d-7a6b6c2a4417": {
                  "setup": "{\"name\": \"silyin-redvm-1:/dev/sdd\", \"filename\": \"/dev/sdd\", \"block_size\": 512, \"type\": \"file\"}",
                  "numanode": -1
                }
              },
              "instpref": [
                "61faa9a2-b709-4405-b664-f73dfc6b2761"
              ],
              "cat_id": 3
            },
            "33d6108a-812f-4fee-8b54-e3b364b256b2": {
              "udid": "silyin-redvm-1:/dev/sdc                                     ",
              "capacity": 129879769088,
              "layout_weight": 1,
              "bept_fanout": 28,
              "obj_size": 65536,
              "bulk_size": 262144,
              "intlg_size": 1073741824,
              "heap_size": 0,
              "bulk_cachesz": 107374182,
              "bept_cachesz": 214748364,
              "bept_dirtythd": 75,
              "bept_qcachesz": 0,
              "reinit": 1,
              "blocksize": -1,
              "encr_mode": 3,
              "csum_alg": 5,
              "num_cores": 0,
              "open_retries": 0,
              "dev_replacement": false,
              "location": "silyin-redvm-1:/dev/sdc",
              "failure_domains": [
                "site:site1",
                "rack:default_rack",
                "subrack:default_subrack",
                "chassis:QEMU-",
                "instance:silyin-redvm-1-",
                "device:silyin-redvm-1:/dev/sdc"
              ],
              "devnodes": {
                "de490e38-5efb-4f0c-8e7d-7a6b6c2a4417": {
                  "setup": "{\"name\": \"silyin-redvm-1:/dev/sdc\", \"filename\": \"/dev/sdc\", \"block_size\": 512, \"type\": \"file\"}",
                  "numanode": -1
                }
              },
              "instpref": [
                "61faa9a2-b709-4405-b664-f73dfc6b2761"
              ],
              "cat_id": 2
            },
            "344b4918-75a7-475e-995d-9078221b826c": {
              "udid": "silyin-redvm-2:/dev/sdc                                     ",
              "capacity": 129879769088,
              "layout_weight": 1,
              "bept_fanout": 28,
              "obj_size": 65536,
              "bulk_size": 262144,
              "intlg_size": 1073741824,
              "heap_size": 0,
              "bulk_cachesz": 107374182,
              "bept_cachesz": 214748364,
              "bept_dirtythd": 75,
              "bept_qcachesz": 0,
              "reinit": 1,
              "blocksize": -1,
              "encr_mode": 3,
              "csum_alg": 5,
              "num_cores": 0,
              "open_retries": 0,
              "dev_replacement": false,
              "location": "silyin-redvm-2:/dev/sdc",
              "failure_domains": [
                "site:site1",
                "rack:default_rack",
                "subrack:default_subrack",
                "chassis:QEMU-",
                "instance:silyin-redvm-2-",
                "device:silyin-redvm-2:/dev/sdc"
              ],
              "devnodes": {
                "d2985825-f2a4-4b4f-99d1-70a0200bb187": {
                  "setup": "{\"name\": \"silyin-redvm-2:/dev/sdc\", \"filename\": \"/dev/sdc\", \"block_size\": 512, \"type\": \"file\"}",
                  "numanode": -1
                }
              },
              "instpref": [
                "e46f94f7-e8aa-4afc-95ce-768cf33ad3e9"
              ],
              "cat_id": 6
            },
            "514e41b0-563f-42f4-87c7-189fbc3a2d82": {
              "udid": "silyin-redvm-1:/dev/sde                                     ",
              "capacity": 129879769088,
              "layout_weight": 1,
              "bept_fanout": 28,
              "obj_size": 65536,
              "bulk_size": 262144,
              "intlg_size": 1073741824,
              "heap_size": 0,
              "bulk_cachesz": 107374182,
              "bept_cachesz": 214748364,
              "bept_dirtythd": 75,
              "bept_qcachesz": 0,
              "reinit": 1,
              "blocksize": -1,
              "encr_mode": 3,
              "csum_alg": 5,
              "num_cores": 0,
              "open_retries": 0,
              "dev_replacement": false,
              "location": "silyin-redvm-1:/dev/sde",
              "failure_domains": [
                "site:site1",
                "rack:default_rack",
                "subrack:default_subrack",
                "chassis:QEMU-",
                "instance:silyin-redvm-1-",
                "device:silyin-redvm-1:/dev/sde"
              ],
              "devnodes": {
                "de490e38-5efb-4f0c-8e7d-7a6b6c2a4417": {
                  "setup": "{\"name\": \"silyin-redvm-1:/dev/sde\", \"filename\": \"/dev/sde\", \"block_size\": 512, \"type\": \"file\"}",
                  "numanode": -1
                }
              },
              "instpref": [
                "61faa9a2-b709-4405-b664-f73dfc6b2761"
              ],
              "cat_id": 4
            },
            "58e5d097-2d2b-42d2-85d2-2fa074254077": {
              "udid": "silyin-redvm-2:/dev/sdb                                     ",
              "capacity": 129879769088,
              "layout_weight": 1,
              "bept_fanout": 28,
              "obj_size": 65536,
              "bulk_size": 262144,
              "intlg_size": 1073741824,
              "heap_size": 0,
              "bulk_cachesz": 107374182,
              "bept_cachesz": 214748364,
              "bept_dirtythd": 75,
              "bept_qcachesz": 0,
              "reinit": 1,
              "blocksize": -1,
              "encr_mode": 3,
              "csum_alg": 5,
              "num_cores": 0,
              "open_retries": 0,
              "dev_replacement": false,
              "location": "silyin-redvm-2:/dev/sdb",
              "failure_domains": [
                "site:site1",
                "rack:default_rack",
                "subrack:default_subrack",
                "chassis:QEMU-",
                "instance:silyin-redvm-2-",
                "device:silyin-redvm-2:/dev/sdb"
              ],
              "devnodes": {
                "d2985825-f2a4-4b4f-99d1-70a0200bb187": {
                  "setup": "{\"name\": \"silyin-redvm-2:/dev/sdb\", \"filename\": \"/dev/sdb\", \"block_size\": 512, \"type\": \"file\"}",
                  "numanode": -1
                }
              },
              "instpref": [
                "e46f94f7-e8aa-4afc-95ce-768cf33ad3e9"
              ],
              "cat_id": 5
            },
            "6edc9c43-eab1-4d26-92a6-aac5f1de430c": {
              "udid": "silyin-redvm-2:/dev/sdd                                     ",
              "capacity": 129879769088,
              "layout_weight": 1,
              "bept_fanout": 28,
              "obj_size": 65536,
              "bulk_size": 262144,
              "intlg_size": 1073741824,
              "heap_size": 0,
              "bulk_cachesz": 107374182,
              "bept_cachesz": 214748364,
              "bept_dirtythd": 75,
              "bept_qcachesz": 0,
              "reinit": 1,
              "blocksize": -1,
              "encr_mode": 3,
              "csum_alg": 5,
              "num_cores": 0,
              "open_retries": 0,
              "dev_replacement": false,
              "location": "silyin-redvm-2:/dev/sdd",
              "failure_domains": [
                "site:site1",
                "rack:default_rack",
                "subrack:default_subrack",
                "chassis:QEMU-",
                "instance:silyin-redvm-2-",
                "device:silyin-redvm-2:/dev/sdd"
              ],
              "devnodes": {
                "d2985825-f2a4-4b4f-99d1-70a0200bb187": {
                  "setup": "{\"name\": \"silyin-redvm-2:/dev/sdd\", \"filename\": \"/dev/sdd\", \"block_size\": 512, \"type\": \"file\"}",
                  "numanode": -1
                }
              },
              "instpref": [
                "e46f94f7-e8aa-4afc-95ce-768cf33ad3e9"
              ],
              "cat_id": 7
            },
            "f71624c3-8fd5-4e38-ba52-1adbfd949da7": {
              "udid": "silyin-redvm-1:/dev/sdb                                     ",
              "capacity": 129879769088,
              "layout_weight": 1,
              "bept_fanout": 28,
              "obj_size": 65536,
              "bulk_size": 262144,
              "intlg_size": 1073741824,
              "heap_size": 0,
              "bulk_cachesz": 107374182,
              "bept_cachesz": 214748364,
              "bept_dirtythd": 75,
              "bept_qcachesz": 0,
              "reinit": 1,
              "blocksize": -1,
              "encr_mode": 3,
              "csum_alg": 5,
              "num_cores": 0,
              "open_retries": 0,
              "dev_replacement": false,
              "location": "silyin-redvm-1:/dev/sdb",
              "failure_domains": [
                "site:site1",
                "rack:default_rack",
                "subrack:default_subrack",
                "chassis:QEMU-",
                "instance:silyin-redvm-1-",
                "device:silyin-redvm-1:/dev/sdb"
              ],
              "devnodes": {
                "de490e38-5efb-4f0c-8e7d-7a6b6c2a4417": {
                  "setup": "{\"name\": \"silyin-redvm-1:/dev/sdb\", \"filename\": \"/dev/sdb\", \"block_size\": 512, \"type\": \"file\"}",
                  "numanode": -1
                }
              },
              "instpref": [
                "61faa9a2-b709-4405-b664-f73dfc6b2761"
              ],
              "cat_id": 1
            }
          },
          "tables": {
            "1": {
              "fd_rank": {
                "board:*": 6,
                "center:*": 2,
                "chassis:*": 5,
                "device:*": 9,
                "host:*": 7,
                "instance:*": 8,
                "rack:*": 3,
                "site:*": 1,
                "subrack:*": 4
              },
              "type": 3,
              "data_protect": 4,
              "lrevict": 0
            },
            "2": {
              "fd_rank": {
                "board:*": 6,
                "center:*": 2,
                "chassis:*": 5,
                "device:*": 9,
                "host:*": 7,
                "instance:*": 8,
                "rack:*": 3,
                "site:*": 1,
                "subrack:*": 4
              },
              "type": 1,
              "data_protect": 3,
              "lrevict": 0
            },
            "3": {
              "fd_rank": {
                "board:*": 6,
                "center:*": 2,
                "chassis:*": 5,
                "device:*": 9,
                "host:*": 7,
                "instance:*": 8,
                "rack:*": 3,
                "site:*": 1,
                "subrack:*": 4
              },
              "type": 2,
              "data_protect": 11,
              "lrevict": 1
            }
          }
        }
      }

    cluster_configs_example:
      description: Cluster configs example
      value: { "auto_config": "http://10.25.116.164/redapi/v1/clusters/red01/configs/auto_config" }

    cluster_dp_profile_example:
      description: Cluster dp_profile example
      value: {
        "cm": {
          "1": "SYSTEM_DATA_1"
        }
      }

    cluster_health_example:
      description: Get cluster health
      value: {
        "cluster_state": "running",
        "cluster_state_epoch": 13,
        "sce": 13,
        "cce": 13,
        "rde": 9,
        "ede": 0,
        "opu": 1713322852352,
        "feature_version": "1.0.5-beta.14722",
        "config_frozen": false,
        "cmsce": 2,
        "cmidx": 2,
        "cmuuid": "3d2ca431-e2dd-49c1-9b14-72a4b928961a",
        "instances": {
          "valid": 2,
          "joined": 2,
          "replay": 0,
          "evicted": 0,
          "left": 0,
          "failed": 0
        },
        "unhealthy_instances": [],
        "cats": {
          "valid": 8,
          "joined": 8,
          "evicted": 0,
          "readable": 8,
          "writeable": 8,
          "delete_ready": 0,
          "delete_pending": 0,
          "degraded": 0
        },
        "pools": {
          "1": {
            "pool": "SYSTEM",
            "cats": {
              "valid": 8,
              "joined": 8,
              "evicted": 0,
              "readable": 8,
              "writeable": 8,
              "delete_ready": 0,
              "delete_pending": 0,
              "degraded": 0
            },
            "tables": {
              "1": {
                "rebuilding_cats": 0,
                "rebalancing_cats": 0,
                "cats": 8,
                "evicted": 0,
                "redundancy": 3,
                "health": "Green",
                "excepted_layout_cnt": 0,
                "width": 4
              },
              "2": {
                "rebuilding_cats": 0,
                "rebalancing_cats": 0,
                "cats": 8,
                "evicted": 0,
                "redundancy": 2,
                "health": "Green",
                "excepted_layout_cnt": 0,
                "width": 3
              },
              "3": {
                "rebuilding_cats": 0,
                "rebalancing_cats": 0,
                "cats": 8,
                "evicted": 0,
                "redundancy": 3,
                "health": "Green",
                "width": 4
              }
            }
          }
        }
      }

    cluster_instance_example:
      description: Cluster instance example
      value: {
        "instance_id": 3,
        "hostuuid": "0943e822-3986-41f3-bf5a-115bff0f919c",
        "hostname": "silyin-redvm-3",
        "cat_cpuset": "0x2",
        "handler_cpuset": "0x2",
        "net_cpuset": "0x2",
        "nvmf_cpuset": "0x2",
        "auxiliary_cpuset": "0x2",
        "posix_cpuset": "0x1",
        "spdk_main_cpuset": "0x2",
        "spdk_memory": 0,
        "spdk_legacy_mem": false,
        "jrpc_settings": {
          "base": 3102,
          "count": 1,
          "worker_count": 12
        },
        "non_affine_mem_fatal": false,
        "rpc_s2s_timeout_sec": 0,
        "rpc_c2s_timeout_sec": 0,
        "interfaces": {
          "dontuseme0": {
            "numanode": 4294967295,
            "enabled": false,
            "sriov": {
              "function": "none",
              "parent_device": "",
              "vf_index": 0
            }
          },
          "eth1": {
            "numanode": 4294967295,
            "enabled": true,
            "sriov": {
              "function": "none",
              "parent_device": "",
              "vf_index": 0
            },
            "rpc": {
              "networks": [
                "59b5c856-9e6b-4445-ac23-6cfdb9c669fd"
              ],
              "server_port": {
                "base": 3201,
                "count": 100
              },
              "client_port": {
                "base": 3301,
                "count": 100
              }
            },
            "jrpc": {
              "encrypt": false
            }
          },
          "lo": {
            "numanode": 4294967295,
            "enabled": true,
            "sriov": {
              "function": "none",
              "parent_device": "",
              "vf_index": 0
            },
            "rpc": {
              "networks": [
                "a5ff81cc-b3d9-4328-940f-cf965acfa98b"
              ],
              "server_port": {
                "base": 3201,
                "count": 100
              },
              "client_port": {
                "base": 3301,
                "count": 100
              }
            }
          },
          "rocep6s0": {
            "numanode": 4294967295,
            "enabled": true,
            "sriov": {
              "function": "none",
              "parent_device": "",
              "vf_index": 0
            },
            "rpc": {
              "networks": [
                "07a81828-db5f-401c-8c8e-fb1d8d2a91ba"
              ],
              "server_port": {
                "base": 3201,
                "count": 100
              },
              "client_port": {
                "base": 3301,
                "count": 100
              }
            }
          }
        },
        "nvme_qualified_name": "nqn.2024-03.com.ddn:nvme.red-285735c7-fab3-4f49-87d7-8e1a2c496348",
        "join_uuid": "fa3fa743-3dd4-4dcb-bf4f-8d0c00a71c9e",
        "join_opu": 0,
        "join_gtx": 0,
        "joined_epoch": 3,
        "evicted_epoch": 0,
        "replay_epoch": 3,
        "quorum_weight": 1,
        "runmode": 1,
        "sw_version": "1.0.5-beta.14722"
      }

    cluster_instance_status_example:
      description: Cluster instance status example
      value: {
        "cluster": "red01",
        "instance": "285735c7-fab3-4f49-87d7-8e1a2c496348",
        "state": "down"
      }

    cluster_instances_example:
      description: Cluster instances example
      value: {
        "285735c7-fab3-4f49-87d7-8e1a2c496348": "http://10.25.116.98/redapi/v1/clusters/red01/instances/285735c7-fab3-4f49-87d7-8e1a2c496348",
        "d4fc9e8f-1f80-4111-b2e7-07b634c4ebd8": "http://10.25.116.98/redapi/v1/clusters/red01/instances/d4fc9e8f-1f80-4111-b2e7-07b634c4ebd8",
        "f539aa3a-bd31-4cb6-9092-a280ec16ed1a": "http://10.25.116.98/redapi/v1/clusters/red01/instances/f539aa3a-bd31-4cb6-9092-a280ec16ed1a",
        "f6c77f34-aad5-464e-b302-6e4ea800f8be": "http://10.25.116.98/redapi/v1/clusters/red01/instances/f6c77f34-aad5-464e-b302-6e4ea800f8be"
      }

    cluster_logs_example:
      description: Clusters logs example
      value: {
        "uuid": "d029a810-e5c1-4f61-8360-61b8f5a4fd8d",
        "file_url": "/var/log/red/uploads/medium_20240305130217-5f18ef6e-8197-472d-9f3b-b2a598cb44e7.tar",
        "node_fs_stats": [
          {
            "err": "",
            "node_name": "rednode-1",
            "free_amount": 65555226624,
            "total_amount": 96450166784,
            "fspath": "/"
          },
          {
            "err": "<head><title>502 Bad Gateway</title></head>...",
            "node_name": "rednode-2",
            "free_amount": 0,
            "total_amount": 0,
            "fspath": "/"
          }
        ]
      }

    cluster_runtime_example:
      description: Cluster runtime config response example
      value: {
        "cluster_uuid": "5b59b0c8-4149-4913-a502-d34c9924008c",
        "config": "auto_config",
        "networks": {
          "2e6520aa-5ea1-4c4a-bc4a-bd24b47dd0cf": {
            "type": "tcp",
            "name": "lo-auto",
            "tags": [
              "NVMF_DATA_SERVICE",
              "NFS_DATA_SERVICE",
              "SQL_DATA_SERVICE",
              "SMB_DATA_SERVICE",
              "REDFS_DATA_SERVICE",
              "RPC_LOOPBACK"
            ],
            "policy": {
              "backup": false,
              "encryption": false,
              "cq_nentries": 16384,
              "max_cq_count": 64,
              "eq_nentries": 100,
              "weight": 100
            },
            "subnet": ""
          },
          "729b4fda-54d2-4270-b050-29667c413a9f": {
            "type": "roce",
            "name": "roce-auto",
            "tags": [
              "NVMF_DATA_SERVICE",
              "NFS_DATA_SERVICE",
              "SQL_DATA_SERVICE",
              "SMB_DATA_SERVICE",
              "REDFS_DATA_SERVICE"
            ],
            "policy": {
              "backup": false,
              "encryption": false,
              "cq_nentries": 16384,
              "max_cq_count": 64,
              "eq_nentries": 100,
              "weight": 100
            },
            "subnet": ""
          },
          "aa717e5a-0279-47d5-ab95-f2923560bc21": {
            "type": "tcp",
            "name": "tcp-auto",
            "tags": [
              "NVMF_DATA_SERVICE",
              "NFS_DATA_SERVICE",
              "SQL_DATA_SERVICE",
              "SMB_DATA_SERVICE",
              "REDFS_DATA_SERVICE"
            ],
            "policy": {
              "backup": true,
              "encryption": false,
              "cq_nentries": 16384,
              "max_cq_count": 64,
              "eq_nentries": 100,
              "weight": 0
            },
            "subnet": ""
          }
        },
        "clients": {
          "default": {
            "rpc_credits": 32,
            "netrules": {
              "*": {
                "tcp": {
                  "allow": [
                    "speed]10-ANY]"
                  ]
                }
              }
            },
            "interfaces": [
              {
                "device_name": "eth*",
                "networks": [
                  "aa717e5a-0279-47d5-ab95-f2923560bc21"
                ]
              },
              {
                "device_name": "en*",
                "networks": [
                  "aa717e5a-0279-47d5-ab95-f2923560bc21"
                ]
              },
              {
                "device_name": "oob*",
                "networks": [
                  "aa717e5a-0279-47d5-ab95-f2923560bc21"
                ]
              },
              {
                "device_name": "p*",
                "networks": [
                  "aa717e5a-0279-47d5-ab95-f2923560bc21"
                ]
              },
              {
                "device_name": "lo*",
                "networks": [
                  "2e6520aa-5ea1-4c4a-bc4a-bd24b47dd0cf"
                ]
              },
              {
                "device_name": "roce*",
                "networks": [
                  "729b4fda-54d2-4270-b050-29667c413a9f"
                ]
              }
            ]
          }
        },
        "tunables": {
          "agent_max_respawn": 600,
          "liveness_timeout": 8,
          "replan_timeout": 180,
          "cm_lease_timeout": 5,
          "gossip_us_per_tick": 250000,
          "cap_gossip_us_per_tick": 2500000,
          "capacity_limit_wrt_reject_pcnt": 90,
          "capacity_limit_del_reject_pcnt": 95,
          "capacity_limit_stall_pcnt": 85,
          "etc_vector_size": 32,
          "c2s_credit_high": 64,
          "c2s_credit_low": 32,
          "s2s_credit_high": 4294967295,
          "s2s_credit_low": 4294967295,
          "dlm_credit_high": 4294967295,
          "dlm_credit_low": 4294967295,
          "scr_evict_ping_tout_ms": 20000,
          "scr_evict_ccce_tout_ms": 100000,
          "scr_evict_lkrply_tout_ms": 300000,
          "sched_task_quantum_us": 200,
          "rpc_rdma_pool_sz": 256,
          "rpc_s2s_credits": 128,
          "rpc_big_cluster_sz": 10,
          "rpc_max_core_cons": 4000,
          "rpc_workers": 3,
          "rpc_recon_time": 2,
          "rpc_recon_attempts": 2,
          "rpc_connecting_timeout": 5,
          "rpc_deep_freeze_timeout": 300,
          "rpc_daemoninfo_expiration": 5,
          "rpc_tcp_zerocopy_size": 16384,
          "rpc_tcp_io_uring": false,
          "rpc_relaxed_ordering": true,
          "rpc_addr_validation": false,
          "rpc_allow_sys_sys": true,
          "rpc_sec_alg": "aes-128-gcm",
          "rpc_cq_batch_sz": 100,
          "rpc_use_localhost": false,
          "jrpc_auth_enforce": false,
          "jrpc_debug_enable": true,
          "jrpc_trace_all": false,
          "jrpc_timeout_auth": 0,
          "jrpc_timeout_idle": 0,
          "jrpc_client_keepalive": 120,
          "jrpc_timeout_token": 900,
          "ring_max_ninflight": 16,
          "ring_max_dequeue_size": 16,
          "enable_proc_info": false,
          "runtime_backup_history": 3,
          "spdk_vhost_socket_path": "/var/tmp",
          "auto_upgrade": false,
          "encryption": "on",
          "encrypt_alg": "aes-256-xts",
          "compression": "FASTCOMPRESS",
          "fastcompress": "LZ4",
          "highcompress": "ZSTD",
          "compress_min_gain": 12,
          "spare_min_eff": 60,
          "runtime_debug_halt": false,
          "checksum_alg": "crc64",
          "blocksize": 4096,
          "max_heap_size": 0,
          "intentlog_unmap": false,
          "eb_scrubber_interval": 43200,
          "eb_catcleaner_interval": 72000,
          "eb_grace_period_ms": 10000,
          "eb_large_grace_period_ms": 86400000,
          "eb_tablet_sel_policy": 3,
          "eb_tablet_search_max": 5,
          "eb_tablet_cache_max": 10,
          "client_interrupts": true,
          "client_rdma_pool_sz": 256,
          "nvme_hotplug": true,
          "rac_evict_task_poll_usec": 10000000,
          "rac_evict_start_nentries": 100,
          "rac_evict_start_main_task": 400,
          "gc_ticker_disabled": false,
          "gc_boot_time": 0,
          "gc_horizon_time": 600,
          "snapshot_resolution_ticks": 268435456,
          "volume_max_segment_size": 1048576,
          "volume_max_num_segments": 256,
          "volume_io_cache_size": 256,
          "volume_io_pool_size": 65535,
          "iobuf_small_bufsize": 8192,
          "iobuf_large_bufsize": 135168,
          "iobuf_small_pool_count": 8192,
          "iobuf_large_pool_count": 1024,
          "nvmf_max_qpairs_ctrlr": 128,
          "nvmf_in_capsule_data_size": 4096,
          "nvmf_io_unit_size_tcp": 131072,
          "nvmf_io_unit_size_rdma": 8192,
          "nvmf_max_io_size": 1048576,
          "nvmf_num_shared_buffers": 4096,
          "nvmf_buf_cache_size": 4294967295,
          "nvmf_tcp_max_queue_depth": 128,
          "nvmf_tcp_max_aq_depth": 128,
          "nvmf_rdma_max_queue_depth": 128,
          "nvmf_rdma_max_aq_depth": 128,
          "nvmf_zcopy": false,
          "dlm_cache_max": 65536,
          "dlm_cacheref_max": 8192
        },
        "notes": {
          "00": {
            "tod": 1710840858,
            "sev": 5,
            "source": "0",
            "fid": "bce3326224112c4d"
          },
          "01": {
            "tod": 1710840858,
            "sev": 5,
            "source": "0",
            "fid": "588bbb2a25e5b4a0",
            "args": [
              "auto_config",
              "red01"
            ]
          }
        },
        "dp_profiles": {
          "9448bdb9-d69a-4e68-95bf-fbfabcebde2a": {
            "id": 1,
            "name": "SYSTEM_DATA_1",
            "meta_poolid": 1,
            "meta_ltid": 2,
            "data_poolid": 1,
            "data_ltid": 3,
            "policy_id": 3,
            "efficiency": 87,
            "protection": 11,
            "availability": 9,
            "min_stripe": 16384,
            "max_stripe": 262144,
            "t_read_max": 6000,
            "t_write_max": 3000,
            "n_write_later": 1,
            "spare_count": 0
          }
        },
        "policies": {
          "2302b020-aecd-4cff-bae1-1f7e99486fe2": {
            "id": 1,
            "name": "SYS",
            "type": 3,
            "protection": 4,
            "min_stripe": 0,
            "max_stripe": 65536,
            "efficiency": 0,
            "pool_id": 1,
            "pref_avail": 9,
            "pref_avail_str": "instance",
            "t_read_max": 0,
            "t_write_max": 0,
            "n_write_later": 0
          },
          "a33436f8-cd60-4a1c-b978-db17cf2f250f": {
            "id": 3,
            "name": "DATA_1",
            "type": 2,
            "protection": 11,
            "min_stripe": 16384,
            "max_stripe": 262144,
            "efficiency": 87,
            "pool_id": 1,
            "pref_avail": 9,
            "pref_avail_str": "instance",
            "t_read_max": 6000,
            "t_write_max": 3000,
            "n_write_later": 1
          },
          "edbc669d-6fb7-4b9c-808f-51e0ca7e4025": {
            "id": 2,
            "name": "USER_1",
            "type": 1,
            "protection": 3,
            "min_stripe": 0,
            "max_stripe": 262144,
            "efficiency": 0,
            "pool_id": 1,
            "pref_avail": 9,
            "pref_avail_str": "instance",
            "t_read_max": 0,
            "t_write_max": 0,
            "n_write_later": 0
          }
        },
        "master_key": -8138970596009172000,
        "signing_key": "l5ad4Dp2hSCS8lprTzRipg==",
        "timestamp": "2024-03-19_09:34:38.055831",
        "comment": "",
        "system_config_epoch": 13,
        "pools": {
          "a21554ff-3f51-447b-bce5-22f86ef0b077": {
            "pool_id": 1,
            "name": "SYSTEM",
            "bulk_size": 262144,
            "obj_size": 0,
            "fanout": 0,
            "sys_meta": true,
            "user_meta": true,
            "user_data": true,
            "device_open_retries": 4,
            "device_replacement": false,
            "cat_map": {
              "0d549e8a-e4fb-47e6-b551-b4ce618b5b0e": {
                "udid": "silyin-redvm-2:/dev/sdd                                     ",
                "capacity": 129879769088,
                "layout_weight": 1,
                "bept_fanout": 28,
                "obj_size": 65536,
                "bulk_size": 262144,
                "intlg_size": 1073741824,
                "heap_size": 0,
                "bulk_cachesz": 107374182,
                "bept_cachesz": 214748364,
                "bept_dirtythd": 75,
                "bept_qcachesz": 0,
                "reinit": 1,
                "blocksize": 4096,
                "encr_mode": 1,
                "csum_alg": 5,
                "num_cores": 0,
                "open_retries": 0,
                "dev_replacement": false,
                "location": "silyin-redvm-2:/dev/sdd",
                "failure_domains": [
                  "device:silyin-redvm-2:/dev/sdd",
                  "chassis:QEMU-",
                  "subrack:default_subrack",
                  "instance:silyin-redvm-2-",
                  "rack:default_rack",
                  "site:site1"
                ],
                "devnodes": {
                  "4713361d-b192-4a75-aa9f-e39e2dd85b16": {
                    "setup": "{\"name\": \"silyin-redvm-2:/dev/sdd\", \"filename\": \"/dev/sdd\", \"block_size\": 512, \"type\": \"file\"}",
                    "numanode": 4294967295
                  }
                },
                "instpref": [
                  "9dfb00ee-6b69-4e6f-847a-7b2dd516e7d6"
                ],
                "cat_id": 7,
                "owner": 2,
                "join_uuid": "6e2a7c7e-5f14-4858-b377-163661667679",
                "joined_epoch": 7,
                "evicted_epoch": 0,
                "removed_epoch": 0,
                "delete_pending": false,
                "evicted_time": 0,
                "eviction_catchup_epoch": 1,
                "eviction_opu": 0,
                "capability": 2,
                "runmode": 1,
                "lcore": 1,
                "affine_core": 1,
                "health": 1,
                "instdata": {
                  "9dfb00ee-6b69-4e6f-847a-7b2dd516e7d6": {
                    "cat_health": 1
                  }
                }
              },
              "374894b2-7039-46ec-bb87-5794a8838580": {
                "udid": "silyin-redvm-1:/dev/sde                                     ",
                "capacity": 129879769088,
                "layout_weight": 1,
                "bept_fanout": 28,
                "obj_size": 65536,
                "bulk_size": 262144,
                "intlg_size": 1073741824,
                "heap_size": 0,
                "bulk_cachesz": 107374182,
                "bept_cachesz": 214748364,
                "bept_dirtythd": 75,
                "bept_qcachesz": 0,
                "reinit": 1,
                "blocksize": 4096,
                "encr_mode": 1,
                "csum_alg": 5,
                "num_cores": 0,
                "open_retries": 0,
                "dev_replacement": false,
                "location": "silyin-redvm-1:/dev/sde",
                "failure_domains": [
                  "device:silyin-redvm-1:/dev/sde",
                  "instance:silyin-redvm-1-",
                  "chassis:QEMU-",
                  "subrack:default_subrack",
                  "rack:default_rack",
                  "site:site1"
                ],
                "devnodes": {
                  "8f50798c-5f11-48e9-8048-af31eaa27b92": {
                    "setup": "{\"name\": \"silyin-redvm-1:/dev/sde\", \"filename\": \"/dev/sde\", \"block_size\": 512, \"type\": \"file\"}",
                    "numanode": 4294967295
                  }
                },
                "instpref": [
                  "fc62045f-6ed5-4999-845e-cbe3427416e9"
                ],
                "cat_id": 4,
                "owner": 1,
                "join_uuid": "4aa0335d-8680-43ab-bcc3-39f228030e7e",
                "joined_epoch": 7,
                "evicted_epoch": 0,
                "removed_epoch": 0,
                "delete_pending": false,
                "evicted_time": 0,
                "eviction_catchup_epoch": 1,
                "eviction_opu": 0,
                "capability": 2,
                "runmode": 1,
                "lcore": 1,
                "affine_core": 1,
                "health": 1,
                "instdata": {
                  "fc62045f-6ed5-4999-845e-cbe3427416e9": {
                    "cat_health": 1
                  }
                }
              },
              "3ef0264c-0555-422c-a0bd-6e1627abe7d8": {
                "udid": "silyin-redvm-1:/dev/sdb                                     ",
                "capacity": 129879769088,
                "layout_weight": 1,
                "bept_fanout": 28,
                "obj_size": 65536,
                "bulk_size": 262144,
                "intlg_size": 1073741824,
                "heap_size": 0,
                "bulk_cachesz": 107374182,
                "bept_cachesz": 214748364,
                "bept_dirtythd": 75,
                "bept_qcachesz": 0,
                "reinit": 1,
                "blocksize": 4096,
                "encr_mode": 1,
                "csum_alg": 5,
                "num_cores": 0,
                "open_retries": 0,
                "dev_replacement": false,
                "location": "silyin-redvm-1:/dev/sdb",
                "failure_domains": [
                  "device:silyin-redvm-1:/dev/sdb",
                  "instance:silyin-redvm-1-",
                  "chassis:QEMU-",
                  "subrack:default_subrack",
                  "rack:default_rack",
                  "site:site1"
                ],
                "devnodes": {
                  "8f50798c-5f11-48e9-8048-af31eaa27b92": {
                    "setup": "{\"name\": \"silyin-redvm-1:/dev/sdb\", \"filename\": \"/dev/sdb\", \"block_size\": 512, \"type\": \"file\"}",
                    "numanode": 4294967295
                  }
                },
                "instpref": [
                  "fc62045f-6ed5-4999-845e-cbe3427416e9"
                ],
                "cat_id": 1,
                "owner": 1,
                "join_uuid": "4aa0335d-8680-43ab-bcc3-39f228030e7e",
                "joined_epoch": 7,
                "evicted_epoch": 0,
                "removed_epoch": 0,
                "delete_pending": false,
                "evicted_time": 0,
                "eviction_catchup_epoch": 1,
                "eviction_opu": 0,
                "capability": 2,
                "runmode": 1,
                "lcore": 1,
                "affine_core": 1,
                "health": 1,
                "instdata": {
                  "fc62045f-6ed5-4999-845e-cbe3427416e9": {
                    "cat_health": 1
                  }
                }
              },
              "4c0aaf17-63eb-46fc-b474-f98a5bfb4b60": {
                "udid": "silyin-redvm-2:/dev/sde                                     ",
                "capacity": 129879769088,
                "layout_weight": 1,
                "bept_fanout": 28,
                "obj_size": 65536,
                "bulk_size": 262144,
                "intlg_size": 1073741824,
                "heap_size": 0,
                "bulk_cachesz": 107374182,
                "bept_cachesz": 214748364,
                "bept_dirtythd": 75,
                "bept_qcachesz": 0,
                "reinit": 1,
                "blocksize": 4096,
                "encr_mode": 1,
                "csum_alg": 5,
                "num_cores": 0,
                "open_retries": 0,
                "dev_replacement": false,
                "location": "silyin-redvm-2:/dev/sde",
                "failure_domains": [
                  "chassis:QEMU-",
                  "device:silyin-redvm-2:/dev/sde",
                  "subrack:default_subrack",
                  "instance:silyin-redvm-2-",
                  "rack:default_rack",
                  "site:site1"
                ],
                "devnodes": {
                  "4713361d-b192-4a75-aa9f-e39e2dd85b16": {
                    "setup": "{\"name\": \"silyin-redvm-2:/dev/sde\", \"filename\": \"/dev/sde\", \"block_size\": 512, \"type\": \"file\"}",
                    "numanode": 4294967295
                  }
                },
                "instpref": [
                  "9dfb00ee-6b69-4e6f-847a-7b2dd516e7d6"
                ],
                "cat_id": 8,
                "owner": 2,
                "join_uuid": "6e2a7c7e-5f14-4858-b377-163661667679",
                "joined_epoch": 7,
                "evicted_epoch": 0,
                "removed_epoch": 0,
                "delete_pending": false,
                "evicted_time": 0,
                "eviction_catchup_epoch": 1,
                "eviction_opu": 0,
                "capability": 2,
                "runmode": 1,
                "lcore": 1,
                "affine_core": 1,
                "health": 1,
                "instdata": {
                  "9dfb00ee-6b69-4e6f-847a-7b2dd516e7d6": {
                    "cat_health": 1
                  }
                }
              },
              "743e9699-0745-406d-bf83-470179c4ba08": {
                "udid": "silyin-redvm-2:/dev/sdc                                     ",
                "capacity": 129879769088,
                "layout_weight": 1,
                "bept_fanout": 28,
                "obj_size": 65536,
                "bulk_size": 262144,
                "intlg_size": 1073741824,
                "heap_size": 0,
                "bulk_cachesz": 107374182,
                "bept_cachesz": 214748364,
                "bept_dirtythd": 75,
                "bept_qcachesz": 0,
                "reinit": 1,
                "blocksize": 4096,
                "encr_mode": 1,
                "csum_alg": 5,
                "num_cores": 0,
                "open_retries": 0,
                "dev_replacement": false,
                "location": "silyin-redvm-2:/dev/sdc",
                "failure_domains": [
                  "chassis:QEMU-",
                  "subrack:default_subrack",
                  "instance:silyin-redvm-2-",
                  "rack:default_rack",
                  "device:silyin-redvm-2:/dev/sdc",
                  "site:site1"
                ],
                "devnodes": {
                  "4713361d-b192-4a75-aa9f-e39e2dd85b16": {
                    "setup": "{\"name\": \"silyin-redvm-2:/dev/sdc\", \"filename\": \"/dev/sdc\", \"block_size\": 512, \"type\": \"file\"}",
                    "numanode": 4294967295
                  }
                },
                "instpref": [
                  "9dfb00ee-6b69-4e6f-847a-7b2dd516e7d6"
                ],
                "cat_id": 6,
                "owner": 2,
                "join_uuid": "6e2a7c7e-5f14-4858-b377-163661667679",
                "joined_epoch": 7,
                "evicted_epoch": 0,
                "removed_epoch": 0,
                "delete_pending": false,
                "evicted_time": 0,
                "eviction_catchup_epoch": 1,
                "eviction_opu": 0,
                "capability": 2,
                "runmode": 1,
                "lcore": 1,
                "affine_core": 1,
                "health": 1,
                "instdata": {
                  "9dfb00ee-6b69-4e6f-847a-7b2dd516e7d6": {
                    "cat_health": 1
                  }
                }
              },
              "8efed6ec-031f-42e7-8c61-87caa6691f4a": {
                "udid": "silyin-redvm-1:/dev/sdd                                     ",
                "capacity": 129879769088,
                "layout_weight": 1,
                "bept_fanout": 28,
                "obj_size": 65536,
                "bulk_size": 262144,
                "intlg_size": 1073741824,
                "heap_size": 0,
                "bulk_cachesz": 107374182,
                "bept_cachesz": 214748364,
                "bept_dirtythd": 75,
                "bept_qcachesz": 0,
                "reinit": 1,
                "blocksize": 4096,
                "encr_mode": 1,
                "csum_alg": 5,
                "num_cores": 0,
                "open_retries": 0,
                "dev_replacement": false,
                "location": "silyin-redvm-1:/dev/sdd",
                "failure_domains": [
                  "instance:silyin-redvm-1-",
                  "device:silyin-redvm-1:/dev/sdd",
                  "chassis:QEMU-",
                  "subrack:default_subrack",
                  "rack:default_rack",
                  "site:site1"
                ],
                "devnodes": {
                  "8f50798c-5f11-48e9-8048-af31eaa27b92": {
                    "setup": "{\"name\": \"silyin-redvm-1:/dev/sdd\", \"filename\": \"/dev/sdd\", \"block_size\": 512, \"type\": \"file\"}",
                    "numanode": 4294967295
                  }
                },
                "instpref": [
                  "fc62045f-6ed5-4999-845e-cbe3427416e9"
                ],
                "cat_id": 3,
                "owner": 1,
                "join_uuid": "4aa0335d-8680-43ab-bcc3-39f228030e7e",
                "joined_epoch": 7,
                "evicted_epoch": 0,
                "removed_epoch": 0,
                "delete_pending": false,
                "evicted_time": 0,
                "eviction_catchup_epoch": 1,
                "eviction_opu": 0,
                "capability": 2,
                "runmode": 1,
                "lcore": 1,
                "affine_core": 1,
                "health": 1,
                "instdata": {
                  "fc62045f-6ed5-4999-845e-cbe3427416e9": {
                    "cat_health": 1
                  }
                }
              },
              "b4a8c387-7597-46f6-9732-96de86e798af": {
                "udid": "silyin-redvm-2:/dev/sdb                                     ",
                "capacity": 129879769088,
                "layout_weight": 1,
                "bept_fanout": 28,
                "obj_size": 65536,
                "bulk_size": 262144,
                "intlg_size": 1073741824,
                "heap_size": 0,
                "bulk_cachesz": 107374182,
                "bept_cachesz": 214748364,
                "bept_dirtythd": 75,
                "bept_qcachesz": 0,
                "reinit": 1,
                "blocksize": 4096,
                "encr_mode": 1,
                "csum_alg": 5,
                "num_cores": 0,
                "open_retries": 0,
                "dev_replacement": false,
                "location": "silyin-redvm-2:/dev/sdb",
                "failure_domains": [
                  "device:silyin-redvm-2:/dev/sdb",
                  "chassis:QEMU-",
                  "subrack:default_subrack",
                  "instance:silyin-redvm-2-",
                  "rack:default_rack",
                  "site:site1"
                ],
                "devnodes": {
                  "4713361d-b192-4a75-aa9f-e39e2dd85b16": {
                    "setup": "{\"name\": \"silyin-redvm-2:/dev/sdb\", \"filename\": \"/dev/sdb\", \"block_size\": 512, \"type\": \"file\"}",
                    "numanode": 4294967295
                  }
                },
                "instpref": [
                  "9dfb00ee-6b69-4e6f-847a-7b2dd516e7d6"
                ],
                "cat_id": 5,
                "owner": 2,
                "join_uuid": "6e2a7c7e-5f14-4858-b377-163661667679",
                "joined_epoch": 7,
                "evicted_epoch": 0,
                "removed_epoch": 0,
                "delete_pending": false,
                "evicted_time": 0,
                "eviction_catchup_epoch": 1,
                "eviction_opu": 0,
                "capability": 2,
                "runmode": 1,
                "lcore": 1,
                "affine_core": 1,
                "health": 1,
                "instdata": {
                  "9dfb00ee-6b69-4e6f-847a-7b2dd516e7d6": {
                    "cat_health": 1
                  }
                }
              },
              "e853459f-cba0-4b6a-9ee2-af29fe066629": {
                "udid": "silyin-redvm-1:/dev/sdc                                     ",
                "capacity": 129879769088,
                "layout_weight": 1,
                "bept_fanout": 28,
                "obj_size": 65536,
                "bulk_size": 262144,
                "intlg_size": 1073741824,
                "heap_size": 0,
                "bulk_cachesz": 107374182,
                "bept_cachesz": 214748364,
                "bept_dirtythd": 75,
                "bept_qcachesz": 0,
                "reinit": 1,
                "blocksize": 4096,
                "encr_mode": 1,
                "csum_alg": 5,
                "num_cores": 0,
                "open_retries": 0,
                "dev_replacement": false,
                "location": "silyin-redvm-1:/dev/sdc",
                "failure_domains": [
                  "device:silyin-redvm-1:/dev/sdc",
                  "instance:silyin-redvm-1-",
                  "chassis:QEMU-",
                  "subrack:default_subrack",
                  "rack:default_rack",
                  "site:site1"
                ],
                "devnodes": {
                  "8f50798c-5f11-48e9-8048-af31eaa27b92": {
                    "setup": "{\"name\": \"silyin-redvm-1:/dev/sdc\", \"filename\": \"/dev/sdc\", \"block_size\": 512, \"type\": \"file\"}",
                    "numanode": 4294967295
                  }
                },
                "instpref": [
                  "fc62045f-6ed5-4999-845e-cbe3427416e9"
                ],
                "cat_id": 2,
                "owner": 1,
                "join_uuid": "4aa0335d-8680-43ab-bcc3-39f228030e7e",
                "joined_epoch": 7,
                "evicted_epoch": 0,
                "removed_epoch": 0,
                "delete_pending": false,
                "evicted_time": 0,
                "eviction_catchup_epoch": 1,
                "eviction_opu": 0,
                "capability": 2,
                "runmode": 1,
                "lcore": 1,
                "affine_core": 1,
                "health": 1,
                "instdata": {
                  "fc62045f-6ed5-4999-845e-cbe3427416e9": {
                    "cat_health": 1
                  }
                }
              }
            },
            "tables": {
              "1": {
                "fd_rank": {
                  "board:*": 6,
                  "center:*": 2,
                  "chassis:*": 5,
                  "device:*": 9,
                  "host:*": 7,
                  "instance:*": 8,
                  "rack:*": 3,
                  "site:*": 1,
                  "subrack:*": 4
                },
                "type": 3,
                "data_protect": 4,
                "base_uuid": "4430dba7-030c-4067-9928-a0faed626cdd",
                "prime_uuid": "a66f9315-8c1f-403d-a9ff-34ef091c8a0f"
              },
              "2": {
                "fd_rank": {
                  "board:*": 6,
                  "center:*": 2,
                  "chassis:*": 5,
                  "device:*": 9,
                  "host:*": 7,
                  "instance:*": 8,
                  "rack:*": 3,
                  "site:*": 1,
                  "subrack:*": 4
                },
                "type": 1,
                "data_protect": 3,
                "base_uuid": "a870ddee-8eb8-4210-b945-a089ef97ae9c",
                "prime_uuid": "edcc66b0-1fae-425f-a552-31af106c0aeb"
              },
              "3": {
                "fd_rank": {
                  "board:*": 6,
                  "center:*": 2,
                  "chassis:*": 5,
                  "device:*": 9,
                  "host:*": 7,
                  "instance:*": 8,
                  "rack:*": 3,
                  "site:*": 1,
                  "subrack:*": 4
                },
                "type": 2,
                "data_protect": 11,
                "base_uuid": "7fc61e0c-e7af-4d62-8c92-03a0ec47b80a"
              }
            }
          }
        },
        "instances": {
          "9dfb00ee-6b69-4e6f-847a-7b2dd516e7d6": {
            "instance_id": 2,
            "hostuuid": "4713361d-b192-4a75-aa9f-e39e2dd85b16",
            "hostname": "silyin-redvm-2",
            "cat_cpuset": "0x2",
            "handler_cpuset": "0x2",
            "net_cpuset": "0x2",
            "nvmf_cpuset": "0x2",
            "auxiliary_cpuset": "0x2",
            "posix_cpuset": "0x1",
            "spdk_main_cpuset": "0x2",
            "spdk_memory": 0,
            "spdk_legacy_mem": false,
            "jrpc_settings": {
              "base": 3102,
              "count": 1,
              "worker_count": 12
            },
            "non_affine_mem_fatal": false,
            "rpc_s2s_timeout_sec": 0,
            "rpc_c2s_timeout_sec": 0,
            "interfaces": {
              "dontuseme0": {
                "numanode": 4294967295,
                "enabled": false,
                "sriov": {
                  "function": "none",
                  "parent_device": "",
                  "vf_index": 0
                }
              },
              "eth1": {
                "numanode": 4294967295,
                "enabled": true,
                "sriov": {
                  "function": "none",
                  "parent_device": "",
                  "vf_index": 0
                },
                "rpc": {
                  "networks": [
                    "aa717e5a-0279-47d5-ab95-f2923560bc21"
                  ],
                  "server_port": {
                    "base": 3201,
                    "count": 100
                  },
                  "client_port": {
                    "base": 3301,
                    "count": 100
                  }
                },
                "jrpc": {
                  "encrypt": false
                }
              },
              "lo": {
                "numanode": 4294967295,
                "enabled": true,
                "sriov": {
                  "function": "none",
                  "parent_device": "",
                  "vf_index": 0
                },
                "rpc": {
                  "networks": [
                    "2e6520aa-5ea1-4c4a-bc4a-bd24b47dd0cf"
                  ],
                  "server_port": {
                    "base": 3201,
                    "count": 100
                  },
                  "client_port": {
                    "base": 3301,
                    "count": 100
                  }
                }
              },
              "rocep6s0": {
                "numanode": 4294967295,
                "enabled": true,
                "sriov": {
                  "function": "none",
                  "parent_device": "",
                  "vf_index": 0
                },
                "rpc": {
                  "networks": [
                    "729b4fda-54d2-4270-b050-29667c413a9f"
                  ],
                  "server_port": {
                    "base": 3201,
                    "count": 100
                  },
                  "client_port": {
                    "base": 3301,
                    "count": 100
                  }
                }
              }
            },
            "nvme_qualified_name": "nqn.2024-03.com.ddn:nvme.red-9dfb00ee-6b69-4e6f-847a-7b2dd516e7d6",
            "join_uuid": "6e2a7c7e-5f14-4858-b377-163661667679",
            "join_opu": 0,
            "join_gtx": 0,
            "joined_epoch": 5,
            "evicted_epoch": 0,
            "replay_epoch": 5,
            "quorum_weight": 1,
            "runmode": 1,
            "sw_version": "1.0.5-beta.14905"
          },
          "fc62045f-6ed5-4999-845e-cbe3427416e9": {
            "instance_id": 1,
            "hostuuid": "8f50798c-5f11-48e9-8048-af31eaa27b92",
            "hostname": "silyin-redvm-1",
            "cat_cpuset": "0x2",
            "handler_cpuset": "0x2",
            "net_cpuset": "0x2",
            "nvmf_cpuset": "0x2",
            "auxiliary_cpuset": "0x2",
            "posix_cpuset": "0x1",
            "spdk_main_cpuset": "0x2",
            "spdk_memory": 0,
            "spdk_legacy_mem": false,
            "jrpc_settings": {
              "base": 3102,
              "count": 1,
              "worker_count": 12
            },
            "non_affine_mem_fatal": false,
            "rpc_s2s_timeout_sec": 0,
            "rpc_c2s_timeout_sec": 0,
            "interfaces": {
              "dontuseme0": {
                "numanode": 4294967295,
                "enabled": false,
                "sriov": {
                  "function": "none",
                  "parent_device": "",
                  "vf_index": 0
                }
              },
              "eth1": {
                "numanode": 4294967295,
                "enabled": true,
                "sriov": {
                  "function": "none",
                  "parent_device": "",
                  "vf_index": 0
                },
                "rpc": {
                  "networks": [
                    "aa717e5a-0279-47d5-ab95-f2923560bc21"
                  ],
                  "server_port": {
                    "base": 3201,
                    "count": 100
                  },
                  "client_port": {
                    "base": 3301,
                    "count": 100
                  }
                },
                "jrpc": {
                  "encrypt": false
                }
              },
              "lo": {
                "numanode": 4294967295,
                "enabled": true,
                "sriov": {
                  "function": "none",
                  "parent_device": "",
                  "vf_index": 0
                },
                "rpc": {
                  "networks": [
                    "2e6520aa-5ea1-4c4a-bc4a-bd24b47dd0cf"
                  ],
                  "server_port": {
                    "base": 3201,
                    "count": 100
                  },
                  "client_port": {
                    "base": 3301,
                    "count": 100
                  }
                }
              },
              "rocep6s0": {
                "numanode": 4294967295,
                "enabled": true,
                "sriov": {
                  "function": "none",
                  "parent_device": "",
                  "vf_index": 0
                },
                "rpc": {
                  "networks": [
                    "729b4fda-54d2-4270-b050-29667c413a9f"
                  ],
                  "server_port": {
                    "base": 3201,
                    "count": 100
                  },
                  "client_port": {
                    "base": 3301,
                    "count": 100
                  }
                }
              }
            },
            "nvme_qualified_name": "nqn.2024-03.com.ddn:nvme.red-fc62045f-6ed5-4999-845e-cbe3427416e9",
            "join_uuid": "4aa0335d-8680-43ab-bcc3-39f228030e7e",
            "join_opu": 0,
            "join_gtx": 0,
            "joined_epoch": 3,
            "evicted_epoch": 0,
            "replay_epoch": 3,
            "quorum_weight": 1,
            "runmode": 1,
            "sw_version": "1.0.5-beta.14905"
          }
        },
        "cluster_attrs": {
          "cluster_state": 5,
          "cluster_state_epoch": 13,
          "leader_epoch": 2,
          "leader_id": 1,
          "cluster_create_tod": 1710840858734,
          "boot_epoch": 2,
          "boot_opu": 0,
          "boot_gtx": 0,
          "boot_time": 0,
          "replay_done_epoch": 10,
          "feature_version": "1.0.5-beta.14905",
          "erasure_done_epoch": 0,
          "dlm_init_epoch": 10,
          "reserved_space": 129879769088,
          "config_frozen": false
        }
      }

    cluster_start_example:
      description: Cluster start example
      value: [
        true,
        true,
        true,
        true
      ]

    cluster_status_example:
      description: Get cluster status
      value: {
        "cluster_state": "running",
        "cluster_state_epoch": 13,
        "sce": 13,
        "cce": 13,
        "rde": 9,
        "ede": 0,
        "opu": 1661548363776,
        "feature_version": "1.0.5-beta.14722",
        "config_frozen": false,
        "cmsce": 2,
        "cmidx": 2,
        "cmuuid": "3d2ca431-e2dd-49c1-9b14-72a4b928961a",
        "instances": {
          "1": {
            "uuid": "7a00b256-09ef-4572-87d1-91ac32a60630",
            "joined": true,
            "evicted": false,
            "replay": false,
            "left": false,
            "liveness": "present",
            "hostname": "silyin-redvm-1",
            "sw_version": "1.0.5-beta.14722"
          },
          "2": {
            "uuid": "e2fa121b-be97-4b1c-a154-45daa78a778b",
            "joined": true,
            "evicted": false,
            "replay": false,
            "left": false,
            "liveness": "present",
            "hostname": "silyin-redvm-2",
            "sw_version": "1.0.5-beta.14722"
          }
        },
        "cats": {
          "1": {
            "uuid": "808f9cbd-15a8-4659-b714-c2527d8655be",
            "joined": true,
            "evicted": false,
            "can_read": true,
            "can_write": true,
            "owner": 1,
            "core": 1,
            "affine_core": 1,
            "removed": false,
            "encryption_mode": 1,
            "eviction_catchup": false
          },
          "2": {
            "uuid": "31917fd1-a036-401b-b71d-55732ae17728",
            "joined": true,
            "evicted": false,
            "can_read": true,
            "can_write": true,
            "owner": 1,
            "core": 1,
            "affine_core": 1,
            "removed": false,
            "encryption_mode": 1,
            "eviction_catchup": false
          },
          "3": {
            "uuid": "98ebe85d-7f97-4119-8a89-ebc130be07aa",
            "joined": true,
            "evicted": false,
            "can_read": true,
            "can_write": true,
            "owner": 1,
            "core": 1,
            "affine_core": 1,
            "removed": false,
            "encryption_mode": 1,
            "eviction_catchup": false
          },
          "4": {
            "uuid": "532f8358-b5c3-4590-ac73-d65080ddd0e9",
            "joined": true,
            "evicted": false,
            "can_read": true,
            "can_write": true,
            "owner": 1,
            "core": 1,
            "affine_core": 1,
            "removed": false,
            "encryption_mode": 1,
            "eviction_catchup": false
          },
          "5": {
            "uuid": "4b7ba4e7-60b0-4057-a4ed-38d9a7fa15dc",
            "joined": true,
            "evicted": false,
            "can_read": true,
            "can_write": true,
            "owner": 2,
            "core": 1,
            "affine_core": 1,
            "removed": false,
            "encryption_mode": 1,
            "eviction_catchup": false
          },
          "6": {
            "uuid": "75eeeddc-0a22-4d50-b1a9-cc561c7aef60",
            "joined": true,
            "evicted": false,
            "can_read": true,
            "can_write": true,
            "owner": 2,
            "core": 1,
            "affine_core": 1,
            "removed": false,
            "encryption_mode": 1,
            "eviction_catchup": false
          },
          "7": {
            "uuid": "c2f74632-179f-4799-a3af-6a8b28d38bc5",
            "joined": true,
            "evicted": false,
            "can_read": true,
            "can_write": true,
            "owner": 2,
            "core": 1,
            "affine_core": 1,
            "removed": false,
            "encryption_mode": 1,
            "eviction_catchup": false
          },
          "8": {
            "uuid": "fa6714af-7ebe-4b26-b310-24929808d365",
            "joined": true,
            "evicted": false,
            "can_read": true,
            "can_write": true,
            "owner": 2,
            "core": 1,
            "affine_core": 1,
            "removed": false,
            "encryption_mode": 1,
            "eviction_catchup": false
          }
        },
        "pools": {
          "1": {
            "pool_name": "SYSTEM",
            "cats": {
              "1": {
                "udid": "silyin-redvm-1:/dev/sdb                                     "
              },
              "2": {
                "udid": "silyin-redvm-1:/dev/sdc                                     "
              },
              "3": {
                "udid": "silyin-redvm-1:/dev/sdd                                     "
              },
              "4": {
                "udid": "silyin-redvm-1:/dev/sde                                     "
              },
              "5": {
                "udid": "silyin-redvm-2:/dev/sdb                                     "
              },
              "6": {
                "udid": "silyin-redvm-2:/dev/sdc                                     "
              },
              "7": {
                "udid": "silyin-redvm-2:/dev/sdd                                     "
              },
              "8": {
                "udid": "silyin-redvm-2:/dev/sde                                     "
              }
            },
            "tables": {
              "1": {
                "data_protect": 4,
                "base_uuid": "7f0a5cf8-f0db-43f9-9819-cf138357f46f",
                "prime_uuid": "0759f8fb-8136-4f2d-9c0e-5fdfd6237567"
              },
              "2": {
                "data_protect": 3,
                "base_uuid": "f46c4335-83c4-420b-b18f-b913531e0a63",
                "prime_uuid": "cf04683e-68ae-48d2-ab70-16b5adf9a470"
              },
              "3": {
                "data_protect": 11,
                "base_uuid": "17d8e0a1-9be1-46c8-b977-719712673df4"
              }
            }
          }
        }
      }

    clusters_example:
      description: Clusters list example
      value: { "cluster1": "http://10.25.116.164/redapi/v1/clusters/cluster1" }

    configs_produce_example:
      description: Initial data config
      value: {
        "result": {
          "cluster_name": "red01",
          "config_name": "test_config",
          "configs": {
            "default_config": {
              "tunables": {
                "c2s_credit_high": 64,
                "c2s_credit_low": 32,
                "rpc_rdma_pool_sz": 256,
                "rpc_s2s_credits": 128,
                "ring_max_ninflight": 16,
                "ring_max_dequeue_size": 16,
                "client_rdma_pool_sz": 256
              },
              "nodes": [
                {
                  "silyin-redvm-2": {
                    "devices": {
                      "silyin-redvm-2:/dev/sdb                                     ": {
                        "bulk_cachesz": 107374182,
                        "bept_cachesz": 214748364
                      },
                      "silyin-redvm-2:/dev/sdc                                     ": {
                        "bulk_cachesz": 107374182,
                        "bept_cachesz": 214748364
                      },
                      "silyin-redvm-2:/dev/sdd                                     ": {
                        "bulk_cachesz": 107374182,
                        "bept_cachesz": 214748364
                      },
                      "silyin-redvm-2:/dev/sde                                     ": {
                        "bulk_cachesz": 107374182,
                        "bept_cachesz": 214748364
                      }
                    },
                    "interfaces": {
                      "dontuseme0": {
                        "numanode": 4294967295,
                        "enabled": false,
                        "sriov": {
                          "function": "none",
                          "parent_device": "",
                          "vf_index": 0
                        }
                      },
                      "eth1": {
                        "numanode": 4294967295,
                        "enabled": true,
                        "sriov": {
                          "function": "none",
                          "parent_device": "",
                          "vf_index": 0
                        },
                        "rpc": {
                          "networks": [
                            "4eaf50a9-0248-4c24-bdb0-9b374948fd52"
                          ],
                          "server_port": {
                            "base": 3201,
                            "count": 100
                          },
                          "client_port": {
                            "base": 3301,
                            "count": 100
                          }
                        },
                        "jrpc": {
                          "encrypt": false
                        }
                      },
                      "lo": {
                        "numanode": 4294967295,
                        "enabled": true,
                        "sriov": {
                          "function": "none",
                          "parent_device": "",
                          "vf_index": 0
                        },
                        "rpc": {
                          "networks": [
                            "fd6b2922-8414-4675-9fc3-77a682847048"
                          ],
                          "server_port": {
                            "base": 3201,
                            "count": 100
                          },
                          "client_port": {
                            "base": 3301,
                            "count": 100
                          }
                        }
                      },
                      "rocep6s0": {
                        "numanode": 4294967295,
                        "enabled": true,
                        "sriov": {
                          "function": "none",
                          "parent_device": "",
                          "vf_index": 0
                        },
                        "rpc": {
                          "networks": [
                            "f5bee2b1-67f8-42da-916a-d5d6fea2ee65"
                          ],
                          "server_port": {
                            "base": 3201,
                            "count": 100
                          },
                          "client_port": {
                            "base": 3301,
                            "count": 100
                          }
                        }
                      }
                    },
                    "instance": {
                      "cat_cpuset": "0x2",
                      "handler_cpuset": "0x2",
                      "net_cpuset": "0x2",
                      "nvmf_cpuset": "0x2",
                      "auxiliary_cpuset": "0x2",
                      "posix_cpuset": "0x1",
                      "spdk_main_cpuset": "0x2"
                    }
                  }
                },
                {
                  "silyin-redvm-1": {
                    "devices": {
                      "silyin-redvm-1:/dev/sdb                                     ": {
                        "bulk_cachesz": 107374182,
                        "bept_cachesz": 214748364
                      },
                      "silyin-redvm-1:/dev/sdc                                     ": {
                        "bulk_cachesz": 107374182,
                        "bept_cachesz": 214748364
                      },
                      "silyin-redvm-1:/dev/sdd                                     ": {
                        "bulk_cachesz": 107374182,
                        "bept_cachesz": 214748364
                      },
                      "silyin-redvm-1:/dev/sde                                     ": {
                        "bulk_cachesz": 107374182,
                        "bept_cachesz": 214748364
                      }
                    },
                    "interfaces": {
                      "dontuseme0": {
                        "numanode": 4294967295,
                        "enabled": false,
                        "sriov": {
                          "function": "none",
                          "parent_device": "",
                          "vf_index": 0
                        }
                      },
                      "eth1": {
                        "numanode": 4294967295,
                        "enabled": true,
                        "sriov": {
                          "function": "none",
                          "parent_device": "",
                          "vf_index": 0
                        },
                        "rpc": {
                          "networks": [
                            "4eaf50a9-0248-4c24-bdb0-9b374948fd52"
                          ],
                          "server_port": {
                            "base": 3201,
                            "count": 100
                          },
                          "client_port": {
                            "base": 3301,
                            "count": 100
                          }
                        },
                        "jrpc": {
                          "encrypt": false
                        }
                      },
                      "lo": {
                        "numanode": 4294967295,
                        "enabled": true,
                        "sriov": {
                          "function": "none",
                          "parent_device": "",
                          "vf_index": 0
                        },
                        "rpc": {
                          "networks": [
                            "fd6b2922-8414-4675-9fc3-77a682847048"
                          ],
                          "server_port": {
                            "base": 3201,
                            "count": 100
                          },
                          "client_port": {
                            "base": 3301,
                            "count": 100
                          }
                        }
                      },
                      "rocep6s0": {
                        "numanode": 4294967295,
                        "enabled": true,
                        "sriov": {
                          "function": "none",
                          "parent_device": "",
                          "vf_index": 0
                        },
                        "rpc": {
                          "networks": [
                            "f5bee2b1-67f8-42da-916a-d5d6fea2ee65"
                          ],
                          "server_port": {
                            "base": 3201,
                            "count": 100
                          },
                          "client_port": {
                            "base": 3301,
                            "count": 100
                          }
                        }
                      }
                    },
                    "instance": {
                      "cat_cpuset": "0x2",
                      "handler_cpuset": "0x2",
                      "net_cpuset": "0x2",
                      "nvmf_cpuset": "0x2",
                      "auxiliary_cpuset": "0x2",
                      "posix_cpuset": "0x1",
                      "spdk_main_cpuset": "0x2"
                    }
                  }
                },
                {
                  "silyin-redvm-3": {
                    "devices": {
                      "silyin-redvm-3:/dev/sdb                                     ": {
                        "bulk_cachesz": 107374182,
                        "bept_cachesz": 214748364
                      },
                      "silyin-redvm-3:/dev/sdc                                     ": {
                        "bulk_cachesz": 107374182,
                        "bept_cachesz": 214748364
                      },
                      "silyin-redvm-3:/dev/sdd                                     ": {
                        "bulk_cachesz": 107374182,
                        "bept_cachesz": 214748364
                      },
                      "silyin-redvm-3:/dev/sde                                     ": {
                        "bulk_cachesz": 107374182,
                        "bept_cachesz": 214748364
                      }
                    },
                    "interfaces": {
                      "dontuseme0": {
                        "numanode": 4294967295,
                        "enabled": false,
                        "sriov": {
                          "function": "none",
                          "parent_device": "",
                          "vf_index": 0
                        }
                      },
                      "eth1": {
                        "numanode": 4294967295,
                        "enabled": true,
                        "sriov": {
                          "function": "none",
                          "parent_device": "",
                          "vf_index": 0
                        },
                        "rpc": {
                          "networks": [
                            "4eaf50a9-0248-4c24-bdb0-9b374948fd52"
                          ],
                          "server_port": {
                            "base": 3201,
                            "count": 100
                          },
                          "client_port": {
                            "base": 3301,
                            "count": 100
                          }
                        },
                        "jrpc": {
                          "encrypt": false
                        }
                      },
                      "lo": {
                        "numanode": 4294967295,
                        "enabled": true,
                        "sriov": {
                          "function": "none",
                          "parent_device": "",
                          "vf_index": 0
                        },
                        "rpc": {
                          "networks": [
                            "fd6b2922-8414-4675-9fc3-77a682847048"
                          ],
                          "server_port": {
                            "base": 3201,
                            "count": 100
                          },
                          "client_port": {
                            "base": 3301,
                            "count": 100
                          }
                        }
                      },
                      "rocep6s0": {
                        "numanode": 4294967295,
                        "enabled": true,
                        "sriov": {
                          "function": "none",
                          "parent_device": "",
                          "vf_index": 0
                        },
                        "rpc": {
                          "networks": [
                            "f5bee2b1-67f8-42da-916a-d5d6fea2ee65"
                          ],
                          "server_port": {
                            "base": 3201,
                            "count": 100
                          },
                          "client_port": {
                            "base": 3301,
                            "count": 100
                          }
                        }
                      }
                    },
                    "instance": {
                      "cat_cpuset": "0x2",
                      "handler_cpuset": "0x2",
                      "net_cpuset": "0x2",
                      "nvmf_cpuset": "0x2",
                      "auxiliary_cpuset": "0x2",
                      "posix_cpuset": "0x1",
                      "spdk_main_cpuset": "0x2"
                    }
                  }
                }
              ]
            }
          },
          "networks": {
            "4eaf50a9-0248-4c24-bdb0-9b374948fd52": {
              "type": "tcp",
              "name": "tcp-auto",
              "tags": [
                "NVMF_DATA_SERVICE",
                "NFS_DATA_SERVICE",
                "SQL_DATA_SERVICE",
                "SMB_DATA_SERVICE",
                "REDFS_DATA_SERVICE"
              ],
              "policy": {
                "backup": true,
                "encryption": false,
                "cq_nentries": 16384,
                "max_cq_count": 64,
                "eq_nentries": 100,
                "weight": 0
              },
              "subnet": ""
            },
            "f5bee2b1-67f8-42da-916a-d5d6fea2ee65": {
              "type": "roce",
              "name": "roce-auto",
              "tags": [
                "NVMF_DATA_SERVICE",
                "NFS_DATA_SERVICE",
                "SQL_DATA_SERVICE",
                "SMB_DATA_SERVICE",
                "REDFS_DATA_SERVICE"
              ],
              "policy": {
                "backup": false,
                "encryption": false,
                "cq_nentries": 16384,
                "max_cq_count": 64,
                "eq_nentries": 100,
                "weight": 100
              },
              "subnet": ""
            },
            "fd6b2922-8414-4675-9fc3-77a682847048": {
              "type": "tcp",
              "name": "lo-auto",
              "tags": [
                "NVMF_DATA_SERVICE",
                "NFS_DATA_SERVICE",
                "SQL_DATA_SERVICE",
                "SMB_DATA_SERVICE",
                "REDFS_DATA_SERVICE",
                "RPC_LOOPBACK"
              ],
              "policy": {
                "backup": false,
                "encryption": false,
                "cq_nentries": 16384,
                "max_cq_count": 64,
                "eq_nentries": 100,
                "weight": 100
              },
              "subnet": ""
            }
          }
        },
        "notes": [
          "Skipped device: /dev/vda capacity too small 1.0 MiB",
          "Skipped device: /dev/vda capacity too small 1.0 MiB",
          "Skipped device: /dev/vda capacity too small 1.0 MiB",
          "Put nodes using src: silyin-redvm-1, silyin-redvm-3, silyin-redvm-2, and inventory: ",
          "Generated using runtime and inventory",
          "Applying HW specific defaults for SKU Virtual Machine"
        ]
      }

    configs_produce_create_example:
      description: Create config result
      value: {
        "Create": {
          "new_config": "test_config"
        },
        "Notes": [
          "Applying HW specific defaults for SKU Virtual Machine",
          "Config test_config created."
        ]
      }

    create_subtenant_example:
      description: Create subtenant
      value: {
        "subtenant_result": 201,
        "admin_result": 201
      }

    create_tenant_example:
      description: Create tenant
      value: {
        "tenant_result": 201,
        "admin_result": 201
      }

    dp_profile_example:
      description: dp_profile example
      value: {
        "cm": {
          "availability": 0,
          "data_ltid": 3,
          "data_poolid": 1,
          "efficiency": 0,
          "id": 1,
          "max_stripe": 0,
          "meta_ltid": 2,
          "meta_poolid": 1,
          "min_stripe": 0,
          "n_write_later": 0,
          "name": "SYSTEM_DATA_1",
          "policy_id": 3,
          "protection": 0,
          "spare_count": 0,
          "t_read_max": 0,
          "t_write_max": 0
        }
      }

    get_dataset_example:
      description: Get dataset
      value: {
        "dataset": {
          "handle": "AREREQ==",
          "id": 17,
          "ltid": 1,
          "name": "red",
          "nstripes": 128,
          "ds_nfiles": 0,
          "ds_ndirs": 1,
          "start_shard": 534355,
          "pool": 1,
          "quota": 1039038152704,
          "usage": 0,
          "xattrs": {
            "block_size": 4096,
            "bucket_size": 262144,
            "dp_profile": 1,
            "ec_nparity": 2
          }
        }
      }

    get_subtenant_example:
      description: Get subtenant
      value: {
        "subtenant": {
          "id": 17,
          "name": "red",
          "weight": 32,
          "bulk_quota": 1039038152704,
          "usage": 0,
          "xattrs": {
            "RED_INTERNAL": {
              "primary-admin": "redadmin"
            }
          }
        }
      }

    get_tenant_example:
      description: Get tenant
      value: {
        "tenant": {
          "id": 17,
          "name": "red",
          "weight": 32,
          "bulk_quota": 2078076305408,
          "usage": 0,
          "xattrs": {
            "RED_INTERNAL": {
              "primary-admin": "redadmin"
            }
          }
        }
      }

    get_volume_example:
      description: Get volume
      value: {
        "volume": {
          "uuid": "a1eb4d8a-9677-41ff-8f92-d4d37375f534",
          "name": "vol01",
          "volumeid": 1,
          "wwn": "2fff0001ffffffff",
          "sn": "00000B00000B59huliP0",
          "block_size": 4096,
          "nblocks": 2441407,
          "lcore": 1,
          "xattrs": {}
        }
      }

    io_test_status_example:
      description: Start io test example
      value: {
        "1": {
          "cat[1]": [
            {
              "volume": "silyin-redvm-1:/dev/sdb",
              "params": {
                "sequential": false,
                "write": true,
                "io_size": 4096,
                "max_cmds": 16,
                "test_cycles": 100000000,
                "seconds": 1
              },
              "state": "completed",
              "date": "2024-05-23 13:32:17",
              "ios_done": 736,
              "bytes_done": 3014656,
              "cot_ios_issued": 736,
              "cot_obj_blk_msk": 15,
              "cot_start_lba": 16,
              "cot_end_lba": 31708911,
              "cot_next_lba": 16,
              "iops": 721,
              "mbs": 2,
              "latency_min": 18164,
              "latency_ave": 22055,
              "latency_max": 30075,
              "status": "Success"
            }
          ],
          "cat[2]": [
            {
              "volume": "silyin-redvm-1:/dev/sdc",
              "params": {
                "sequential": false,
                "write": true,
                "io_size": 4096,
                "max_cmds": 16,
                "test_cycles": 100000000,
                "seconds": 1
              },
              "state": "completed",
              "date": "2024-05-23 13:32:17",
              "ios_done": 736,
              "bytes_done": 3014656,
              "cot_ios_issued": 736,
              "cot_obj_blk_msk": 15,
              "cot_start_lba": 16,
              "cot_end_lba": 31708911,
              "cot_next_lba": 16,
              "iops": 698,
              "mbs": 2,
              "latency_min": 18864,
              "latency_ave": 22159,
              "latency_max": 56263,
              "status": "Success"
            }
          ],
          "cat[3]": [
            {
              "volume": "silyin-redvm-1:/dev/sdd",
              "params": {
                "sequential": false,
                "write": true,
                "io_size": 4096,
                "max_cmds": 16,
                "test_cycles": 100000000,
                "seconds": 1
              },
              "state": "completed",
              "date": "2024-05-23 13:32:17",
              "ios_done": 736,
              "bytes_done": 3014656,
              "cot_ios_issued": 736,
              "cot_obj_blk_msk": 15,
              "cot_start_lba": 16,
              "cot_end_lba": 31708911,
              "cot_next_lba": 16,
              "iops": 703,
              "mbs": 2,
              "latency_min": 19311,
              "latency_ave": 22113,
              "latency_max": 49706,
              "status": "Success"
            }
          ],
          "cat[4]": [
            {
              "volume": "silyin-redvm-1:/dev/sde",
              "params": {
                "sequential": false,
                "write": true,
                "io_size": 4096,
                "max_cmds": 16,
                "test_cycles": 100000000,
                "seconds": 1
              },
              "state": "completed",
              "date": "2024-05-23 13:32:17",
              "ios_done": 729,
              "bytes_done": 2985984,
              "cot_ios_issued": 729,
              "cot_obj_blk_msk": 15,
              "cot_start_lba": 16,
              "cot_end_lba": 31708911,
              "cot_next_lba": 16,
              "iops": 695,
              "mbs": 2,
              "latency_min": 15835,
              "latency_ave": 22325,
              "latency_max": 49833,
              "status": "Success"
            }
          ]
        },
        "2": {
          "cat[5]": [
            {
              "volume": "silyin-redvm-2:/dev/sdb",
              "params": {
                "sequential": false,
                "write": true,
                "io_size": 4096,
                "max_cmds": 16,
                "test_cycles": 100000000,
                "seconds": 1
              },
              "state": "completed",
              "date": "2024-05-23 13:32:17",
              "ios_done": 736,
              "bytes_done": 3014656,
              "cot_ios_issued": 736,
              "cot_obj_blk_msk": 15,
              "cot_start_lba": 16,
              "cot_end_lba": 31708911,
              "cot_next_lba": 16,
              "iops": 726,
              "mbs": 2,
              "latency_min": 16399,
              "latency_ave": 21892,
              "latency_max": 29448,
              "status": "Success"
            }
          ],
          "cat[6]": [
            {
              "volume": "silyin-redvm-2:/dev/sdc",
              "params": {
                "sequential": false,
                "write": true,
                "io_size": 4096,
                "max_cmds": 16,
                "test_cycles": 100000000,
                "seconds": 1
              },
              "state": "completed",
              "date": "2024-05-23 13:32:17",
              "ios_done": 736,
              "bytes_done": 3014656,
              "cot_ios_issued": 736,
              "cot_obj_blk_msk": 15,
              "cot_start_lba": 16,
              "cot_end_lba": 31708911,
              "cot_next_lba": 16,
              "iops": 726,
              "mbs": 2,
              "latency_min": 14799,
              "latency_ave": 21964,
              "latency_max": 31003,
              "status": "Success"
            }
          ],
          "cat[7]": [
            {
              "volume": "silyin-redvm-2:/dev/sdd",
              "params": {
                "sequential": false,
                "write": true,
                "io_size": 4096,
                "max_cmds": 16,
                "test_cycles": 100000000,
                "seconds": 1
              },
              "state": "completed",
              "date": "2024-05-23 13:32:17",
              "ios_done": 736,
              "bytes_done": 3014656,
              "cot_ios_issued": 736,
              "cot_obj_blk_msk": 15,
              "cot_start_lba": 16,
              "cot_end_lba": 31708911,
              "cot_next_lba": 16,
              "iops": 722,
              "mbs": 2,
              "latency_min": 18308,
              "latency_ave": 22017,
              "latency_max": 29668,
              "status": "Success"
            }
          ],
          "cat[8]": [
            {
              "volume": "silyin-redvm-2:/dev/sde",
              "params": {
                "sequential": false,
                "write": true,
                "io_size": 4096,
                "max_cmds": 16,
                "test_cycles": 100000000,
                "seconds": 1
              },
              "state": "completed",
              "date": "2024-05-23 13:32:17",
              "ios_done": 731,
              "bytes_done": 2994176,
              "cot_ios_issued": 731,
              "cot_obj_blk_msk": 15,
              "cot_start_lba": 16,
              "cot_end_lba": 31708911,
              "cot_next_lba": 16,
              "iops": 716,
              "mbs": 2,
              "latency_min": 17415,
              "latency_ave": 22149,
              "latency_max": 31904,
              "status": "Success"
            }
          ]
        },
        "3": {
          "cat[10]": [
            {
              "volume": "silyin-redvm-3:/dev/sdc",
              "params": {
                "sequential": false,
                "write": true,
                "io_size": 4096,
                "max_cmds": 16,
                "test_cycles": 100000000,
                "seconds": 1
              },
              "state": "completed",
              "date": "2024-05-23 13:32:17",
              "ios_done": 737,
              "bytes_done": 3018752,
              "cot_ios_issued": 737,
              "cot_obj_blk_msk": 15,
              "cot_start_lba": 16,
              "cot_end_lba": 31708911,
              "cot_next_lba": 16,
              "iops": 702,
              "mbs": 2,
              "latency_min": 9724,
              "latency_ave": 21969,
              "latency_max": 49606,
              "status": "Success"
            }
          ],
          "cat[11]": [
            {
              "volume": "silyin-redvm-3:/dev/sdd",
              "params": {
                "sequential": false,
                "write": true,
                "io_size": 4096,
                "max_cmds": 16,
                "test_cycles": 100000000,
                "seconds": 1
              },
              "state": "completed",
              "date": "2024-05-23 13:32:17",
              "ios_done": 749,
              "bytes_done": 3067904,
              "cot_ios_issued": 749,
              "cot_obj_blk_msk": 15,
              "cot_start_lba": 16,
              "cot_end_lba": 31708911,
              "cot_next_lba": 16,
              "iops": 716,
              "mbs": 2,
              "latency_min": 1957,
              "latency_ave": 21809,
              "latency_max": 46108,
              "status": "Success"
            }
          ],
          "cat[12]": [
            {
              "volume": "silyin-redvm-3:/dev/sde",
              "params": {
                "sequential": false,
                "write": true,
                "io_size": 4096,
                "max_cmds": 16,
                "test_cycles": 100000000,
                "seconds": 1
              },
              "state": "completed",
              "date": "2024-05-23 13:32:17",
              "ios_done": 741,
              "bytes_done": 3035136,
              "cot_ios_issued": 741,
              "cot_obj_blk_msk": 15,
              "cot_start_lba": 16,
              "cot_end_lba": 31708911,
              "cot_next_lba": 16,
              "iops": 711,
              "mbs": 2,
              "latency_min": 5356,
              "latency_ave": 21856,
              "latency_max": 41976,
              "status": "Success"
            }
          ],
          "cat[9]": [
            {
              "volume": "silyin-redvm-3:/dev/sdb",
              "params": {
                "sequential": false,
                "write": true,
                "io_size": 4096,
                "max_cmds": 16,
                "test_cycles": 100000000,
                "seconds": 1
              },
              "state": "completed",
              "date": "2024-05-23 13:32:17",
              "ios_done": 736,
              "bytes_done": 3014656,
              "cot_ios_issued": 736,
              "cot_obj_blk_msk": 15,
              "cot_start_lba": 16,
              "cot_end_lba": 31708911,
              "cot_next_lba": 16,
              "iops": 720,
              "mbs": 2,
              "latency_min": 12658,
              "latency_ave": 22085,
              "latency_max": 38408,
              "status": "Success"
            }
          ]
        }
      }

    list_datasets_example:
      description: List datasets
      value: {
        "datasets": [
          "red"
        ]
      }

    list_snapshots_example:
      description: List snapshots
      value: {
        "snapshots": [
          124281052725248
        ]
      }

    list_subsystems_example:
      description: List subsystems
      value: {
        "targets": [
          {
            "subsystems": [
              {
                "nqn": "nqn.2024-04.com.ddn.red.ten17.sub17:uuid:f16ef301-7963-4618-99f0-3cc6c42aa720",
                "name": "red.red.volume1.ac",
                "hostuuids": [
                  "0c1511b0-89f5-460e-819d-df40bc84e8f6",
                  "fac5da13-503e-47cc-9bdd-4b4330504ce7"
                ],
                "type": "NVMe",
                "serial_number": "00000B000000-EtS3J90",
                "model_number": "RED Controller",
                "allow_any_host": true,
                "max_namespaces": 0,
                "namespaces": [
                  {
                    "dataset": "red",
                    "nsid": 1,
                    "nguid": "C73618EC34AC46379135B003FC20BD6F",
                    "eui64": "0000000000000000",
                    "uuid": "c73618ec-34ac-4637-9135-b003fc20bd6f",
                    "volume": "volume1",
                    "sn": "00000B000000-EvbESA0"
                  }
                ],
                "hosts": [],
                "listeners": [
                  {
                    "transport": "TCP",
                    "trtype": "TCP",
                    "adrfam": "IPv4",
                    "trsvcid": 4420,
                    "traddrs": [
                      "172.25.116.130",
                      "172.25.116.152"
                    ]
                  }
                ]
              }
            ],
            "target": "nvmf_tgt"
          }
        ]
      }

    list_subtenants_example:
      description: List subtenants
      value: {
        "subtenants": [
          {
            "id": 17,
            "name": "red",
            "weight": 32,
            "bulk_quota": 1039038152704,
            "usage": 0,
            "xattrs": {
              "RED_INTERNAL": {
                "primary-admin": "redadmin"
              }
            }
          },
          {
            "id": 117,
            "name": "green",
            "weight": 32,
            "bulk_quota": 100000,
            "usage": 0,
            "xattrs": {
              "RED_INTERNAL": {
                "primary-admin": "greenadmin"
              }
            }
          }
        ]
      }

    list_subtenants_recurse_example:
      description: List subtenants (recurse)
      value: [
        {
          "name": "red",
          "subtenants": [
            {
              "name": "red"
            },
            {
              "name": "green"
            }
          ],
          "users": {
            "greenadmin": {
              "caps": "",
              "identity": "red",
              "name": "",
              "email": "",
              "group": "",
              "id": "3a90f0f5-ec00-4c18-ab85-050edb924f9e",
              "uid": 0
            }
          }
        }
      ]

    list_volumes_example:
      description: List volumes
      value: [
        {
          "uuid": "a1eb4d8a-9677-41ff-8f92-d4d37375f534",
          "name": "vol01",
          "volumeid": 1,
          "wwn": "21f30001ffbae8ac",
          "sn": "00000B00000Bin2RPEW0",
          "block_size": 4096,
          "nblocks": 2441407,
          "lcore": 1,
          "xattrs": {}
        }
      ]

    network_test_get_agent_groups_example:
      description: Network test get agent groups example
      "value": {
        "groups": {
          "reds3": {
            "enum": {
              "2589dd77-a1d6-4276-8d10-1f105f3dccc3": null,
              "5ee25036-c26f-4fa1-9682-ef516994481d": null,
              "c7b0925e-3afc-4f42-b40e-82db183f4268": null
            }
          }
        }
      }

    network_test_start_example:
      description: Network test start example
      value: "a3e16984-5e73-4362-99c4-33430659a762"

    network_test_status_example:
      description: Network test status example
      value: {
        "output": [
          {
            "bottom15": [
              {
                "endpoint": "2_instance",
                "hostname": "silyin-redvm-2",
                "iops": 109669.15613233754
              }
            ],
            "results": [
              {
                "bw": 0,
                "bw_ext": {
                  "avg": 0,
                  "max": 0,
                  "min": 0
                },
                "endpoint": "1_instance",
                "hostname": "silyin-redvm-1",
                "iops": 109958.9670123099,
                "iops_ext": {
                  "avg": 109958.9670123099,
                  "max": 109958.9670123099,
                  "min": 109958.9670123099
                },
                "latency": {
                  "avg": 9.094301512381888,
                  "max": 9.094301512381888,
                  "min": 9.094301512381888
                }
              },
              {
                "bw": 0,
                "bw_ext": {
                  "avg": 0,
                  "max": 0,
                  "min": 0
                },
                "endpoint": "2_instance",
                "hostname": "silyin-redvm-2",
                "iops": 109669.15613233754,
                "iops_ext": {
                  "avg": 109669.15613233754,
                  "max": 109669.15613233754,
                  "min": 109669.15613233754
                },
                "latency": {
                  "avg": 9.118334044563104,
                  "max": 9.118334044563104,
                  "min": 9.118334044563104
                }
              },
              {
                "bw": 0,
                "bw_ext": {
                  "avg": 0,
                  "max": 0,
                  "min": 0
                },
                "endpoint": "3_instance",
                "hostname": "silyin-redvm-3",
                "iops": 110120.5779758844,
                "iops_ext": {
                  "avg": 110120.5779758844,
                  "max": 110120.5779758844,
                  "min": 110120.5779758844
                },
                "latency": {
                  "avg": 9.080954880376606,
                  "max": 9.080954880376606,
                  "min": 9.080954880376606
                }
              }
            ],
            "test": "self single-threaded 0k RPC",
            "top15": [
              {
                "endpoint": "3_instance",
                "hostname": "silyin-redvm-3",
                "iops": 110120.5779758844
              }
            ],
            "total": {
              "bw": 0,
              "bw_ext": {
                "avg": 0,
                "max": 0,
                "min": 0
              },
              "iops": 329748.7011205319,
              "iops_ext": {
                "avg": 109916.23370684397,
                "max": 110120.5779758844,
                "min": 109669.15613233754
              }
            }
          }
        ],
        "status": "done"
      }

    redkvcl_test_rpc_example:
      description: Status of started redkvcl_test_rpc test example
      "value": {
        "error": "red client library is not yet ready for I/O. Retry with timeout of 1 secs !\n3000 ops executed, 0 of them failed\n\n",
        "output": "T*  I --- Completing all iterations: 1231 assign ops/sec; 16713 lookup ops/sec;  ---\n",
        "status": "Complete"
      }

    start_io_test_example:
      description: Start io test example
      value: {
        "1": {
          "cat[1]": {
            "status": "Cat iotest started"
          },
          "cat[2]": {
            "status": "Cat iotest started"
          },
          "cat[3]": {
            "status": "Cat iotest started"
          },
          "cat[4]": {
            "status": "Cat iotest started"
          }
        },
        "2": {
          "cat[5]": {
            "status": "Cat iotest started"
          },
          "cat[6]": {
            "status": "Cat iotest started"
          },
          "cat[7]": {
            "status": "Cat iotest started"
          },
          "cat[8]": {
            "status": "Cat iotest started"
          }
        },
        "3": {
          "cat[10]": {
            "status": "Cat iotest started"
          },
          "cat[11]": {
            "status": "Cat iotest started"
          },
          "cat[12]": {
            "status": "Cat iotest started"
          },
          "cat[9]": {
            "status": "Cat iotest started"
          }
        }
      }

    start_redkvcl_test_rpc_example:
      description: Start redkvcl_test_rpc test example
      "value": "Successfully started redkvcl_test_rpc"

    stats_example:
      description: RED stats example
      value: {
        "hostname": "silyin-redvm-1",
        "result": [
          {
            "measurements": [
              {
                "fields": {
                  "msg_bytes_recv": 62619376,
                  "msg_bytes_sent": 8386920,
                  "msg_dropped": 0,
                  "rdma_bytes": 5236588544,
                  "rdma_ops": 4994,
                  "req_recv": 55176,
                  "req_sent": 0,
                  "rsp_recv": 0,
                  "rsp_sent": 55176
                },
                "measurement": "perf",
                "tags": {
                  "Hostname": "silyin-redvm-1",
                  "cluster": "red01",
                  "instance": "1",
                  "instanceUUID": "ec02ace0-14bf-4d98-9fdd-169b896f0658",
                  "subsystem": "rpc",
                  "tag_0": "network",
                  "tag_1": "client[0][10000]"
                }
              },
              {
                "fields": {
                  "msg_bytes_recv": 61477412,
                  "msg_bytes_sent": 9259352,
                  "msg_dropped": 0,
                  "rdma_bytes": 5032116224,
                  "rdma_ops": 4799,
                  "req_recv": 60510,
                  "req_sent": 0,
                  "rsp_recv": 0,
                  "rsp_sent": 60510
                },
                "measurement": "perf",
                "tags": {
                  "Hostname": "silyin-redvm-1",
                  "cluster": "red01",
                  "instance": "1",
                  "instanceUUID": "ec02ace0-14bf-4d98-9fdd-169b896f0658",
                  "subsystem": "rpc",
                  "tag_0": "network",
                  "tag_1": "client[0][10001]"
                }
              },
              {
                "fields": {
                  "msg_bytes_recv": 61561827,
                  "msg_bytes_sent": 9234264,
                  "msg_dropped": 0,
                  "rdma_bytes": 4728029184,
                  "rdma_ops": 4509,
                  "req_recv": 60345,
                  "req_sent": 0,
                  "rsp_recv": 0,
                  "rsp_sent": 60345
                },
                "measurement": "perf",
                "tags": {
                  "Hostname": "silyin-redvm-1",
                  "cluster": "red01",
                  "instance": "1",
                  "instanceUUID": "ec02ace0-14bf-4d98-9fdd-169b896f0658",
                  "subsystem": "rpc",
                  "tag_0": "network",
                  "tag_1": "client[0][10002]"
                }
              },
              {
                "fields": {
                  "bps_total": 66936292.3,
                  "bytes_recv_percent": 57.860154139430875,
                  "bytes_sent_percent": 42.139845860569125,
                  "bytes_total": 669362923,
                  "msg_bytes_recv": 387294419,
                  "msg_bytes_sent": 282068504,
                  "msg_dropped": 0,
                  "network_percent": 0.25534169120788575,
                  "rdma_bytes": 20085473280,
                  "rdma_ops": 19155,
                  "req_recv": 382733,
                  "req_sent": 208000,
                  "rsp_recv": 208000,
                  "rsp_sent": 382733,
                  "speed_mbps": 100000
                },
                "measurement": "perf",
                "tags": {
                  "Hostname": "silyin-redvm-1",
                  "cluster": "red01",
                  "instance": "1",
                  "instanceUUID": "ec02ace0-14bf-4d98-9fdd-169b896f0658",
                  "subsystem": "rpc",
                  "tag_0": "network",
                  "tag_1": "aggregate"
                }
              },
              {
                "fields": {
                  "msg_bytes_recv": 131797308,
                  "msg_bytes_sent": 132092301,
                  "msg_dropped": 0,
                  "rdma_bytes": 2585788416,
                  "rdma_ops": 2466,
                  "req_recv": 103569,
                  "req_sent": 103916,
                  "rsp_recv": 103916,
                  "rsp_sent": 103569
                },
                "measurement": "perf",
                "tags": {
                  "Hostname": "silyin-redvm-1",
                  "cluster": "red01",
                  "instance": "1",
                  "instanceUUID": "ec02ace0-14bf-4d98-9fdd-169b896f0658",
                  "subsystem": "rpc",
                  "tag_0": "network",
                  "tag_1": "79585747-7ca2-45d9-8280-a2d9c2dfa86d",
                  "tag_2": "eth1",
                  "tag_3": "dst_instance[2]"
                }
              },
              {
                "fields": {
                  "msg_bytes_recv": 62619376,
                  "msg_bytes_sent": 8386920,
                  "msg_dropped": 0,
                  "rdma_bytes": 5236588544,
                  "rdma_ops": 4994,
                  "req_recv": 55176,
                  "req_sent": 0,
                  "rsp_recv": 0,
                  "rsp_sent": 55176
                },
                "measurement": "perf",
                "tags": {
                  "Hostname": "silyin-redvm-1",
                  "cluster": "red01",
                  "instance": "1",
                  "instanceUUID": "ec02ace0-14bf-4d98-9fdd-169b896f0658",
                  "subsystem": "rpc",
                  "tag_0": "network",
                  "tag_1": "79585747-7ca2-45d9-8280-a2d9c2dfa86d",
                  "tag_2": "eth1",
                  "tag_3": "client[0][10000]"
                }
              },
              {
                "fields": {
                  "msg_bytes_recv": 61561827,
                  "msg_bytes_sent": 9234264,
                  "msg_dropped": 0,
                  "rdma_bytes": 4728029184,
                  "rdma_ops": 4509,
                  "req_recv": 60345,
                  "req_sent": 0,
                  "rsp_recv": 0,
                  "rsp_sent": 60345
                },
                "measurement": "perf",
                "tags": {
                  "Hostname": "silyin-redvm-1",
                  "cluster": "red01",
                  "instance": "1",
                  "instanceUUID": "ec02ace0-14bf-4d98-9fdd-169b896f0658",
                  "subsystem": "rpc",
                  "tag_0": "network",
                  "tag_1": "79585747-7ca2-45d9-8280-a2d9c2dfa86d",
                  "tag_2": "eth1",
                  "tag_3": "client[0][10002]"
                }
              },
              {
                "fields": {
                  "msg_bytes_recv": 61477412,
                  "msg_bytes_sent": 9259352,
                  "msg_dropped": 0,
                  "rdma_bytes": 5032116224,
                  "rdma_ops": 4799,
                  "req_recv": 60510,
                  "req_sent": 0,
                  "rsp_recv": 0,
                  "rsp_sent": 60510
                },
                "measurement": "perf",
                "tags": {
                  "Hostname": "silyin-redvm-1",
                  "cluster": "red01",
                  "instance": "1",
                  "instanceUUID": "ec02ace0-14bf-4d98-9fdd-169b896f0658",
                  "subsystem": "rpc",
                  "tag_0": "network",
                  "tag_1": "79585747-7ca2-45d9-8280-a2d9c2dfa86d",
                  "tag_2": "eth1",
                  "tag_3": "client[0][10001]"
                }
              },
              {
                "fields": {
                  "msg_bytes_recv": 131398243,
                  "msg_bytes_sent": 132328331,
                  "msg_dropped": 0,
                  "rdma_bytes": 2502950912,
                  "rdma_ops": 2387,
                  "req_recv": 103133,
                  "req_sent": 104084,
                  "rsp_recv": 104084,
                  "rsp_sent": 103133
                },
                "measurement": "perf",
                "tags": {
                  "Hostname": "silyin-redvm-1",
                  "cluster": "red01",
                  "instance": "1",
                  "instanceUUID": "ec02ace0-14bf-4d98-9fdd-169b896f0658",
                  "subsystem": "rpc",
                  "tag_0": "network",
                  "tag_1": "79585747-7ca2-45d9-8280-a2d9c2dfa86d",
                  "tag_2": "eth1",
                  "tag_3": "dst_instance[3]"
                }
              },
              {
                "fields": {
                  "addr": "sockaddr_in://172.25.116.148",
                  "bps_total": 66936292.3,
                  "bytes_recv_percent": 57.860154139430875,
                  "bytes_sent_percent": 42.139845860569125,
                  "bytes_total": 669362923,
                  "conreq_fail": 0,
                  "conreq_success": 5,
                  "latency_avg": 853,
                  "latency_max": 41943,
                  "latency_min": 2,
                  "msg_bytes_recv": 448854166,
                  "msg_bytes_sent": 291301168,
                  "msg_dropped": 0,
                  "network_percent": 0.25534169120788575,
                  "rdma_bytes": 20085473280,
                  "rdma_ops": 19155,
                  "req_recv": 382733,
                  "req_sent": 208000,
                  "rsp_recv": 208000,
                  "rsp_sent": 382733,
                  "rx_mbps": 387.294419,
                  "speed_mbps": 100000,
                  "sriov_function": "none",
                  "tx_mbps": 282.068504
                },
                "measurement": "perf",
                "tags": {
                  "Hostname": "silyin-redvm-1",
                  "cluster": "red01",
                  "instance": "1",
                  "instanceUUID": "ec02ace0-14bf-4d98-9fdd-169b896f0658",
                  "subsystem": "rpc",
                  "tag_0": "network",
                  "tag_1": "79585747-7ca2-45d9-8280-a2d9c2dfa86d",
                  "tag_2": "eth1"
                }
              },
              {
                "fields": {
                  "msg_bytes_recv": 448854166,
                  "msg_bytes_sent": 291301168,
                  "msg_dropped": 0,
                  "name": "tcp-auto",
                  "rdma_bytes": 20085473280,
                  "rdma_ops": 19155,
                  "req_recv": 382733,
                  "req_sent": 208000,
                  "rsp_recv": 208000,
                  "rsp_sent": 382733,
                  "type": "tcp"
                },
                "measurement": "perf",
                "tags": {
                  "Hostname": "silyin-redvm-1",
                  "cluster": "red01",
                  "instance": "1",
                  "instanceUUID": "ec02ace0-14bf-4d98-9fdd-169b896f0658",
                  "subsystem": "rpc",
                  "tag_0": "network",
                  "tag_1": "79585747-7ca2-45d9-8280-a2d9c2dfa86d"
                }
              },
              {
                "fields": {
                  "addr": "sockaddr_in://127.0.0.1",
                  "conreq_fail": 0,
                  "conreq_success": 0,
                  "latency_avg": 0,
                  "latency_max": 0,
                  "latency_min": 737869762948382100,
                  "msg_bytes_recv": 0,
                  "msg_bytes_sent": 0,
                  "msg_dropped": 0,
                  "rdma_bytes": 0,
                  "rdma_ops": 0,
                  "req_recv": 0,
                  "req_sent": 0,
                  "rsp_recv": 0,
                  "rsp_sent": 0,
                  "rx_mbps": 0,
                  "speed_mbps": -1,
                  "sriov_function": "none",
                  "tx_mbps": 0
                },
                "measurement": "perf",
                "tags": {
                  "Hostname": "silyin-redvm-1",
                  "cluster": "red01",
                  "instance": "1",
                  "instanceUUID": "ec02ace0-14bf-4d98-9fdd-169b896f0658",
                  "subsystem": "rpc",
                  "tag_0": "network",
                  "tag_1": "9ae72177-72df-4cbf-ba03-b88fc1f87b99",
                  "tag_2": "lo"
                }
              },
              {
                "fields": {
                  "msg_bytes_recv": 0,
                  "msg_bytes_sent": 0,
                  "msg_dropped": 0,
                  "name": "lo-auto",
                  "rdma_bytes": 0,
                  "rdma_ops": 0,
                  "req_recv": 0,
                  "req_sent": 0,
                  "rsp_recv": 0,
                  "rsp_sent": 0,
                  "type": "tcp"
                },
                "measurement": "perf",
                "tags": {
                  "Hostname": "silyin-redvm-1",
                  "cluster": "red01",
                  "instance": "1",
                  "instanceUUID": "ec02ace0-14bf-4d98-9fdd-169b896f0658",
                  "subsystem": "rpc",
                  "tag_0": "network",
                  "tag_1": "9ae72177-72df-4cbf-ba03-b88fc1f87b99"
                }
              },
              {
                "fields": {
                  "msg_bytes_recv": 131398243,
                  "msg_bytes_sent": 132328331,
                  "msg_dropped": 0,
                  "rdma_bytes": 2502950912,
                  "rdma_ops": 2387,
                  "req_recv": 103133,
                  "req_sent": 104084,
                  "rsp_recv": 104084,
                  "rsp_sent": 103133
                },
                "measurement": "perf",
                "tags": {
                  "Hostname": "silyin-redvm-1",
                  "cluster": "red01",
                  "instance": "1",
                  "instanceUUID": "ec02ace0-14bf-4d98-9fdd-169b896f0658",
                  "subsystem": "rpc",
                  "tag_0": "network",
                  "tag_1": "peer[3]"
                }
              },
              {
                "fields": {
                  "msg_bytes_recv": 1536,
                  "msg_bytes_sent": 1536,
                  "msg_dropped": 0,
                  "rdma_bytes": 0,
                  "rdma_ops": 0,
                  "req_recv": 5,
                  "req_sent": 5,
                  "rsp_recv": 5,
                  "rsp_sent": 5
                },
                "measurement": "perf",
                "tags": {
                  "Hostname": "silyin-redvm-1",
                  "cluster": "red01",
                  "instance": "1",
                  "instanceUUID": "ec02ace0-14bf-4d98-9fdd-169b896f0658",
                  "subsystem": "rpc",
                  "tag_0": "network",
                  "tag_1": "peer[1]"
                }
              },
              {
                "fields": {
                  "msg_bytes_recv": 131797308,
                  "msg_bytes_sent": 132092301,
                  "msg_dropped": 0,
                  "rdma_bytes": 2585788416,
                  "rdma_ops": 2466,
                  "req_recv": 103569,
                  "req_sent": 103916,
                  "rsp_recv": 103916,
                  "rsp_sent": 103569
                },
                "measurement": "perf",
                "tags": {
                  "Hostname": "silyin-redvm-1",
                  "cluster": "red01",
                  "instance": "1",
                  "instanceUUID": "ec02ace0-14bf-4d98-9fdd-169b896f0658",
                  "subsystem": "rpc",
                  "tag_0": "network",
                  "tag_1": "peer[2]"
                }
              }
            ],
            "timestamp": 1714137298
          }
        ]
      }

    stats_config_example:
      description: RED stats config example
      value: [
        {
          "CollectFreq": 10,
          "CurrentQlen": 10,
          "LatestTS": 1714137398,
          "MaxQLen": 10,
          "MemoryInUse": 7740,
          "Name": "spdkstat",
          "State": 0,
          "TargetType": 4
        },
        {
          "CollectFreq": 10,
          "CurrentQlen": 10,
          "LatestTS": 1714137395,
          "MaxQLen": 10,
          "MemoryInUse": 15000,
          "Name": "hugepages",
          "State": 0,
          "TargetType": 1
        },
        {
          "CollectFreq": 10,
          "CurrentQlen": 10,
          "LatestTS": 1714137399,
          "MaxQLen": 10,
          "MemoryInUse": 2064061,
          "Name": "monitor",
          "State": 0,
          "TargetType": 0
        },
        {
          "CollectFreq": 10,
          "CurrentQlen": 0,
          "LatestTS": 0,
          "MaxQLen": 1000,
          "MemoryInUse": 0,
          "Name": "hmi-events",
          "State": 0,
          "TargetType": 2
        },
        {
          "CollectFreq": 10,
          "CurrentQlen": 10,
          "LatestTS": 1714137396,
          "MaxQLen": 10,
          "MemoryInUse": 78890,
          "Name": "disk",
          "State": 0,
          "TargetType": 1
        },
        {
          "CollectFreq": 1,
          "CurrentQlen": 35,
          "LatestTS": 1714129549609001000,
          "MaxQLen": 1000,
          "MemoryInUse": 26557,
          "Name": "instance-events-red01[1]",
          "State": 0,
          "TargetType": 2
        },
        {
          "CollectFreq": 10,
          "CurrentQlen": 10,
          "LatestTS": 1714137395,
          "MaxQLen": 10,
          "MemoryInUse": 40735,
          "Name": "netdev",
          "State": 0,
          "TargetType": 1
        },
        {
          "CollectFreq": 10,
          "CurrentQlen": 0,
          "LatestTS": 0,
          "MaxQLen": 1000,
          "MemoryInUse": 0,
          "Name": "examgr-events",
          "State": 0,
          "TargetType": 2
        },
        {
          "CollectFreq": 600,
          "CurrentQlen": 3,
          "LatestTS": 1714136835,
          "MaxQLen": 10,
          "MemoryInUse": 5632,
          "Name": "quotastats",
          "State": 0,
          "TargetType": 1
        },
        {
          "CollectFreq": 10,
          "CurrentQlen": 10,
          "LatestTS": 1714137395,
          "MaxQLen": 10,
          "MemoryInUse": 17652,
          "Name": "memory",
          "State": 0,
          "TargetType": 1
        },
        {
          "CollectFreq": 10,
          "CurrentQlen": 10,
          "LatestTS": 1714137398,
          "MaxQLen": 10,
          "MemoryInUse": 771169,
          "Name": "perf",
          "State": 0,
          "TargetType": 0
        },
        {
          "CollectFreq": 10,
          "CurrentQlen": 10,
          "LatestTS": 1714137398,
          "MaxQLen": 10,
          "MemoryInUse": 139000,
          "Name": "spdkpoll",
          "State": 0,
          "TargetType": 4
        },
        {
          "CollectFreq": 600,
          "CurrentQlen": 3,
          "LatestTS": 1714136835,
          "MaxQLen": 10,
          "MemoryInUse": 1434,
          "Name": "s3stats",
          "State": 0,
          "TargetType": 1
        },
        {
          "CollectFreq": 10,
          "CurrentQlen": 10,
          "LatestTS": 1714137397,
          "MaxQLen": 10,
          "MemoryInUse": 10330,
          "Name": "infiniband",
          "State": 0,
          "TargetType": 1
        },
        {
          "CollectFreq": 10,
          "CurrentQlen": 0,
          "LatestTS": 0,
          "MaxQLen": 1000,
          "MemoryInUse": 0,
          "Name": "agent-events",
          "State": 0,
          "TargetType": 2
        },
        {
          "CollectFreq": 10,
          "CurrentQlen": 10,
          "LatestTS": 1714137398,
          "MaxQLen": 10,
          "MemoryInUse": 56430,
          "Name": "etcdstats",
          "State": 0,
          "TargetType": 0
        },
        {
          "CollectFreq": 10,
          "CurrentQlen": 0,
          "LatestTS": 0,
          "MaxQLen": 10,
          "MemoryInUse": 0,
          "Name": "etcdmetrics",
          "State": 0,
          "TargetType": 1
        },
        {
          "CollectFreq": 10,
          "CurrentQlen": 10,
          "LatestTS": 1714137398,
          "MaxQLen": 10,
          "MemoryInUse": 3110,
          "Name": "spdkrect",
          "State": 0,
          "TargetType": 4
        },
        {
          "CollectFreq": 10,
          "CurrentQlen": 10,
          "LatestTS": 1714137395,
          "MaxQLen": 10,
          "MemoryInUse": 14096,
          "Name": "cpu",
          "State": 0,
          "TargetType": 1
        },
        {
          "CollectFreq": 600,
          "CurrentQlen": 3,
          "LatestTS": 1714136835,
          "MaxQLen": 10,
          "MemoryInUse": 126,
          "Name": "iostats",
          "State": 0,
          "TargetType": 1
        },
        {
          "CollectFreq": 10,
          "CurrentQlen": 111,
          "LatestTS": 1714137304714137000,
          "MaxQLen": 1000,
          "MemoryInUse": 62765,
          "Name": "api-events",
          "State": 0,
          "TargetType": 2
        },
        {
          "CollectFreq": 10,
          "CurrentQlen": 10,
          "LatestTS": 1714137396,
          "MaxQLen": 10,
          "MemoryInUse": 696310,
          "Name": "latency",
          "State": 0,
          "TargetType": 0
        }
      ]

    tenants_example:
      description: List tenants
      value: {
        "tenants": [
          {
            "id": 17,
            "name": "red",
            "weight": 32,
            "bulk_quota": 1039038152704,
            "usage": 0,
            "xattrs": {
              "RED_INTERNAL": {
                "primary-admin": "redadmin"
              }
            }
          }
        ]
      }

    tenants_recurse_example:
      description: The tree of tenants, subtenants and users example
      value: [
        {
          "name": "red",
          "subtenants": [
            {
              "name": "red"
            }
          ],
          "users": {
            "redadmin": {
              "caps": "",
              "identity": "red",
              "name": "",
              "email": "",
              "group": "",
              "id": "740c0a55-4b67-4a91-8720-0e9c1ac10434",
              "uid": 0
            }
          }
        }
      ]

    update_subtenant_example:
      description: Update subtenant
      value: {
        "subtenant_result": 200,
        "admin_result": 202
      }

    update_tenant_example:
      description: Update tenant
      value: {
        "tenant_result": 200,
        "admin_result": 202
      }

    update_volume_example:
      description: Update volume
      value: {
        "uuid": "a1eb4d8a-9677-41ff-8f92-d4d37375f534",
        "name": "vol01",
        "volumeid": 1,
        "wwn": "2fff0001ffffffff",
        "sn": "00000B00000B9zwZv6r0",
        "block_size": 4096,
        "nblocks": 2441407,
        "lcore": 1,
        "xattrs": {
          "key1": "value1"
        }
      }

    verify_network_example:
      description: Verify network connectivity example
      "value": {
        "silyin-redvm-1": [
          {
            "type": "redagent",
            "hostname": "silyin-redvm-2",
            "ip": "250.58.174.230",
            "result": true
          },
          {
            "type": "redagent",
            "hostname": "silyin-redvm-2",
            "ip": "250.58.174.230",
            "result": true
          },
          {
            "type": "redagent",
            "hostname": "silyin-redvm-3",
            "ip": "250.58.174.216",
            "result": true
          },
          {
            "type": "redagent",
            "hostname": "silyin-redvm-3",
            "ip": "250.58.174.216",
            "result": true
          },
          {
            "type": "redapi",
            "hostname": "silyin-redvm-2",
            "ip": "250.58.174.230",
            "result": true
          },
          {
            "type": "redapi",
            "hostname": "silyin-redvm-3",
            "ip": "250.58.174.216",
            "result": true
          },
          {
            "type": "redsetup",
            "hostname": "silyin-redvm-2",
            "ip": "250.58.174.230",
            "result": true
          },
          {
            "type": "redsetup",
            "hostname": "silyin-redvm-3",
            "ip": "250.58.174.216",
            "result": true
          }
        ],
        "silyin-redvm-2": [
          {
            "type": "redagent",
            "hostname": "silyin-redvm-1",
            "ip": "172.25.116.79",
            "result": true
          },
          {
            "type": "redagent",
            "hostname": "silyin-redvm-1",
            "ip": "250.58.174.253",
            "result": true
          },
          {
            "type": "redagent",
            "hostname": "silyin-redvm-3",
            "ip": "250.58.174.216",
            "result": true
          },
          {
            "type": "redagent",
            "hostname": "silyin-redvm-3",
            "ip": "250.58.174.216",
            "result": true
          },
          {
            "type": "redapi",
            "hostname": "silyin-redvm-3",
            "ip": "250.58.174.216",
            "result": true
          },
          {
            "type": "redapi",
            "hostname": "silyin-redvm-1",
            "ip": "250.58.174.253",
            "result": true
          },
          {
            "type": "redsetup",
            "hostname": "silyin-redvm-1",
            "ip": "250.58.174.253",
            "result": true
          },
          {
            "type": "redsetup",
            "hostname": "silyin-redvm-3",
            "ip": "250.58.174.216",
            "result": true
          }
        ],
        "silyin-redvm-3": [
          {
            "type": "redagent",
            "hostname": "silyin-redvm-1",
            "ip": "250.58.174.253",
            "result": true
          },
          {
            "type": "redagent",
            "hostname": "silyin-redvm-1",
            "ip": "250.58.174.253",
            "result": true
          },
          {
            "type": "redagent",
            "hostname": "silyin-redvm-2",
            "ip": "250.58.174.230",
            "result": true
          },
          {
            "type": "redagent",
            "hostname": "silyin-redvm-2",
            "ip": "172.25.116.61",
            "result": true
          },
          {
            "type": "redapi",
            "hostname": "silyin-redvm-1",
            "ip": "250.58.174.253",
            "result": true
          },
          {
            "type": "redapi",
            "hostname": "silyin-redvm-2",
            "ip": "250.58.174.230",
            "result": true
          },
          {
            "type": "redsetup",
            "hostname": "silyin-redvm-1",
            "ip": "250.58.174.253",
            "result": true
          },
          {
            "type": "redsetup",
            "hostname": "silyin-redvm-2",
            "ip": "250.58.174.230",
            "result": true
          }
        ]
      }

    vhost_controller_example:
      description: Vhost controller example
      value: {
        "cpumask": "0x2",
        "lcore": 1,
        "name": "vhost.1",
        "timestamp": 1711981216,
        "uuid": "6a4e9057-ba6a-4d90-adb2-8d4ecf1b6daa",
        "version": "1.1"
      }

    vhost_controller_volume_attach_example:
      description: Attach volume to vhost controller example
      value: {
        "ctrlr": {
          "cpumask": "0x2",
          "name": "vhost.1",
          "uuid": "6a4e9057-ba6a-4d90-adb2-8d4ecf1b6daa"
        },
        "id": -22,
        "lun": 0,
        "uuid": "3223fd05-6951-4d79-9edc-96f2cc1fc6b5",
        "volume": {
          "volume": {
            "block_size": 4096,
            "lcore": 1,
            "name": "volume1",
            "nblocks": 2441407,
            "sn": "00000B00000HPF4g39r0",
            "uuid": "c73618ec-34ac-4637-9135-b003fc20bd6f",
            "volumeid": 4,
            "wwn": "25c70001ffd8bff0",
            "xattrs": {}
          }
        }
      }

    vhost_controller_volume_detach_example:
      description: Detach volume from vhost controller example
      value: {
        "lcore": 1,
        "status": "removed",
        "timestamp": 1711981728,
        "version": "1.1"
      }

    vhost_controller_volumes_example:
      description: Vhost controller volumes example
      value: {
        "lcore": 1,
        "timestamp": 1711981630,
        "version": "1.1",
        "ctrlrs": [
          {
            "uuid": "6a4e9057-ba6a-4d90-adb2-8d4ecf1b6daa",
            "name": "vhost.1",
            "targets": [
              {
                "uuid": "3223fd05-6951-4d79-9edc-96f2cc1fc6b5",
                "volume": {
                  "uuid": "c73618ec-34ac-4637-9135-b003fc20bd6f",
                  "name": "volume1",
                  "target_id": -22
                }
              }
            ]
          }
        ]
      }

